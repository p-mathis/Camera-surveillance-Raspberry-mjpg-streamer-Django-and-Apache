[{"id":0,"href":"/script/","title":"Scripts","parent":"Présentation","content":""},{"id":1,"href":"/tuto/part10/","title":"Tutoriel : Partie 10 - Mise en place de 2 Raspberry","parent":"Tutos","content":"Position du problème La Raspberry peut être limitée en termes de capacités Soit parce que le nombre de caméras est élevé et que la Raspberry va peiner à traiter toutes les images Soit parce qu\u0026rsquo;on souhaite utiliser deux caméras pi et que la Raspberry ne peut en accueillir qu\u0026rsquo;une Nous appelons Raspberry Principale la Raspberry qui héberge le site Django Et Raspberry Secondaire la nouvelle Raspberry Schéma de la procédure Installer la Raspberry Secondaire et la caméra Créer les scripts sur cette Raspberry Créer un répertoire de stockage des photos sur la Raspberry Principale et créer la caméra dans la base de données Modifier le serveur Apache sur la Raspberry Principale Installer la Raspberry Secondaire Préparer la Raspberry : procédure de la première partie du tutoriel Mettre en place sur cette Raspberry mjpg-streamer C\u0026rsquo;est la même procédure que celle indiquée dans la deuxième partie du tutoriel On peut mettre en place un fichier de configuration sur cette Raspberry Secondaire Dans ce tutoriel, on simplifie en codant en dur les variables liées à la Raspberry Secondaire Installer la camera en suivant la procédure du tutoriel Créer les scripts sur la Raspberry Secondaire Créer différents dossiers Créer un dossier script placé dans /home/pi/ mkdir ~/script Créer un dossier de stockage des images sudo mkdir /var/www/stock /var/www/stock/Camera Changer le propriétaire de /var/www/stock sudo chown -R pi /var/www/stock Script de lancement de la camera Créer le script en écriture nano ~/script/runCamera.py Écrire le contenu import subprocess from time import sleep \u0026#34;\u0026#34;\u0026#34;Modifier les valeurs en fonction\u0026#34;\u0026#34;\u0026#34; mjpg_path = \u0026#34;/home/pi/mjpg-streamer-experimental\u0026#34; cam_name = \u0026#34;xxxx-video-index0\u0026#34; cam_port = \u0026#34;8088\u0026#34; cam_resol = \u0026#34;640x480\u0026#34; cam_fps = 5 delay_run = 60 sleep(delay_run) #attente avant de lancer les commandes command = \u0026#34;cd {} \u0026amp;\u0026amp; export LD_LIBRARY_PATH=. \u0026amp;\u0026amp; ./mjpg_streamer -i \u0026#39;input_uvc.so -r {} -fps {} -d /dev/v4l/by-id/{}\u0026#39; -o \u0026#39;output_http.so -p {} -w {}/www\u0026#39;\u0026#34;.format(mjpg_path,cam_resol, cam_fps, cam_name, cam_port, mjpg_path) subprocess.run(command, shell=True) Modifier les valeurs en fonction des paramètres choisis Lancer le script au démareage Ouvrir le crontab crontab -e Ajouter la commande @reboot python3 /home/pi/script/runCamera.py Script d\u0026rsquo;envoi des images vers la Raspberry Principale Principe Les images vont être stockées dans le dossier /var/www/stock/Camera de la deuxième caméra toutes les minutes Elles sont envoyées par le protocole scp sur la Raspberry principale Elles sont stockées dans un dossier /var/www/stock/Camera_n où n représente la n-ième caméra du système Charger les bibliothèques nécessaires Ouvrir un terminal dans la Raspberry Secondaire : Ctrl + Alt + T Installer les deux bibliothèques nécessaires pip3 install paramiko pip3 install scp Créer le script en écriture dans la Raspberry Secondaire nano ~/script/stockAndSendImage.py Écrire le contenu import paramiko from scp import SCPClient from datetime import datetime from time import sleep import subprocess def createSSHClient(server, port, user, password): client = paramiko.SSHClient() client.load_system_host_keys() client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) client.connect(server, port, user, password) return client \u0026#34;\u0026#34;\u0026#34;Modifier les valeurs en fonction\u0026#34;\u0026#34;\u0026#34; delay = 8 # délai en secondes entre la prise de la photo et son envoi par le protocole scp # Les données concernant la Raspberry Principale server = \u0026#34;192.168.1.50\u0026#34; # l\u0026#39;adresse IP locale de la Raspberry Principale qui porte le site Django port = \u0026#34;22\u0026#34; # le port usuel du ssh en local user = \u0026#34;pi\u0026#34; # si vous n\u0026#39;avez pas modifié le nom d\u0026#39;utilisateur de la Raspberry Principale password = \u0026#34;le mot de passe de la Raspberry Principale\u0026#34; path_server = \u0026#34;/var/www/stock/Camera_8\u0026#34; # modifier selon le lieu de stockage sur la Raspberry Principale # Les données concernant la Raspberry Secondaire sender = \u0026#34;127.0.0.1\u0026#34; # peut aussi être remplacé par 192.168.1.xx ; représente l\u0026#39;ip locale de la Raspberry Secondaire cam_port = \u0026#34;8088\u0026#34; # le port donné à la caméra de la Raspberry Secondaire path_sender = \u0026#34;/var/www/stock/Camera\u0026#34; # le lieu de stockage défini au niveau de la Raspberry Secondaire name = datetime.now().strftime(\u0026#34;%d-%m_%H:%M:00\u0026#34;) # le nom de la photo du type 25-06_19:52:00 si la photo a été prise un 25 juin à 19h52 command = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(sender, cam_port, path_sender, name) subprocess.run(command, shell=True) sleep(delay) ssh = createSSHClient(server, port, user, password) # création du client ssh : la Raspberry Principale scp = SCPClient(ssh.get_transport()) scp.put(f\u0026#39;{path_sender}/{name}.jpg\u0026#39;,f\u0026#39;{path_server}\u0026#39;) # envoi de la photo en scp scp.close() print(\u0026#34;closed / end\u0026#34;) Lancer le script toutes les minutes Ouvrir le crontab crontab -e Ajouter la commande * * * * * python3 /home/pi/script/stockAndSendImage.py Script de destruction périodique des photos stockées On procède comme cela a été fait pour la Raspberry Principale Créer et ouvrir en écriture le fichier suppressFiles.py nano ~/script/suppressFiles.py Copier le code suivant from subprocess import run path = \u0026#34;/var/www/stock/Camera\u0026#34; delay_delete = 2 # en jours : nombre de jours de stockage des photos command = [\u0026#34;find\u0026#34;, f\u0026#39;{path}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] run(command) Lancer le script tous les jours à 03H10 du matin (par exemple) dans le crontab Ouvrir le cron en édition crontab -e Ajouter la ligne suivante 10 03 * * * python3 /home/pi/script/suppressFiles.py Modifications au niveau de la Raspberry Principale Coder en dur ? Soit on apporte les modifications de variable au niveau du fichier /etc/camera/configuration.ini Soit on code en dur dans les différents fichiers Dans ce tutoriel, par simplification, on code en dur Créer un répertoire de stockage Se connecter en ssh à la Raspberry Principale Créer le dossier Camera-n (où n représente la n-ième caméra) mkdir /var/www/stock/Camera-n A priori, inutile d\u0026rsquo;être en sudo : pi a les droits sur le dossier /var/www/stock Modifier le fichier de suppression des images Ouvrir le fichier suppressFiles nano ~/script/suppressFiles.py Ajouter la commande de suppression des fichiers command_8 = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/Camera-8\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] En modifiant, éventuellement, le nom de la commande et Camera-8 par le nom du dossier où sont stockées les photos dans la Raspberry Principale Et lancer la commande en ajoutant run(command_8) Créer la caméra dans la base de données Procéder comme dans le tutoriel Partie 8 - Créer la caméra Ouvrir le shell en environnement virtuel Créer la caméra en lui donnant la valeur Appareil(name=\u0026quot;Cam_n) (par exemple Cam_8) Quitter le shell Modifier le fichier getCamerasAndRegister.py Il faut que les images stockées dans /var/www/stock soient intégrées dans la base de données Dans cette configuration, on a deux caméras au niveau de la raspberry secondaire : Camera_5 et Camera_ir (une pi-camera) Ajouter avant la boucle while True # Ajout des caméras de la 2ème raspberry pathCamera_5 = \u0026#34;Camera_5\u0026#34; pathCamera_ir = \u0026#34;Camera_ir\u0026#34; Ajouter dans la boucle while True avant conn.commit() # Ajout des caméras de la 2ème raspberry c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;5\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_5)) c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;6\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_ir)) Tout ceci si on a nommé les dossiers de stockage Camera_5 et Camera_ir\nEt si on a créé deux caméras dans le shell\nLe nouveau fichier getCamerasAndRegister.py est visible dans la partie script\nModifier les fichiers urls.py et views.py Suivre les indications données dans le tutoriel Partie 8 - Fichiers urls et views Modifier urls.py en ajoutant le path pour le streaming, par exemple stream_8 Dans views.py, modifier les fonctions ad hoc Y ajouter la fonction de streaming (par exemple, si la caméra est la 8) def stream_8(request): stream = [\u0026#34;/Rp8?action=stream\u0026#34;] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_8.html\u0026#34;.format(appli), context) Modifier les fichiers html Suivre les indications données dans le tutoriel Partie 8 - Fichiers html Modifier le fichier de configuration apache2 Suivre les indications données dans le tutoriel Partie 8 - Fichier de configuaration apache Au niveau des proxyPass, il convient de modifier l\u0026rsquo;adresse ip en y affectant l\u0026rsquo;adresse de la Raspberry Secondaire Ajouter dans le fichier /etc/apache2/sites-available/project-camera.conf, aux endroits ad hoc des lignes du style ProxyPass /Rp8 http://\u0026lt;localIP RaspberrySecondaire\u0026gt;:8088/ ProxyPassReverse /Rp8 http://\u0026lt;localIP RaspberrySecondaire\u0026gt;:8088/ Si l\u0026rsquo;adresse de la Raspberry Secondaire est 192.168.1.36, par exemple, cela donnera ProxyPass /Rp8 http://192.168.1.36:8088/ ProxyPassReverse /Rp8 http://192.168.1.36:8088/ Il faut modifier ces lignes au niveau dc chaque VirtualHost, c\u0026rsquo;est à dire le 443 et le 88 Ne pas oublier de relancer apache2 sudo systemctl restart apache2 "},{"id":2,"href":"/tuto/","title":"Tutos","parent":"Présentation","content":""},{"id":3,"href":"/extra/","title":"Extra","parent":"Présentation","content":""},{"id":4,"href":"/extra/wifi/","title":"Wifi","parent":"Extra","content":"Connexion au WiFi Position du problème Si la Raspberry est connectée en WiFi et non en filaire, lors d\u0026rsquo;une panne de courant, la Raspberry se mettra en route AVANT que la WiFi ne soit disponible La Raspberry sera alors incapable de se connecter au WiFi Le logiciel sera opérationnel, avec prises de photos, stockage dans la base de données\u0026hellip; Mais le site ne sera pas accessible La Raspberry ne sera même pas accessible en ssh et il ne sera donc pas possible de la rebooter à distance La seule solution est alors de débrancher la Raspberry et de la rebrancher pour qu\u0026rsquo;elle se connecte au WiFi au redémarrage Script de test de connexion Une solution est proposée par dweeber Dans cet esprit, on peut proposer un script python qui va tester la connexion WiFi régulièrement en lançant un ping En absence de réponse, une commande lance la connexion WiFi Procédure Vérifier le fichier wpa_supplicant.conf Voir la page LinuxHint et le forum ArchiLinux Ouvrir le fichier sudo nano /etc/wpa_supplicant/wpa_supplicant.conf Si le contenu est du type ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=FR network={ ssid=\u0026#34;\u0026lt;monReseau\u0026gt;\u0026#34; psk=\u0026#34;\u0026lt;monMotDePasse\u0026gt;\u0026#34; key_mgmt=WPA-PSK } Vérifier juste que le nom du réseau et le mot de passe sont corrects Sinon effacer le fichier et écrire les lignes précédentes en ajustant le nom de votre réseau et le mot de passe Sauvegarder si besoin et fermer Ecrire le script de vérification/reconnexion de la WiFi Ouvrir le fichier wifi.py en écriture nano ~/script/wifi.py Copier/coller le contenu suivant \u0026#39;\u0026#39;\u0026#39;Script qui vérifie si la WiFi est connectée ; si elle ne l\u0026#39;est pas : la connecte Au préalable il faut être sur qu\u0026#39;un réseau est joignable et s\u0026#39;assurer que les commandes ip link down et up sont fonctionnelles\u0026#39;\u0026#39;\u0026#39; import subprocess site = \u0026#39;www.google.fr\u0026#39; ping = f\u0026#39;ping -c1 {site}\u0026#39; pingReturn = subprocess.run(ping, shell=True, stdout=subprocess.PIPE).stdout if pingReturn: print(\u0026#34;wifi fonctionne déjà\u0026#34;) pass else: print(\u0026#34;wifi va se remettre\u0026#34;) wifiUp = \u0026#34;sudo rfkill unblock all \u0026amp;\u0026amp; sudo ip link set wlan0 up\u0026#34; subprocess.run(wifiUp, shell=True) print(\u0026#34;done\u0026#34;) Sauvegarder et quitter : Ctrl + O + X Ouvrir le crontab : crontab -e Lancer le script wifi.py toutes les 5 minutes (par exemple) en ajoutant à la fin du crontab */5 * * * * python3 /home/pi/script/wifi.py Sauvegarder et quitter le crontab "},{"id":5,"href":"/extra/fonction_jour/","title":"Fonction \u003cem\u003ejour\u003c/em\u003e","parent":"Extra","content":"Position du problème Les photos affichées par la fonction historique de views.py incluent les photos nocturnes, même si la caméra n\u0026rsquo;est pas infrarouge On souhaite, ici, disposer des photos prises par les caméras diurnes pendant la durée du jour, sur une période couvrant 24 heures Schéma de la procédure Modifier le fichier views.py en créant une fonction jour Ajouter l\u0026rsquo;url jour dans le fichier urls.py Créer le fichier html jour.html qui permettra de visualiser les images On ne crée pas de bouton d\u0026rsquo;accès : la page sera affichée depuis la barre du navigateur à l\u0026rsquo;adresse \u0026lt;monsite\u0026gt;/camera/jour/ Procédure Généralités On utilise, à peu de choses près, la même procédure que dans le tutoriel partie 9 On va afficher les photos de n minutes avant le lever du soleil jusqu\u0026rsquo;à n minutes après le coucher Par défaut, on va définir la valeur n à 30 minutes dans le fichier configuration.ini Modifier le fichier /etc/camera/configuration.ini Ouvrir le fichier en écriture sudo nano ~/etc/camera/configuration.ini Ajouter la variable deltaSetRise Dans [locate] (par exemple) ajouter la variable deltaSetRise Cette valeur donnera en minutes le temps de sélection des photos avant le lever du soleil et après le coucher Par défaut, la valeur est à 30 [locate] //// deltaSetRise=30 Modifier le fichier views.py Ajouter la variable deltaSetRise Au niveau de la déclaration des différentes variables, déclarer deltaSetRise deltaSetRise = parser.get(\u0026#34;locate\u0026#34;, \u0026#34;deltaSetRise\u0026#34;) Déclarer un Q object LesQ objects permettent des opérations sur les bases de données Au niveau des premières lignes du fichier views.py, appeler Q from django.db.models import Q Créer la fonction jour Cette fonction est écrite pour 4 caméras de jour, appelées Appareil 1, 2, 4 et 5 Au niveau du fichier views.py, ajouter la fonction suivante def jour(request): \u0026#34;\u0026#34;\u0026#34;Fonction qui sélectionne les photos des caméras de jour de x minutes avant le lever du soleil à x minutes après le coucher du soleil On rassemble les photos pour couvrir un nycthémère On crée autant de listes qu\u0026#39;il y a de caméras de jour Ici, on a 4 caméras de jour qui sont répertoriées dans la base de données par les identifiants 1, 2, 4, 5 ADAPTER CES IDENTIFIAANTS AUX NUMEROS DE CAMERA ET A LEUR NOMBRE\u0026#34;\u0026#34;\u0026#34; lieu = SunTimes(longitude, latitude, altitude) maintenant = local_tz.localize(datetime.now()) #voir http://pytz.sourceforge.net/ lever = lieu.riselocal(maintenant) coucher = lieu.setlocal(maintenant) coucherHier = lieu.setlocal(maintenant - timedelta(1)) leverHier = lieu.riselocal(maintenant - timedelta(1)) leverDelta = lever - timedelta(minutes=deltaSetRise) # par ex 30 minutes avant lever soleil coucherDelta = coucher + timedelta(minutes=deltaSetRise) # par ex 30 minuts après coucher soleil coucherDeltaHier = coucherHier + timedelta(minutes=deltaSetRise) leverDeltaHier = leverHier - timedelta(minutes=deltaSetRise) maintenantHier= maintenant - timedelta(1) if leverDelta \u0026lt;= maintenant \u0026lt;= coucherDelta: #On est en journée ; on sélectionne les photos allant du lever à maintenant. On sélectionne aussi les photos allant de maintenant - 24 heures à coucher hier jour_photo_list_1 = Photo.objects.filter(appareil=1).filter(Q(date__gt=leverDelta, date__lt=maintenant) | Q(date__gt=maintenantHier, date__lt=coucherDeltaHier)).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_2 = Photo.objects.filter(appareil=2).filter(Q(date__gt=leverDelta, date__lt=maintenant) | Q(date__gt=maintenantHier, date__lt=coucherDeltaHier)).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_4 = Photo.objects.filter(appareil=4).filter(Q(date__gt=leverDelta, date__lt=maintenant) | Q(date__gt=maintenantHier, date__lt=coucherDeltaHier)).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_5 = Photo.objects.filter(appareil=5).filter(Q(date__gt=leverDelta, date__lt=maintenant) | Q(date__gt=maintenantHier, date__lt=coucherDeltaHier)).order_by(\u0026#39;-date\u0026#39;) elif leverDelta \u0026gt; maintenant: # On est la nuit mais après minuit: on selectionne les photos allant du jour précédent du matin au soir jour_photo_list_1 = Photo.objects.filter(appareil=1).filter(date__gt=leverDeltaHier, date__lt=coucherDeltaHier).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_2 = Photo.objects.filter(appareil=2).filter(date__gt=leverDeltaHier, date__lt=coucherDeltaHier).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_4= Photo.objects.filter(appareil=4).filter(date__gt=leverDeltaHier, date__lt=coucherDeltaHier).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_5= Photo.objects.filter(appareil=5).filter(date__gt=leverDeltaHier, date__lt=coucherDeltaHier).order_by(\u0026#39;-date\u0026#39;) else: # On est la nuit mais avant minuit : on selectionne les photos du même jour allant du matin au soir jour_photo_list_1 = Photo.objects.filter(appareil=1).filter(date__gt=leverDelta, date__lt=coucherDelta).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_2 = Photo.objects.filter(appareil=2).filter(date__gt=leverDelta, date__lt=coucherDelta).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_4 = Photo.objects.filter(appareil=4).filter(date__gt=leverDelta, date__lt=coucherDelta).order_by(\u0026#39;-date\u0026#39;) jour_photo_list_5 = Photo.objects.filter(appareil=5).filter(date__gt=leverDelta, date__lt=coucherDelta).order_by(\u0026#39;-date\u0026#39;) min_length = min(len(jour_photo_list_1), len( jour_photo_list_2), len(jour_photo_list_4), len(jour_photo_list_5)) jour_photo_list_group = [] for i in range(min_length): new_group = [jour_photo_list_1[i], jour_photo_list_2[i], jour_photo_list_4[i], jour_photo_list_5[i]] jour_photo_list_group.extend(new_group) context = { \u0026#39;jour_photo_list_group\u0026#39;: jour_photo_list_group, } return render(request, \u0026#34;{}/jour.html\u0026#34;.format(appli), context) Toutes les photos vont s\u0026rsquo;afficher selon le critère temporel choisi Si on souhaite n\u0026rsquo;afficher qu\u0026rsquo;une photo sur N (par exemple, une photo toutes les trois minutes), il faut, comme dans les fonctions historique et nuit sélectionner une photo toutes les N photos dans les listes de photos Modifier le fichier folder/project/camera/urls.py Ouvrir le fichier en écriture Au niveau de la liste urlpatterns ajouter path(\u0026#39;jour/\u0026#39;, views.jour, name=\u0026#34;jour\u0026#34;), Bien respecter les virgules dans la liste Ecrire le fichier jour.html Créer le fichier en écriture nano ~/folder/project/camera/templates/camera/jour.html Coller dans le fichier le contenu suivant {% extends \u0026#34;camera/base.html\u0026#34; %} {% load static %} {% block header %} \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;Photos de Jour\u0026lt;/h1\u0026gt; {% endblock %} {% block content %} \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; {% for photo in jour_photo_list_group %} \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34; height=\u0026#34;150\u0026#34; width=\u0026#34;225\u0026#34; alt=\u0026#34;photo non disponible\u0026#34; loading=\u0026#34;lazy\u0026#34; /\u0026gt;\u0026lt;figcaption\u0026gt;{{photo.name}} - {{photo.appareil}}\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; {% if forloop.last %} \u0026lt;/tr\u0026gt; {% else %} {% if forloop.counter|divisibleby:\u0026#34;4\u0026#34; %} \u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt; {% endif %} {% endif %} {% endfor %} \u0026lt;/table\u0026gt; {% endblock %} Résultat Redémarrer la raspberry Les images sont visibles à l\u0026rsquo;adresse \u0026lt;monsite\u0026gt;/camera/jour/ Si on le souhaite, il est possible d\u0026rsquo;ajouter des boutons d\u0026rsquo;accès direct à la page "},{"id":6,"href":"/script/WiFiCheck_sh/","title":"WiFiCheck.sh","parent":"Scripts","content":"#!/bin/bash ################################################################## # A Project of TNET Services, Inc # # Title: WiFi_Check # Author: Kevin Reed (Dweeber) # dweeber.dweebs@gmail.com # Project: Raspberry Pi Stuff # # Copyright: Copyright (c) 2012 Kevin Reed \u0026lt;kreed@tnet.com\u0026gt; # https://github.com/dweeber/WiFi_Check # # Purpose: # # Script checks to see if WiFi has a network IP and if not # restart WiFi # # Uses a lock file which prevents the script from running more # than one at a time. If lockfile is old, it removes it # # Instructions: # # o Install where you want to run it from like /usr/local/bin # o chmod 0755 /usr/local/bin/WiFi_Check # o Add to crontab # # Run Every 5 mins - Seems like ever min is over kill unless # this is a very common problem. If once a min change */5 to * # once every 2 mins */5 to */2 ... # # */5 * * * * /usr/local/bin/WiFi_Check # # Quelques modifications pour chemin d\u0026#39;accès du pid et localisation du script ################################################################## # Settings # Where and what you want to call the Lockfile lockfile=\u0026#39;/home/pi/WiFi/WiFi_Check.pid\u0026#39; # Which Interface do you want to check/fix wlan=\u0026#39;wlan0\u0026#39; pingip=\u0026#39;192.168.1.1\u0026#39; ################################################################## echo echo \u0026#34;Starting WiFi check for $wlan\u0026#34; date echo # Check to see if there is a lock file if [ -e $lockfile ]; then # A lockfile exists... Lets check to see if it is still valid pid=`cat $lockfile` if kill -0 \u0026amp;\u0026gt;1 \u0026gt; /dev/null $pid; then # Still Valid... lets let it be... echo \u0026#34;Process still running, Lockfile valid\u0026#34; exit 1 else # Old Lockfile, Remove it #echo \u0026#34;Old lockfile, Removing Lockfile\u0026#34; rm $lockfile fi fi # If we get here, set a lock file using our current PID# echo \u0026#34;Setting Lockfile\u0026#34; echo $$ \u0026gt; $lockfile # We can perform check echo \u0026#34;Performing Network check for $wlan\u0026#34; /bin/ping -c 2 -I $wlan $pingip \u0026gt; /dev/null 2\u0026gt; /dev/null if [ $? -ge 1 ] ; then echo \u0026#34;Network connection down! Attempting reconnection.\u0026#34; /sbin/ifdown $wlan /bin/sleep 5 /sbin/ifup --force $wlan else echo \u0026#34;Network is Okay\u0026#34; fi echo echo \u0026#34;Current Setting:\u0026#34; ifconfig $wlan | grep \u0026#34;inet\u0026#34; echo # Check is complete, Remove Lock file and exit #echo \u0026#34;process is complete, removing lockfile\u0026#34; rm $lockfile exit 0 ################################################################## # End of Script ################################################################## "},{"id":7,"href":"/tuto/part9/","title":"Tutoriel : Partie 9 - Afficher les photos de nuit minutes par minutes","parent":"Tutos","content":"Position du problème Les photos de nuit obtenues par la fonction nuit du fichier views.py ne sont pas toutes affichées Effectivement, seule une photo sur N est affichée, N étant la fréquence définie dans le fichier configuration.ini par la variable [frequences] nuit Si on souhaite disposer de toutes les photos de nuit, il faut mettre en place une nouvelle fonction Schéma de la procédure Modifier le fichier views.py en créant une fonction nuitparminute Ajouter l\u0026rsquo;url nuitParMinute dans le fichier urls.py Créer le fichier html nuitParMinute.html qui permettra de visualiser les images Créer un bouton pour la page nuitParMinute dans la page d\u0026rsquo;accueil Modifier le menu dans le fichier base.html Modifier le fichier views.py Ouvrir le fichier views.py en écriture nano ~/folder/project/camera/views.py Ajouter la fonction nuitparminute A la fin du fichier ou bien après la fonction def nuit(request) si vous souhaitez que les fonctions soient rassemblées Ajouter la fonction suivante def nuitparminute(request): #lieu = SunTimes(longitude, latitude, altitude, zone) lieu = SunTimes(longitude, latitude, altitude) maintenant = local_tz.localize(datetime.now()) #voir http://pytz.sourceforge.net/ lever = lieu.riselocal(maintenant) coucher = lieu.setlocal(maintenant) coucherHier = lieu.setlocal(maintenant - timedelta(1)) leverDemain = lieu.riselocal(maintenant + timedelta(1)) if lever \u0026lt;= maintenant \u0026lt;= coucher: #On est en journée ; on sélectionne les photos allant du coucher de la veille au lever de ce jour night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucherHier, date__lt=lever).order_by(\u0026#39;-date\u0026#39;) horaire = [lever.strftime(\u0026#39;%Hh %Mmn\u0026#39;), lever.day, lever.month, coucherHier.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucherHier.day, coucherHier.month] elif maintenant \u0026lt; lever: #On est après minuit, mais avant le lever. On sélectionne les photos de coucherHier à maintenant night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucherHier).order_by(\u0026#39;-date\u0026#39;) horaire = [lever.strftime(\u0026#39;%Hh %Mmn\u0026#39;), lever.day, lever.month, coucherHier.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucherHier.day, coucherHier.month] else: #On est avant minuit mais après le coucher. On sélectionne les photos de coucher à maintenant night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucher).order_by(\u0026#39;-date\u0026#39;) horaire = [leverDemain.strftime(\u0026#39;%Hh %Mmn\u0026#39;), leverDemain.day, leverDemain.month, coucher.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucher.day, coucher.month] context = { \u0026#39;night_photo_list\u0026#39;: night_photo_list, \u0026#39;horaire\u0026#39;: horaire } return render(request, \u0026#34;{}/nuitParMinute.html\u0026#34;.format(appli), context) Sauvegarder et fermer : Ctrl+O Entrée Ctrl+X Modifier le fichier urls.py Ouvrir le fichier urls.py en écriture nano ~/folder/project/camera/urls.py Ajouter le path pour la fonction nuitparminute Aller à la fin de la liste urlpatterns Ajouter la ligne path(\u0026#39;nuitParMinute/\u0026#39;, views.nuitparminute, name=\u0026#34;nuitParMinute\u0026#34;) Vérifier qu\u0026rsquo;il y a bien une virgule entre ce path et le path précédent Sauvegarder et fermer Ecrire le fichier nuitParMinute.html Créer le fichier en écriture nano ~/folder/project/camera/templates/camera/nuitParMinute.html Coller dans le fichier le contenu suivant {% extends \u0026#34;camera/base.html\u0026#34; %} {% load static %} {% block header %} \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;La nuit heure par heure\u0026lt;/h1\u0026gt; \u0026lt;pre\u0026gt; Coucher : {% if horaire %}{{ horaire.3 }} - le {{horaire.4}}/{{horaire.5}}{% endif %} Lever : {% if horaire %}{{ horaire.0 }} - le {{horaire.1}}/{{horaire.2}}{% endif %} \u0026lt;/pre\u0026gt; {% endblock %} {% block content %} \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; {% for photo in night_photo_list %} \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34; height=\u0026#34;150\u0026#34; width=\u0026#34;225\u0026#34; alt=\u0026#34;photo nocturne indisponible\u0026#34;/\u0026gt;\u0026lt;figcaption\u0026gt;{{photo.name}} - {{photo.appareil}}\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; {% if forloop.last %} \u0026lt;/tr\u0026gt; {% else %} {% if forloop.counter|divisibleby:\u0026#34;3\u0026#34; %} \u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt; {% endif %} {% endif %} {% endfor %} \u0026lt;/table\u0026gt; {% endblock %} Modifications éventuelles Au besoin modifier la valeur de divisibleby dans forloop.counter en fonction du nombre de photos à afficher par ligne Sauvegarder et fermer Ajouter un bouton dans la page Accueil Ouvrir accueil.html en écriture nano ~/folder/project/camera/templates/camera/accueil.html Ajouter le bouton Juste avant {% endblock %} ou bien insérée entre deux balises \u0026lt;a\u0026gt;...\u0026lt;/a\u0026gt; Ajouter la ligne \u0026lt;a href=\u0026#34;/camera/nuitParMinute/\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Nuit par Minute\u0026lt;/a\u0026gt; au besoin ajouter une balise \u0026lt;br\u0026gt; pour un saut de ligne Modifier le menu dans le fichier base.html Ouvrir le fichier en écriture nano ~/folder/project/camera/templates/camera/base.html Ajouter une ligne au menu Au niveau de la div``myNavBar, entre les lignes Historique et Par Heures par exemple Ajouter la ligne de menu suivante \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/nuitParMinute/\u0026#34;\u0026gt;Nuit par Minutes\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; Relancer la raspberry sudo reboot "},{"id":8,"href":"/script/stream_3_html_4cam/","title":"stream.3_4cam_html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% block content %} \u0026lt;h2 class=\u0026#34;monh2\u0026#34;\u0026gt;Caméra 3 en direct\u0026lt;/h2\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.0}} alt=\u0026#34;Erreur sur la caméra 3\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 3 : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;/camera/stream_AllCam/\u0026#34;\u0026gt;Direct 4 Caméras\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;/camera/\u0026#34;\u0026gt;Accueil\u0026lt;/a\u0026gt; {% endblock %} "},{"id":9,"href":"/script/views_py_4cam/","title":"views_4cam.py","parent":"Scripts","content":"from django.shortcuts import render, redirect from django.http import HttpResponse from django.core.paginator import Paginator from django.template.response import TemplateResponse from datetime import datetime, timedelta from django.utils import timezone import pytz #pour régler les problèmes d\u0026#39;heure naïve et consciente from pytz import timezone from suntimes import SunTimes from configparser import ConfigParser from .models import Photo, Appareil config_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(config_file) longitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;longitude\u0026#34;)) latitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;latitude\u0026#34;)) altitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;altitude\u0026#34;)) zone = parser.get(\u0026#34;locate\u0026#34;, \u0026#34;zone\u0026#34;) hz_historique = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;historique\u0026#34;)) hz_nuit = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;nuit\u0026#34;)) hz_capture = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;capture\u0026#34;)) raspIP = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;raspIP\u0026#34;) cam_1_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_port\u0026#34;) cam_2_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_2_port\u0026#34;) cam_py_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_port\u0026#34;) Rp1 = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_1\u0026#34;) Rp2 = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_2\u0026#34;) Rpi = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_py\u0026#34;) # Ajout pour la quatrième caméra cam_3_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_3_port\u0026#34;) Rp3 = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_3\u0026#34;) display_nombre = int(float(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;display_jour\u0026#34;)) * 3600 * 24 / hz_capture) appli = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;appli\u0026#34;) local_tz = timezone(zone) utc = pytz.utc def accueil(request): response = TemplateResponse(request, \u0026#34;{}/accueil.html\u0026#34;.format(appli)) return response def historique(request): \u0026#34;\u0026#34;\u0026#34;On visionne les trois caméras sur les 24 dernière heures ; on prend une photo toutes les n minutes.\u0026#34;\u0026#34;\u0026#34; maintenant = local_tz.localize(datetime.now()) #voir http://pytz.sourceforge.net/ latest_photo_list_1 = Photo.objects.filter(appareil=1).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_2 = Photo.objects.filter(appareil=2).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_py = Photo.objects.filter(appareil=3).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_1_oneoutofN = [] latest_photo_list_2_oneoutofN = [] latest_photo_list_py_oneoutofN = [] for photo in latest_photo_list_1: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_1_oneoutofN.append(photo) for photo in latest_photo_list_2: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_2_oneoutofN.append(photo) for photo in latest_photo_list_py: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_py_oneoutofN.append(photo) # Ajouts pour la quatrième caméra latest_photo_list_3 = Photo.objects.filter(appareil=4).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_3_oneoutofN = [] for photo in latest_photo_list_3: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_3_oneoutofN.append(photo) # Modifier la variable min_length en ajoutant la `len((latest_photo_list_3_oneoutofN))` comme item supplémentaire min_length = min(len(latest_photo_list_1_oneoutofN), len(latest_photo_list_2_oneoutofN), len(latest_photo_list_py_oneoutofN), len(latest_photo_list_3_oneoutofN)) latest_photo_list_group = [] for i in range(min_length): # modifier la liste `new_group`en ajoutant `latest_photo_list_3_oneoutofN[i]` dans la liste new_group = [latest_photo_list_1_oneoutofN[i], latest_photo_list_2_oneoutofN[i], latest_photo_list_py_oneoutofN[i]] latest_photo_list_group.extend(new_group) context = { \u0026#39;latest_photo_list_group\u0026#39;: latest_photo_list_group, } return render(request, \u0026#34;{}/historique.html\u0026#34;.format(appli), context) def nuit(request): #lieu = SunTimes(longitude, latitude, altitude, zone) lieu = SunTimes(longitude, latitude, altitude) maintenant = local_tz.localize(datetime.now()) #voir http://pytz.sourceforge.net/ lever = lieu.riselocal(maintenant) coucher = lieu.setlocal(maintenant) coucherHier = lieu.setlocal(maintenant - timedelta(1)) leverDemain = lieu.riselocal(maintenant + timedelta(1)) if lever \u0026lt;= maintenant \u0026lt;= coucher: #on est en journée ; on sélectionne les photos allant du coucher de la veille au lever de ce jour night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucherHier, date__lt=lever).order_by(\u0026#39;-date\u0026#39;) horaire = [lever.strftime(\u0026#39;%Hh %Mmn\u0026#39;), lever.day, lever.month, coucherHier.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucherHier.day, coucherHier.month] elif maintenant \u0026lt; lever: #On est après minuit, mais avant le lever. On sélectionne les photos de coucherHier à maintenant night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucherHier).order_by(\u0026#39;-date\u0026#39;) horaire = [lever.strftime(\u0026#39;%Hh %Mmn\u0026#39;), lever.day, lever.month, coucherHier.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucherHier.day, coucherHier.month] else: #on est avant minuit mais après le coucher. On sélectionne les photos de coucher à maintenant night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucher).order_by(\u0026#39;-date\u0026#39;) horaire = [leverDemain.strftime(\u0026#39;%Hh %Mmn\u0026#39;), leverDemain.day, leverDemain.month, coucher.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucher.day, coucher.month] night_photo_list_oneoutofN = [] for photo in night_photo_list: #pour ne sélectionner qu\u0026#39;une photo sur N if (maintenant - photo.date).seconds // hz_capture % hz_nuit == 0: night_photo_list_oneoutofN.append(photo) context = { \u0026#39;night_photo_list_oneoutofN\u0026#39;: night_photo_list_oneoutofN, \u0026#39;horaire\u0026#39;: horaire } return render(request, \u0026#34;{}/nuit.html\u0026#34;.format(appli), context) def parheure(request): \u0026#34;\u0026#34;\u0026#34;On visionne les trois caméras sur les 24 dernière heures ; la pagination se fera heure par heure.\u0026#34;\u0026#34;\u0026#34; latest_photo_list_1 = Photo.objects.filter(appareil=1).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_2 = Photo.objects.filter(appareil=2).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_py = Photo.objects.filter(appareil=3).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] # Déclarer `latest_photo_list_3` latest_photo_list_3 = Photo.objects.filter(appareil=4).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] # Modifier la variable min_length en ajoutant la `len((latest_photo_list_3_oneoutofN))` comme item supplémentaire min_length = min(len(latest_photo_list_1), len(latest_photo_list_2), len(latest_photo_list_py), len(latest_photo_list_3)) latest_photo_list_group = [] for i in range(min_length): # modifier la liste `new_group`en ajoutant `latest_photo_list_3_oneoutofN[i]` dans la liste new_group = [latest_photo_list_1[i], latest_photo_list_2[i], latest_photo_list_py[i], latest_photo_list_3[i]] latest_photo_list_group.extend(new_group) # Changer éventuellement le nombre d\u0026#39;éléments affichés par page paginator = Paginator(latest_photo_list_group, 240) page = request.GET.get(\u0026#39;page\u0026#39;) photos = paginator.get_page(page) context = { \u0026#39;photos\u0026#39;: photos, } return render(request, \u0026#34;{}/parHeure.html\u0026#34;.format(appli), context) def stream_py(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rpi)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_py.html\u0026#34;.format(appli), context) def stream_1(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp1)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_1.html\u0026#34;.format(appli), context) def stream_2(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp2)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_2.html\u0026#34;.format(appli), context) # Ajouter une fonction stream_3 def stream_3(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp3)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_3.html\u0026#34;.format(appli), context) def stream_AllCam(request): # Ajouter le stream pour la nouvelle caméra dans la liste `stream` stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp1),\u0026#34;/{}?action=stream\u0026#34;.format(Rp2), \u0026#34;/{}?action=stream\u0026#34;.format(Rpi), \u0026#34;/{}?action=stream\u0026#34;.format(Rp3) ] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_AllCam.html\u0026#34;.format(appli), context) "},{"id":10,"href":"/script/runCamera_3_py_4cam/","title":"RunCamera_1_4cam.py","parent":"Scripts","content":"\u0026#34;\u0026#34;\u0026#34;Script python qui va lancer la caméra supplémentaire et permettre à mjpg-streamer de générer les flux et les images statiques A indiquer dans le crontab en @reboot\u0026#34;\u0026#34;\u0026#34; import subprocess from time import sleep from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) cam_3_name = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_3_name\u0026#34;) cam_3_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_3_port\u0026#34;) cam_3_resol = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_3_resol\u0026#34;) cam_3_fps = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_3_fps\u0026#34;) mjpg_path = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;mjpg\u0026#34;) delay_run=int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;delay_run_Cam_3\u0026#34;)) sleep(delay_run) #attente avant de lancer les commandes #command_cp = [\u0026#34;cp\u0026#34;, f\u0026#39;{path_db}{baseName}\u0026#39;, f\u0026#39;{path_db}/{baseBackUp}\u0026#39;] #command_1 = [\u0026#34;cd\u0026#34;, f\u0026#39;{mjpg_path}\u0026#39;, \u0026#34;\u0026amp;\u0026amp;\u0026#34;, \u0026#34;export\u0026#34;, f\u0026#39;LD_LIBRARY_PATH=.\u0026#39;, \u0026#34;\u0026amp;\u0026amp;\u0026#34;, f\u0026#39;./mjpg_streamer\u0026#39;, \u0026#34;-i\u0026#34;, \u0026#39;input_uvc.so -r {} -fps {} -d /dev/v4l/by-id/{}\u0026#39; -o \u0026#39;output_http.so -p {} -w {}/www\u0026#39;]\u0026#34;.format(mjpg_path,cam_1_resol, cam_1_fps, cam_1_name, cam_1_port, mjpg_path) command_3 = \u0026#34;cd {} \u0026amp;\u0026amp; export LD_LIBRARY_PATH=. \u0026amp;\u0026amp; ./mjpg_streamer -i \u0026#39;input_uvc.so -r {} -fps {} -d /dev/v4l/by-id/{}\u0026#39; -o \u0026#39;output_http.so -p {} -w {}/www\u0026#39;\u0026#34;.format(mjpg_path,cam_3_resol, cam_3_fps, cam_3_name, cam_3_port, mjpg_path) subprocess.run(command_3, shell=True) "},{"id":11,"href":"/script/suppressFiles_py_4cam/","title":"suppressFiles_4cam.py","parent":"Scripts","content":"#Script qui permet de supprimer les fichiers datant de plus de N jours. #On lance un cron pour supprimer régulièrement ces fichiers. #On élimine également les lignes correspondantes dans la base de données. #Ajout d\u0026#39;une caméra supplémentaire from subprocess import run import sqlite3 from datetime import datetime, timedelta from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) home = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;home\u0026#34;) folder = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;folder\u0026#34;) project = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;project\u0026#34;) pathCamera_1 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_1\u0026#34;) pathCamera_2 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_2\u0026#34;) pathCamera_py = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_py\u0026#34;) stock = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;stock\u0026#34;) delay_delete = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;delay_delete\u0026#34;)) baseName = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;baseName\u0026#34;) baseBackUp = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;baseBackUp\u0026#34;) # Ajout d\u0026#39;une caméra supplémentaire pathCamera_3 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_3\u0026#34;) # path_db = \u0026#34;{}/{}/{}\u0026#34;.format(home, folder, project) path_db = f\u0026#39;{home}/{folder}/{project}\u0026#39; #commandes qui vont supprimer les fichiers de stock/ command_1 = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/{pathCamera_1}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] command_2 = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/{pathCamera_2}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] command_py = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/{pathCamera_py}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] run(command_1) run(command_2) run(command_py) #commandes pour la caméra supplémentaire command_3 = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/{pathCamera_3}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] run(command_3) #sauvegarder la base de données avant de la modifier (sécurité) command_cp = [\u0026#34;cp\u0026#34;, f\u0026#39;{path_db}/{baseName}\u0026#39;, f\u0026#39;{path_db}/{baseBackUp}\u0026#39;] run(command_cp) #suppression des lignes correspondantes de la base de données dateDel = datetime.now() - timedelta(delay_delete + 1) # conn = sqlite3.connect(\u0026#34;{}/{}/{}/{}\u0026#34;.format(home, folder, project, baseName)) conn = sqlite3.connect(f\u0026#39;{path_db}/{baseName}\u0026#39;) c = conn.cursor() c.execute(\u0026#34;DELETE FROM camera_photo WHERE date \u0026lt;= ?\u0026#34;, (dateDel,)) conn.commit() conn.close() "},{"id":12,"href":"/script/getCamerasAndRegister_py_4cam/","title":"getCamerasAndRegister_4cam.py","parent":"Scripts","content":"\u0026#34;\u0026#34;\u0026#34;Script python qui : prend une photo depuis chacune des caméras stocke cette photo dans le dossier ad hoc modifie la base de données pour indiquer la date, la camera, le nom de la photo et le chemin du fichier Dans la mesure où on est susceptible de prendre des photos rapprochées (moins de la minute), le cron est insuffisant On fait donc une boucle while infinie avec le delta temps pour prendre les photos en fonction du paramète [frequences][capture] du fichier /etc/camera/configuration.ini.\u0026#34;\u0026#34;\u0026#34; # Ajout d\u0026#39;une caméra supplémentaire import subprocess from datetime import datetime from time import sleep, time import sqlite3 from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) host = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;local\u0026#34;) stock = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;stock\u0026#34;) pathCamera_1 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_1\u0026#34;) pathCamera_2 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_2\u0026#34;) pathCamera_py = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_py\u0026#34;) home = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;home\u0026#34;) folder = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;folder\u0026#34;) project = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;project\u0026#34;) baseName = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;baseName\u0026#34;) cam_1_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_port\u0026#34;) cam_2_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_2_port\u0026#34;) cam_py_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_port\u0026#34;) capture = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;capture\u0026#34;)) appli = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;appli\u0026#34;) script = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;script\u0026#34;) path_1 = \u0026#34;{}/{}\u0026#34;.format(stock, pathCamera_1) path_2 = \u0026#34;{}/{}\u0026#34;.format(stock, pathCamera_2) path_py = \u0026#34;{}/{}\u0026#34;.format(stock, pathCamera_py) # Ajout d\u0026#39;une caméra suplémentaire - Ajout des variables pathCamera_3 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_3\u0026#34;) cam_3_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_3_port\u0026#34;) path_3 = \u0026#34;{}/{}\u0026#34;.format(stock, pathCamera_3) while True: sleep(capture -time() % capture) date, name = datetime.now(),datetime.now().strftime(\u0026#34;%d-%m_%H:%M:%S\u0026#34;) \u0026#34;\u0026#34;\u0026#34;On récupère les images snapshot et on les copie dans le dossier ad hoc\u0026#34;\u0026#34;\u0026#34; command_1 = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(host, cam_1_port, path_1, name) command_2 = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(host, cam_2_port, path_2, name) command_py = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(host, cam_py_port, path_py, name) # Ajout d\u0026#39;une caméra supplémentaire : la commande command_3 = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(host, cam_3_port, path_3, name) #Modification de la commande pour la quatrième caméra #command = \u0026#39;{} \u0026amp; {} \u0026amp; {}\u0026#39;.format(command_1, command_2, command_py) ANCIENNE COMMANDE command = \u0026#39;{} \u0026amp; {} \u0026amp; {} \u0026amp; {}\u0026#39;.format(command_1, command_2, command_py, command_3) subprocess.run(command, shell=True) \u0026#34;\u0026#34;\u0026#34;On copie dans la base de données les éléments relatifs aux images\u0026#34;\u0026#34;\u0026#34; conn = sqlite3.connect(\u0026#34;{}/{}/{}/{}\u0026#34;.format(home, folder, project, baseName)) c = conn.cursor() c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;1\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_1)) c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;2\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_2)) c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;3\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_py)) # Ajout de la commande pour la quatrième caméra c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;4\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_3)) conn.commit() conn.close() #si la boucle True s\u0026#39;interrompt, le script est relancé #command_replay = \u0026#34;python3 {}/getCamerasAndRegister.py\u0026#34;.format(script) #si la boucle True s\u0026#39;interrompt, la raspberry est reboutée command_replay = \u0026#34;sudo reboot\u0026#34; subprocess.run(command_replay, shell=True) "},{"id":13,"href":"/script/parHeure_html_4cam/","title":"parHeure_4cam.html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% load static %} {% block header %} \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;Photos par Heures\u0026lt;/h1\u0026gt;\u0026lt;br\u0026gt; {% endblock %} {% block content %} \u0026lt;p class=\u0026#34;monh2\u0026#34;\u0026gt;Page {{ photos.number }} / {{ photos.paginator.num_pages }}\u0026lt;/p\u0026gt; {% if photos.has_previous %} \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;?page={{ photos.previous_page_number }}\u0026#34;\u0026gt;Page Précédente\u0026lt;/a\u0026gt; {% endif %} {% if photos.has_next %} \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;?page={{ photos.next_page_number }}\u0026#34;\u0026gt;Page Suivante\u0026lt;/a\u0026gt; {% endif %} \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; {% for photo in photos %} \u0026lt;td\u0026gt;\u0026lt;img class=\u0026#34;centre-image imgSmall\u0026#34; src=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34; height=\u0026#34;150\u0026#34; width=\u0026#34;225\u0026#34; alt=\u0026#34;photo non disponible\u0026#34; loading=\u0026#34;lazy\u0026#34;/\u0026gt;\u0026lt;figcaption\u0026gt;{{photo.name}} - {{photo.appareil}}\u0026lt;/figcaption\u0026gt; \u0026lt;/td\u0026gt; {% if forloop.last %} \u0026lt;/tr\u0026gt; {% else %} \u0026lt;!-- Modifier la valeur pour forloop.counter en mettant `4` ou `2` ou bien la laisser inchangée --\u0026gt; {% if forloop.counter|divisibleby:\u0026#34;4\u0026#34; %} \u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt; {% endif %} {% endif %} {% endfor %} \u0026lt;/table\u0026gt; \u0026lt;br\u0026gt; {% if photos.has_other_pages %} \u0026lt;ul class=\u0026#34;pagination\u0026#34;\u0026gt; {% if photos.has_previous %} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;?page={{ photos.previous_page_number }}\u0026#34;\u0026gt;précédent\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% else %} \u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026amp;laquo;\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; {% endif %} {% for i in photos.paginator.page_range %} {% if photos.number == i %} \u0026lt;li class=\u0026#34;liActive\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; {% else %} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;?page={{ i }}\u0026#34;\u0026gt;{{ i }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% endif %} {% endfor %} {% if photos.has_next %} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;?page={{ photos.next_page_number }}\u0026#34;\u0026gt;suivant\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% else %} \u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026amp;raquo;\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; {% endif %} \u0026lt;/ul\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;span class=\u0026#34;spanPage\u0026#34;\u0026gt; Page {{ photos.number }} de {{ photos.paginator.num_pages }}. \u0026lt;/span\u0026gt; {% endif %} {% endblock %} "},{"id":14,"href":"/script/stream_AllCam_html_4cam/","title":"stream_AllCam_4cam","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% block content %} \u0026lt;!-- Modifier le titre : les 4 caméras en direct --\u0026gt; \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;les 4 caméras en direct\u0026lt;/h2\u0026gt; \u0026lt;table\u0026gt; \u0026lt;!-- Scinder le tableau en 2 lignes (balise \u0026lt;tr\u0026gt;). Ecriture de la première ligne avec 2 cellules (balise \u0026gt;td\u0026gt; --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;stream_py\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.2}} alt=\u0026#34;Erreur sur la caméra nocturne\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA Nuit : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;stream_1\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.0}} alt=\u0026#34;Erreur sur la caméra 1\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 1: Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;!-- Fin de la première ligne --\u0026gt; \u0026lt;!-- Ecriture de la deuxième ligne : conservation de la cellule existante et ajout de la cellule pour la quatrième caméra --\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;stream_2\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.1}} alt=\u0026#34;Erreur sur la caméra 2\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 2 : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;!-- Ajout de la cellule de la quatrième caméra --\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;stream_3\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.3}} alt=\u0026#34;Erreur sur la caméra 3\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 3 : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;!-- Fin d\u0026#39;ajout de la cellule de la quatrième caméra --\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- Fin de la deuxième ligne --\u0026gt; \u0026lt;/table\u0026gt; {% endblock %} "},{"id":15,"href":"/script/historique_html_4cam/","title":"historique_4cam.html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% load static %} {% block header %} \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;Historique Général\u0026lt;/h1\u0026gt; {% endblock %} {% block content %} \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;!-- modification de la variable `latest_photo_list_group3` en `latest_photo_list_group` --\u0026gt; {% for photo in latest_photo_list_group %} \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34; height=\u0026#34;150\u0026#34; width=\u0026#34;225\u0026#34; alt=\u0026#34;photo non disponible\u0026#34; loading=\u0026#34;lazy\u0026#34;/\u0026gt;\u0026lt;figcaption\u0026gt;{{photo.name}} - {{photo.appareil}}\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; {% if forloop.last %} \u0026lt;/tr\u0026gt; {% else %} \u0026lt;!-- Changement du `forloop.counter` --\u0026gt; {% if forloop.counter|divisibleby:\u0026#34;4\u0026#34; %} \u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt; {% endif %} {% endif %} {% endfor %} \u0026lt;/table\u0026gt; {% endblock %} "},{"id":16,"href":"/script/urls_py_4cam/","title":"urls_4cam.py (camera)","parent":"Scripts","content":"from django.urls import path from . import views #Ajouter la quatrième caméra dans urlpatterns[] urlpatterns = [ path(\u0026#39;\u0026#39;, views.accueil, name=\u0026#39;accueil\u0026#39;), path(\u0026#39;historique/\u0026#39;, views.historique, name=\u0026#39;historique\u0026#39;), path(\u0026#39;nuit/\u0026#39;, views.nuit, name=\u0026#39;nuit\u0026#39;), path(\u0026#39;parHeure/\u0026#39;, views.parheure, name=\u0026#39;parHeure\u0026#39;), path(\u0026#39;stream_py/\u0026#39;, views.stream_py, name=\u0026#34;stream_py\u0026#34;), path(\u0026#39;stream_1/\u0026#39;, views.stream_1, name=\u0026#34;stream_1\u0026#34;), path(\u0026#39;stream_2/\u0026#39;, views.stream_2, name=\u0026#34;stream_2\u0026#34;), path(\u0026#39;stream_AllCam/\u0026#39;, views.stream_AllCam, name=\u0026#34;stream_AllCam\u0026#34;), path(\u0026#39;stream_3/\u0026#39;, views.stream_3, name=\u0026#34;stream_3\u0026#34;), ] "},{"id":17,"href":"/script/project-camera_conf_4cam/","title":"project-camera.conf 4cam","parent":"Scripts","content":"#mis en dehors du virtual host voir https://stackoverflow.com/questions/47803081/certbot-apache-error-name-duplicates-previous-wsgi-daemon-definition WSGIDaemonProcess project-camera.com python-home=/home/pi/folder/folder_venv python-path=/home/pi/folder/project \u0026lt;VirtualHost *:80\u0026gt; #!!!REMPLACER \u0026lt;site name\u0026gt; par le nom de votre site (par exemple, monprojet.sytes.net) ServerName \u0026lt;site name\u0026gt; ServerAlias www.\u0026lt;site name\u0026gt; Redirect permanent / https://\u0026lt;site name\u0026gt; \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:443\u0026gt; #!!!REMPLACER \u0026lt;site name\u0026gt; par le nom de votre site (par exemple, monprojet.sytes.net) ServerName \u0026lt;site name\u0026gt; ServerAlias \u0026lt;site name\u0026gt; #pour accroître la sécurité et être en HSTS Redirect permanent /secure https://\u0026lt;site name\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; #pour forcer authentification accès site \u0026lt;Location \u0026#34;/\u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; #Pour accéder aux flux depuis l\u0026#39;extérieur du réseau #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l\u0026#39;IP locale de votre Raspberry # Si vous avez d\u0026#39;autres ports pour les caméras, modifiez les en conséquence ProxyPass /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPassReverse /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPass /Rp2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPassReverse /Rp_2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPass /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ ProxyPassReverse /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ #AJOUT POUR UNE CAMERA SUPPLEMENTAIRE #Remplacer \u0026lt;localIP Raspberry\u0026gt; par l\u0026#39;IP locale, par exemple 192.168.1.49 ProxyPass /Rp3 http://\u0026lt; localIP Raspberry \u0026gt;:8083/ ProxyPassReverse /Rp3 http://\u0026lt; localIP Raspberry \u0026gt;:8083/ #Pour le certificat #!!!REMPLACER \u0026lt;site name\u0026gt; par le nom de votre site (par exemple, monprojet.sytes.net) SSLEngine on SSLCertificateFile /etc/letsencrypt/live/\u0026lt;site name\u0026gt;/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/\u0026lt;site name\u0026gt;/privkey.pem #Pour accroître la sécurité SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 SSLHonorCipherOrder on SSLCompression off SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384 SSLOptions +StrictRequire Header always set Strict-Transport-Security \u0026#34;max-age=63072000; includeSubDomains;\u0026#34; \u0026lt;/VirtualHost\u0026gt; #Pour accès sur le réseau local en cas d\u0026#39;échec #Ce `VirtualHost` n\u0026#39;est pas obligatoire #Modifier le port si besoin #Paramétrer la box en fonction \u0026lt;VirtualHost *:54321\u0026gt; #Nécessaire si la box ne permet pas de rediriger en interne les données du site #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l’IP de la Raspberry ; par exemple : ServerName 192.168.1.49 ServerName \u0026lt;local IP Raspberry\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; #pour forcer authentification accès site \u0026lt;Location \u0026#34;/ \u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; #Pour accéder aux flux depuis l\u0026#39;extérieur du réseau #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l\u0026#39;IP locale de votre Raspberry # Si vous avez d\u0026#39;autres ports pour les caméras, modifiez les en conséquence ProxyPass /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPassReverse /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPass /Rp2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPassReverse /Rp_2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPass /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ ProxyPassReverse /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ #AJOUT POUR UNE CAMERA SUPPLEMENTAIRE #Remplacer \u0026lt;localIP Raspberry\u0026gt; par l\u0026#39;IP locale, par exemple 192.168.1.49 ProxyPass /Rp3 http://\u0026lt; localIP Raspberry \u0026gt;:8083/ ProxyPassReverse /Rp3 http://\u0026lt; localIP Raspberry \u0026gt;:8083/ \u0026lt;/VirtualHost\u0026gt; #ajouté pour éliminer erreur AH00558 ServerName 127.0.0.1 "},{"id":18,"href":"/script/configuration_ini_4cam/","title":"Configuration_4cam.ini","parent":"Scripts","content":";Fichier ini. A placer dans /etc/camera ;ini file, to set in /etc/camera [locate] ;par défaut : le centre de la France selon l\u0026#39;IGN, Corse non comprise ;remplacer les valeurs par celles de votre localisation ;default : centre of France according IGN, Corse not included ;replace the values with those of your location longitude=2.430278 latitude=46.539722 altitude=326 zone=Europe/Paris [hosts] local=127.0.0.1 ;ip locale Raspberry - port du serveur Django ;MODIFIER L\u0026#39;IP LOCALE DE LA RASPBERRY (raspIP) EN FONCTION DE VOTRE VALEUR ;local ip Raspberry - Django server port ;CHANGE THE LOCAL IP OF THE RASPBERRY (raspIP) ACCORDING TO YOUR VALUE raspIP=\u0026lt;local IP Raspberry\u0026gt; ;port du serveur Django ;Django server port django_port=8000 ;proxy pour accès extérieur ;proxy for outdoor internet access proxy_1=Rp1 proxy_2=Rp2 proxy_py=Rpi ; pour la quatrième caméra proxy_3=Rp3 [mails] ;mail du site (celui avec lequel on crée un compte chez le fournisseur DynDNS) ;ce mail peut être le même que le mail personnel ; mais il vaut mieux en créer un ;VOUS DEVEZ RENSEIGNER LES DONNNEES DES DEUX MAILS AVEC VOS VALEURS ;site email (the one with which we create an account with the DynDNS provider) ;this email can be the same as the personal email; but it is better to create one ;YOU MUST FILL IN THE DATA OF BOTH EMAILS WITH YOUR VALUES mail_site=\u0026lt;user1\u0026gt;@\u0026lt;provider1\u0026gt; ;mot de passe du mail_site ;password mail_site mail_site_mdp=\u0026lt;password\u0026gt; ;mail personnel (celui auquel vont être envoyées diverses alertes et informations) ;personal email (the one to which various alerts and information will be sent) mail_perso=\u0026lt;user2\u0026gt;@\u0026lt;provider2\u0026gt; ;port du smtp. Le port le plus usité est le 587, c\u0026#39;est donc celui par défaut ;si votre fournisseur d\u0026#39;adresse mail de mail_site a un autre port, le modifier ;en cas d\u0026#39;échec essayer dans l\u0026#39;ordre (après le 587) : 2525, puis 465 ;smtp port. The most used port is 587, so it is the default one ;if your mail_site email address provider has another port, change it ;in case of failure try in order (after 587): 2525, then 465 smtp_port=587 [camera] ;ports sur lesquels les trois caméras vont être lues par mjpg-streamer ;ports on which the three cameras will be read by mjpg-streamer cam_1_port=8081 cam_2_port=8082 cam_py_port=8084 ;localisation des deux caméras USB (cam_1 et cam_2). Prendre les valeurs trouvées dans le fichier /dev/v4l/by-id en choisissant celles se terminant par -index0 ;VOUS DEVEZ RENSEIGNER LES DONNNEES AVEC VOS VALEURS ;location of the two USB cameras (cam_1 and cam_2). Take the values found in the file / dev / v4l / by-id by choosing those ending in -index0 ;YOU MUST FILL IN THE DATA WITH YOUR VALUES cam_1_name=\u0026lt;value1\u0026gt;-video-index0 cam_2_name=\u0026lt;value2\u0026gt;-video-index0 ;résolution des caméras USB ;USB cameras resolution cam_1_resol=640x480 cam_2_resol=640x480 ;résolutionde la pi-camera : WxH et qualité de l\u0026#39;image ;resolution of the pi-camera: WxH and picture quality cam_py_W=640 cam_py_H=480 cam_py_quality=85 ;nombre d\u0026#39;images/seconde ;frames per second cam_1_fps=5 cam_2_fps=5 cam_py_fps=5 ;pour la quatrième caméra ;MODIFIER \u0026lt;value3\u0026gt; PAR LA VALEUR APPROPRIEE cam_3_port=8083 cam_3_name=\u0026lt;value3\u0026gt;-index0 cam_3_resol=640x480 cam_3_resol=640x480 [paths] ;il est déconseillé de modifier les valeurs des chemins ;it is not recommended to modify the values of the paths ;dossier de mjpg-streamer ;mjpg-streamer folder mjpg=/home/pi/mjpg-streamer-experimental ;chemin de home/utilisateur ;home/user path home=/home/pi ;dossier principal ;main folder folder=folder ;dossier de l\u0026#39;environnement virtuel ;virtual environment folder venv=folder_venv ;nom du projet Django ;Django project name project=project ;nom de l\u0026#39;application du projet ;name of the project application appli=camera ;dossier où sont stockées les photos ;folder where photos are stored stock=/var/www/stock ;dossier des divers scripts ;various scripts folder script=/home/pi/script ;sous-dossier où vont être stockées les différentes images ;sub-folder where the different images will be stored pathCamera_1=Camera_1 pathCamera_2=Camera_2 pathCamera_py=Camera_py ;nom de la base de données - nom de la sauvegarde de la base de données ;database name - name of the database backup baseName=db.sqlite3 baseBackUp=back_up.sqlite3 ;pour la quatrième caméra pathCamera_3=Camera_3 [frequences] ;les fréquences historiques et nuit correspondent au nombre d\u0026#39;images qui seront présentées : si la valeur est N, il sera affiché une image sur N ;the historical (historique) and night (nuit) frequencies correspond to the number of images that will be presented: if the value is N, a frame out of N will be displayed historique=4 nuit=3 ;la capture est la fréquence de prise de vues en secondes ; la valeur est un entier compris entre 1 et 60 ; si N est égale à 1 il y a une prise de vue par seconde ; si N est égale à 60 il y a une prise de vue par minute ;capture is the shooting frequency in seconds; the value is an integer between 1 and 60; if N is equal to 1 there is one shot per second; if N is equal to 60 there is one shot per minute capture=60 ;display_jour correspond au nombre de jours que l\u0026#39;on va visionner dans les vues historiques ; c\u0026#39;est un nombre flottant ; si égal à un on affiche les vues d\u0026#39;une journée ; si 2, celles de 2 jours... ;display_jour corresponds to the number of days that we will view in the historical views; it is a floating number; if equal to one, the views of a day are displayed; if 2, those of 2 days ... display_jour=1 ;temps d\u0026#39;attente pour lancer les scripts runCamera - si on les lance trop tôt, les caméras risquent de ne pas être montées avant le lancement du script - exprimé en secondes ;wait time to launch runCamera scripts - if started too early, cameras may not be mounted before the script starts - expressed in seconds delay_run_Cam_1=75 delay_run_Cam_2=120 delay_run_Cam_py=50 ;temps (en jours) pendant lequel on garde les fichiers photos ;tous les jours, on détruit les fichiers plus anciens que N jours ;doit être entier ;time (in days) during which the photo files are kept ;every day, we destroy files older than N days ;must be integer delay_delete=2 ;temps d\u0026#39;attente pour que la raspberry envoie un courriel après redémarrage (en secondes) ;wait time for the raspberry to send an email after restart (in seconds) delay_send_mail_reboot=180 ;pour la quatrième caméra delay_run_Cam_3=100 "},{"id":19,"href":"/tuto/part8/","title":"Tutoriel : Partie 8 - Ajouter une caméra","parent":"Tutos","content":"Position du problème D\u0026rsquo;autres caméras peuvent être installées en fonction : du nombre de ports USB disponibles de la puissance de la Raspberry Ceci nécessite la modification ou la création de plusieurs fichiers Les actions vont être les suivantes Répertorier la nouvelle caméra Modifier le fichier configuration.ini Créer un dossier de stockage des photos de la nouvelle caméra Modifier ou créer les scripts python qui gérent la nouvelle caméra Créer le script de lancement Modifier le script de suppression des photos Modifier le script de stockage des photos Modifier le cron Créer la caméra dans la base de données Modifier les fichiers urls.py et views.py de l\u0026rsquo;application camera Modifier le fichier urls.py Modifier le fichier views.py modifier la fonction historique modifier la fonction parHeure ajouter la fonction stream_3 modifier la fonction stream_AllCam Modifier ou créer les fichiers html Créer le fichier stream_3.html Modifier le fichier base.html Modifier le fichier historique.html Modifier le fichier parHeure.html Modifier le fichier stream_AllCam.html Modifier le fichier de configuration du serveur apache2 Répertorier la caméra Dans le répertoire /dev/v4l/by-id répertorier l\u0026rsquo;identifiant de la nouvelle caméra USB ls /dev/v4l/by-id Noter la valeur index-O de la nouvelle caméra Modifier le fichier configuration.ini Ouvrir le fichier config.ini en écriture sudo nano /etc/camera/configuration.ini Dans la section [hosts] Ajouter un proxy pour la nouvelle caméra proxy_3=Rp3 Dans la section [camera] Ajouter un nouveau port le nom de la caméra la résolution choisie le nombre d\u0026rsquo;images secondes Par exemple : cam_3_port=8083 cam_3_name=usb-046d_08ce_53892EC2-video-index0 cam_3_resol=640x480 cam_3_fps=5 Dans la section [paths] Ajouter un path pour la caméra Par exemple : pathCamera_3=Camera_3 Dans la section [frequences] Ajouter un temps d\u0026rsquo;attente pour le lancement de la caméra Par exemple : delay_run_Cam_3=100 Fichier final Le fichier ressemblera au fichier consultable ici Créer le dossier de stockage pour la caméra Par exemple : sudo mkdir /var/www/stock/Camera_3 Accorder les droits ad hoc sudo chown -R pi /var/www/stock/Camera_3 Ecrire et modifier les scripts python pour la caméra Le script de lancement Créer le script de lancement nano ~/script/runCamera_3.py Ecrire dans ce fichier le même script que pour les fichiers des autres caméras, en adaptant les différentes variables Un exemple de fichier est disponible ici Modifier le fichier de suppression des photos Ouvrir le fichier suppressFiles nano ~/script/suppressFiles.py Ajouter dans ce fichier le chemin relatif du fichier de stockage depuis le fichier configuration.ini pathCamera_3 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_3\u0026#34;) Ajouter la commande de suppression des fichiers command_3 = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/{pathCamera_3}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] Ajouter le lancement de cette commande run(command_3) Le fichier ressemblera au fichier consultable ici Modifier le fichier de stockage des photos Ouvrir le fichier de stockage des photos nano ~/script/getCamerasAndRegister.py Ajouter dans ce fichier le chemin relatif du fichier de stockage pathCamera_3 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_3\u0026#34;) Ajouter le port de la caméra cam_3_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_3_port\u0026#34;) Ajouter le chemin absolu du fichier de stockage path_3 = f\u0026#39;{stock}/{pathCamera_3}\u0026#39; Ajouter la commande de récupération et de copie des snapshots command_3 = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(host, cam_3_port, path_3, name) Modifier la commande générale command en ajoutant command_3 command = \u0026#39;{} \u0026amp; {} \u0026amp; {} \u0026amp; {}\u0026#39;.format(command_1, command_2, command_py, command_3) Ajouter la commande de copie des images dans la base de données c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;4\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_3)) La base de données numérote les caméras (appareil_id) par ordre de saisie La caméra surajoutée est, ici, la quatrième caméra, ce qui explique qu\u0026rsquo;elle a l\u0026rsquo;identifiant 4 Le fichier de stockage ressemblera au fichier consultable ici Modifier le cron Le fichier de mise en route de la nouvelle caméra doit être lancé par le cron lors du démarrage de la raspberry Ouvrir le cron en édition crontab -e Ajouter la ligne @reboot python3 /home/pi/script/runCamera_3.py Créer la caméra dans la base de données Se mettre en environnement virtuel source ~/folder/folder_venv/bin/activate Ouvrir la console interactive pour créer la caméra (venv) python ~/folder/project/manage.py shell Vérifier le nombre actuel de caméras \u0026gt;\u0026gt;\u0026gt; from camera.models import Appareil \u0026gt;\u0026gt;\u0026gt; Appareil.objects.all() \u0026lt;QuerySet [\u0026lt;Appareil: Cam_1\u0026gt;, \u0026lt;Appareil: Cam_2\u0026gt;, \u0026lt;Appareil: Cam_py\u0026gt;]\u0026gt; Créer la caméra \u0026gt;\u0026gt;\u0026gt; c = Appareil(name=\u0026#34;Cam_3\u0026#34;) \u0026gt;\u0026gt;\u0026gt; c.save() Vérifier la création de la caméra \u0026gt;\u0026gt;\u0026gt; Appareil.objects.all() \u0026lt;QuerySet [\u0026lt;Appareil: Cam_1\u0026gt;, \u0026lt;Appareil: Cam_2\u0026gt;, \u0026lt;Appareil: Cam_py\u0026gt;, \u0026lt;Appareil: Cam_3\u0026gt;]\u0026gt; La caméra est bien créée Quitter la console : Crtl+D On peut maintenant quitter l\u0026rsquo;environnement virtuel (venv) deactivate Modifier les fichiers urls et views de Django Modifier le fichier urls.py dans ~/folder/project/camera Ouvrir le fichier nano ~/folder/project/camera/urls.py Ajouter dans urlpatterns le path du stream de la nouvelle caméra path(\u0026#39;stream_3/\u0026#39;, views.stream_3, name=\u0026#34;stream_3\u0026#34;), Le fichier modifié est consultable ici Modifier le fichier views.py dans ~/folder/project/camera Ouvrir le fichier nano ~/folder/project/camera/views.py Ajouter les variables du fichier configuration.ini relatives à la nouvelle caméra cam_3_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_3_port\u0026#34;) Rp3 = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_3\u0026#34;) Modifier def historique(request) Ajouter chacune des lignes suivantes à la suite des lignes qui leur sont équivalentes latest_photo_list_3 = Photo.objects.filter(appareil=4).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_3_oneoutofN = [] for photo in latest_photo_list_3: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_3_oneoutofN.append(photo) Modifier la variable min_length en ajoutant la nouvelle caméra dans la liste min_length = min(len(latest_photo_list_1_oneoutofN), len(latest_photo_list_2_oneoutofN), len(latest_photo_list_py_oneoutofN), len(latest_photo_list_3_oneoutofN)) Dans la dernière boucle for modifier la variable new_group en ajoutant la nouvelle caméra dans la liste new_group = [latest_photo_list_1_oneoutofN[i], latest_photo_list_2_oneoutofN[i], latest_photo_list_py_oneoutofN[i], latest_photo_list_3_oneoutofN[i]] Les dernières lignes de la fonction doivent ressembler à ceci latest_photo_list_group = [] for i in range(min_length): new_group = [latest_photo_list_1_oneoutofN[i], latest_photo_list_2_oneoutofN[i], latest_photo_list_py_oneoutofN[i], latest_photo_list_3_oneoutofN[i]] latest_photo_list_group.extend(new_group) context = { \u0026#39;latest_photo_list_group\u0026#39;: latest_photo_list_group, } Modifier def parheure(request) Ajouter la ligne suivante après latest_photo_list_py ... latest_photo_list_3 = Photo.objects.filter(appareil=4).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] Modifier la valeur de min_length ... en ajoutant len(latest_photo_list_3) min_length = min(len(latest_photo_list_1), len(latest_photo_list_2), len(latest_photo_list_py), len(latest_photo_list_3)) Modifier la boucle for i in range(min_length): en ajoutant la nouvelle caméra à la liste new_group new_group = [latest_photo_list_1[i], latest_photo_list_2[i], latest_photo_list_py[i], latest_photo_list_3[i]] La boucle for doit donc ressembler à ceci for i in range(min_length): new_group = [latest_photo_list_1[i], latest_photo_list_2[i], latest_photo_list_py[i], latest_photo_list_3[i]] latest_photo_list_group.extend(new_group) Dans la varaible paginator modifier éventuellement le nombre d\u0026rsquo;éléments par page en mettant, par exemple, 240 au lieu de 180 (240 permet de visualiser les photos d\u0026rsquo;une heure complète si on prend une photo toutes les minutes). paginator = Paginator(latest_photo_list_group, 240) Ajouter la fonction stream_3 Après les trois fonctions stream ajouter : def stream_3(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp3)] context = { \u0026#39;stream\u0026#39;: stream, } Modifier la fonction stream_AllCam Dans la liste stream ajouter \u0026quot;/{}?action=stream\u0026quot;.format(Rp3) stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp1),\u0026#34;/{}?action=stream\u0026#34;.format(Rp2),\u0026#34;/{}?action=stream\u0026#34;.format(Rpi), \u0026#34;/{}?action=stream\u0026#34;.format(Rp3)] Fichier consultable Le fichier views.py doit ressembler au fichier consultable ici\nModifier les fichiers html (templates) Position du problème Nécessité de créer un fichier de streaming pour la nouvelle caméra : stream_3.html Modifier base.html pour ajouter la nouvelle caméra dans le menu Modifier historique.html pour modifier le nombre d\u0026rsquo;éléments affichés par ligne Modifier parHeure.html pour modifier le nombre d\u0026rsquo;éléments affichés par ligne Modifier stream_AllCam.html pour ajouter la nouvelle caméra Toiletter divers fichiers .html Créer le ficher stream_3.html Créer le fichier en écriture nano ~/folder/project/camera/templates/camera/stream_3.html Ecrire un contenu équivalent à celui des autres templates de streaming en :\nmodifiant le titre \u0026lt;h2\u0026gt; adaptant l\u0026rsquo;attribut alt modifiant le texte de \u0026lt;figcaption\u0026gt; modifiant le texte du bouton \u0026lt;Direct n Caméras\u0026gt; Un exemple de fichier est disponible ici\nModifier le fichier base.html Ouvrir le fichier en écriture nano ~/folder/project/camera/templates/camera/base.html Repérer le bloc {% block navebar %} du body Dans ce bloc repérer la div \u0026lt;div class=\u0026quot;dropdown-content\u0026quot;\u0026gt; A la fin de cette div, après l\u0026rsquo;ancre vers la Caméra 2 ajouter la ligne \u0026lt;a href=\u0026#34;/camera/stream_3/\u0026#34;\u0026gt;Caméra 3\u0026lt;/a\u0026gt; Un exemple de fichier est disponible ici Modifier le fichier historique.html Ouvrir le fichier en écriture nano ~/folder/project/camera/templates/camera/historique.html Rechercher la ligne après la condition {% else %} {% if forloop.counter|divisibleby:\u0026#34;3\u0026#34; %} Remplacer cette valeur soit par 4 ; vous afficherez les snapshots des 4 caméras sur une seule ligne soit par 2 : dans ce cas on affiche 2 snapshots par ligne, ce qui est plus lisible sur un portable. Il est aussi possible de ne pas modifier cette valeur. Dans ce cas, 3 photos seront affichées par ligne, avec un décalage des caméras en passant d\u0026rsquo;une ligne à l\u0026rsquo;autre Un exemple de fichier est disponible ici Modifier le fichier parHeure.html Ouvrir le fichier en écriture nano ~/folder/project/camera/templates/camera/parHeure.html Rechercher la ligne {% if forloop.counter|divisibleby:\u0026#34;3\u0026#34; %} Remplacer cette valeur soit par 4 ; vous afficherez les snapshots des 4 caméras sur une seule ligne soit par 2 : dans ce cas on affiche 2 snapshots par ligne, ce qui est plus lisible sur un portable. Il est aussi possible de ne pas modifier le fichier. Dans ce cas, 3 photos seront affichées par ligne, avec un décalage des caméras en passant d\u0026rsquo;une ligne à l\u0026rsquo;autre Un exemple de fichier est disponible ici Modifier le fichier stream_AllCam.html Ouvrir le fichier en écriture nano ~/folder/project/camera/templates/camera/stream_AllCam.html Modifier le titre dans la balise \u0026lt;h1\u0026gt; (les 4 caméras en direct par exemple) Ajouter le stream de la nouvelle caméra en ajoutant une balise \u0026lt;td\u0026gt; à la fin du fichier, avant la balise fermante de ligne (r pour row) \u0026lt;/tr\u0026gt; qui précède la balise fermante du tableau \u0026lt;/table\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;stream_3\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.3}} alt=\u0026#34;Erreur sur la caméra 3\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 3 : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; Si on laisse le fichier tel quel, les 4 caméras seront visibles sur la même ligne Cette lecture pouvant ne pas être très agréable, on peut créer une deuxième ligne : on aura ainsi deux caméras par ligne Scinder le texte entre la balise ouvrante \u0026lt;tr\u0026gt; et la balise fermante \u0026lt;/tr\u0026gt; en sélectionnant les deux premières cellules déterminées par les balises \u0026lt;td\u0026gt;...\u0026lt;/td\u0026gt; Créer une deuxième ligne avec une balise \u0026lt;tr\u0026gt;...\u0026lt;/tr\u0026gt; Y insérer la troisième cellule existante, délimitée par la troisième balise \u0026lt;td\u0026gt;...\u0026lt;/td\u0026gt; Et ajouter la quatrième cellule comme définie plus haut Un exemple de fichier (avec 2 caméras par ligne sur 2 lignes) est disponible ici Toiletter divers fichiers .html Un certain nombre de fichiers font référence à trois caméras et non quatre Il est possible de modifier le code html pour faire référence à quatre caméras Par exemple au niveau des boutons des fichiers de streaming (stream_1.html, stream_2.html, stream_py.html) Ces modificatins sont cosmétiques et non indispensables ! Vérifier les éventuelles migrations de l\u0026rsquo;application camera A priori, aucune modification de models.py n\u0026rsquo;a eu lieu Il est cependant possible de vérifier qu\u0026rsquo;on n\u0026rsquo;a pas touché à cette partie de l\u0026rsquo;application camera Se mettre en environnement virtuel, puis vérifier les migrations source ~/folder/folder_venv/bin/activate (venv) python ~/folder/project/manage.py makemigrations (venv) python ~/folder/project/manage.py migrate Modifier le fichier de configuration apache2 du site Modifier le fichier Ouvrir le fichier en écriture sudo nano /etc/apache2/sites-available/project-camera.conf Après la balise fermante \u0026lt;/location\u0026gt; du VirtualHost *:443 chercher les lignes ProxyPass et ProxyPassReverse Ajouter les deux lignes ProxyPass /Rp3 http://\u0026lt; localIP Raspberry \u0026gt;:8083/ ProxyPassReverse /Rp3 http://\u0026lt; localIP Raspberry \u0026gt;:8083/ Changer \u0026lt;localIP\u0026gt; par l\u0026rsquo;IP locale de la raspberry (par exemple : ProxyPass /Rp3 http://192.168.1.49:8083/) Rajouter ces deux lignes également au niveau du VirtualHost *:80 Si il a été nécessaire de créer un Virtual Host supplémentaire pour accéder au site depuis le réseau interne (\u0026lt;VirtualHost *:54321\u0026gt;) par exemple, ajouter les nouveaux ProxyPass et ProxyPassReverse au niveau de ce Virtual Host Un exemplaire de ce fichier est disponible ici Vérifier la syntaxe et relancer le serveur Vérifier la syntaxe sudo apache2ctl configtest Relancer le serveur sudo systemctl restart apache2 Relancer la raspberry Pour prendre en charge toutes les modifications, relancer la raspberry sudo reboot Remarques sur les caméras Longueur du câble USB Il peut être nécessaire d\u0026rsquo;allonger le câble USB d\u0026rsquo;une caméra Si la longueur de la rallonge est courte, une rallonge simple peut suffire Sinon, il convient d\u0026rsquo;utiliser une rallonge avec répéteur actif, de manière à amplifier le signal de la caméra Alimentation de plusieurs caméras Le nombre de ports USB de la Raspberry est limité Si on installe un grand nombre de caméras, il faut évidemment un hub USB Les caméras vont utiliser l\u0026rsquo;énergie fournie par la Raspberry pour fonctionner A terme, la puissance de celle-ci sera insuffisante Aussi est-il souhaitable de prévoir un hub avec alimentation externe Capacité du streaming Lorsque le nombre de caméras est élevé, il est possible que la Raspberry ne puisse pas bien afficher tous les flux des caméras ensemble Avec une Raspberry 3-B+, au delà de 4 caméras le flux en direct s\u0026rsquo;est essouflé Il convient alors de ne pas afficher tous les flux ensemble et de créer, par exemple, une première fonction de views.py qui affichera 4 caméras et une deuxième fonction qui affichera les 2 autres (dans une hypothèse de 6 caméras) Il faut bien sûr, dans ce cas, adapter urls.py et créer les fichiers html ad hoc Une alternative (possible, mais non testée) est d\u0026rsquo;utiliser une Raspberry plus puissante (Pi-4 ou Pi-5 par exemple) Il est également possible d\u0026rsquo;utiliser une deuxième Raspberry qui accueillera de nouvelles caméras et qui enverra les images à la Raspberry qui héberge le site Django : voir la Partie 10 "},{"id":20,"href":"/script/global_css/","title":"global.css","parent":"Scripts","content":"/* pour les fontes en fonction du type d\u0026#39;élément */ p { font-size: 18px; } pre { font-size: 18px; color: #8A104D; } h1 { font-size: 44px; color: #8A104D; } .monh1 { font-size: 25px; color: #8A104D; text-align: left; } .monh2 { font-size:16px; color: #8A104D; text-align: left; font-weight: bold; } /* traitement des images : centrer, ajuster... */ .centre-image { display: block; margin-left: auto; margin-right: auto; } .imgresponsive { width: 100%; max-width: 750px; height: auto; } .imgLogo { width: 150px; margin-right: 20px; } .imgSmall { width: 100%; max-width: 200px; height: auto; } /* Pour centrer tableau */ figcaption { font-size: 11px; text-align: left; vertical-align: bottom; } /* pour des containers selon le texte à disposer */ .grid-One { display: grid; grid-template-columns: 400px; grid-gap: 10px; /* background-color: #2196F3; */ padding: 10px; } .grid-One \u0026gt; div { text-align: center; font-size: 16px; color: #8A104D; font-weight: bold; } .grid-Three { display: grid; grid-template-columns: 100px 100px 100px; grid-gap: 10px; padding: 10px; } .grid-Three \u0026gt; div { text-align: center; font-size: 16px; color: #8A104D; font-weight: bold; } @media screen and (max-width: 600px) { /* For mobile phones: */ .monh1 { font-size : 32px; } .monp { font-size : 18px; } p { font-size: 11px; } .grid-container { display: grid; grid-template-columns: 1fr; width: 100%; } } /* boutons */ .button { display: table-cell; background-color: #8A104D; border: none; color: white; padding: 12px 12px; text-align: center; vertical-align: middle; text-decoration: none; display: inline-block; font-size: 15px; font-family: var(--main-ft-family); margin-bottom: 10px; margin-top: 10px; margin-left: 100px; cursor: pointer; width: 200px; height: 40px; } .buttonLigne { background-color: #8A104D; border: none; color: white; /* padding: 12px 12px; */ padding: 6px; text-align: center; vertical-align: middle; text-decoration: none; display: inline-block; font-size: 15px; font-family: var(--main-ft-family); margin-bottom: 10px; margin-top: 12px; margin-left: 8px; cursor: pointer; width: 200px; height: 35px; } /* disposition */ :root { --main-bg-color: #f5efe0; --main-bg-color2: #4A4A4A; --main-bg-color3: #EAEAEA; --main-ft-family: \u0026#39;Pacifico\u0026#39;; --main-ft-size: 16px; --main-color: #cd2653; --main-color2: #a21e42; } * { box-sizing: border-box; } body { background-color: #fdf9f9; } .row:after{ content: \u0026#34;\u0026#34;; display: table; clear: both; } /* pour avoir deux colonnes (notamment pour les photos doubles) */ .column2{ float: left; width: 50%; padding: 10px; } .grid-container { display: grid; grid-template-columns: 1fr; } .item_menu { grid-row: 1 ; grid-column: 1 / 2; background-color: #fdf9f9; } .item_header { grid-row: 2; grid-column: 1 / 2; background-color: #fdf9f9; padding: 15px; text-align: center; font-size: 20px; font-family: var(--main-ft-family); } .item_main { grid-row: 3; grid-column: 1 / 2; background-color: #fdf9f9; font-family: var(--main-ft-family); } .item_footer { /* grid-row: 4; grid-column: 1 / 2; */ text-align: left; /* background: var(--main-bg-color4); */ color: #8A104D; font-size: 14px; font-family: var(--main-ft-family); /* padding: 40px; */ vertical-align: middle; margin-top: 25px; margin-left: 100px; } /* header footer */ .header { background-color: #8A104D; color: var(--main-color); padding: 15px; text-align: center; font-size: 25px; } .footer { text-align: left; background: var(--main-bg-color); color:#8A104D; font-size: 12px; /* position: fixed; */ margin-top: 54px; margin-left: 100px; /* left:80px; */ bottom:0px; height:54px; width: 100%; } /* navigation menu */ .navbar ul { list-style-type: none; margin: 0; padding: 0; overflow: hidden; background-color: #8A104D; } .navbar li { float: left; } .navbar li a{ display: block; text-align: center; padding: 14px 16px; text-decoration: none; font-size:18px; font-weight: bold; color: #bebebe; background-color: #8A104D; } .icon { display:none; } .icon:hover{ color : pink; } .dropbtn { display: inline-block; color: green; text-align: left; padding: 14px 16px; text-decoration: none; } .navbar li a:hover, .dropdown:hover .dropbtn { background-color: #A6A6A6; color: white; } .dropdown-content { display: none; position: absolute; background-color: #505050; min-width: 100px; box-shadow: 0px 8px 8px 0px rgba(0,0,0,0.2); z-index: 10; } .dropdown .dropdown-content a{ /* color: green; */ padding: 8px 8px; text-decoration: none; /* display: block; */ text-align: left; } .dropdown-content a:hover {background-color: blue;} .dropdown:hover .dropdown-content { display: block; } .dropdown \u0026gt;a::after{ content: \u0026#34;▼\u0026#34;; font-size: 15px; } @media screen and (max-width: 600px) { /* For mobile phones: */ .navbar li:not(:first-child) { display: none; } .navbar .icon { float: right; display: block; } } @media screen and (max-width: 600px) { .navbar.responsive {position: relative;} .navbar.responsive .icon { position: absolute; right: 0; top: 0; } .navbar.responsive li { float: none; display: block; text-align: left; } } /* pagination */ .pagination a { color: white; float: left; /* padding: 8px 16px; */ padding: 5px; font-family: var(--main-ft-family); text-decoration: none; margin-bottom: 8px; } .liActive { background-color: #aaa; } .spanPage { display: block; /* padding: 8px 16px; */ margin-left: 40px; margin-top: 40px; color: #8A104D; } .pagination a:hover:not(.active) { background-color: gray; color:#8A104D; } .pagination li { display: inline; } .pagination a:not(active) { background-color: #8A104D; } .pagination a:active { background-color: #aaa; } "},{"id":21,"href":"/script/base_html_4cam/","title":"base_4cam.html","parent":"Scripts","content":"{% load static %} \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {% block title %}\u0026lt;title\u0026gt;X \u0026amp; Y\u0026lt;/title\u0026gt;{% endblock %} \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;{% static \u0026#39;camera/logo/logo.png\u0026#39; %}\u0026#34; type=\u0026#34;image/x-icon\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{% static \u0026#39;camera/css/global.css\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;script\u0026gt; function myFunction() { var x = document.getElementById(\u0026#34;myNavbar\u0026#34;); if (x.className === \u0026#34;navbar\u0026#34;) { x.className += \u0026#34; responsive\u0026#34;; } else { x.className = \u0026#34;navbar\u0026#34;; } } \u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; {% block navebar %} \u0026lt;div class=\u0026#39;navbar\u0026#39; id=\u0026#34;myNavbar\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/\u0026#34; \u0026gt;Accueil\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;dropbtn\u0026#34; href=\u0026#34;/camera/stream_AllCam/\u0026#34;\u0026gt;En Direct \u0026amp;ensp;\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;dropdown-content\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_AllCam/\u0026#34;\u0026gt;Les 3 Caméras\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_py/\u0026#34;\u0026gt;Caméra Py\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_1/\u0026#34;\u0026gt;Caméra 1\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_2/\u0026#34;\u0026gt;Caméra 2\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_3/\u0026#34;\u0026gt;Caméra 3\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/nuit/\u0026#34;\u0026gt;La Nuit\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/historique/\u0026#34;\u0026gt;Historique\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/parHeure/\u0026#34;\u0026gt;Par Heures\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;div class=\u0026#39;icon\u0026#39;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; onclick=\u0026#34;myFunction()\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-bars\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div \u0026gt; {% endblock %} \u0026lt;div class= \u0026#34;item_header\u0026#34;\u0026gt; {% block header %} {% endblock %} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item_main\u0026#34;\u0026gt; {% block content %} {% endblock %} \u0026lt;/div\u0026gt; \u0026lt;table class=\u0026#34;item_footer\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;img src=\u0026#34;{% static \u0026#39;camera/logo/logo.png\u0026#39; %}\u0026#34; alt=\u0026#34;?logo?\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;X \u0026amp; Y\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; "},{"id":22,"href":"/script/ipcheck_py/","title":"ipcheck.py","parent":"Scripts","content":"#!/usr/bin/python3.5 # -*-coding:Utf-8 import json import requests import datetime import smtplib from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) mail_site = parser.get(\u0026#34;mails\u0026#34;, \u0026#34;mail_site\u0026#34;) mail_site_mdp = parser.get(\u0026#34;mails\u0026#34;, \u0026#34;mail_site_mdp\u0026#34;) mail_perso = parser.get(\u0026#34;mails\u0026#34;, \u0026#34;mail_perso\u0026#34;) smtp_port = int(parser.get(\u0026#34;mails\u0026#34;, \u0026#34;smtp_port\u0026#34;)) home = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;home\u0026#34;) fournisseur = mail_site.split(\u0026#34;@\u0026#34;)[1] login = mail_site.split(\u0026#34;@\u0026#34;)[0] filePath = f\u0026#39;{home}/currentIP.txt\u0026#39; def notifyByMail(ip, date): print(\u0026#34;Sending email...\u0026#34;) dateString = date.strftime(\u0026#34;%Y-%m-%dT%H:%M:%S.%fZ\u0026#34;) server=smtplib.SMTP(f\u0026#39;smtp.{fournisseur}\u0026#39;,smtp_port) server.ehlo() server.starttls() server.login(login,mail_site_mdp) msg = MIMEMultipart() fromaddr = mail_site msg[\u0026#39;From\u0026#39;] = fromaddr msg[\u0026#39;Subject\u0026#39;] = f\u0026#39;IP Raspberry Caméras - {ip}\u0026#39; body = f\u0026#39;Changement IP Raspberry : nouvelle IP : {ip} ; date : {dateString}\u0026#39; msg.attach(MIMEText(body, \u0026#39;plain\u0026#39;)) server.sendmail(fromaddr,mail_perso ,msg.as_string()) print(\u0026#34;Message sent\u0026#34;) server.quit() print(\u0026#34;Server quit !\u0026#34;) def getPreviousIP(): try: fichierIP = open(filePath,\u0026#34;r\u0026#34;) rebuilt = json.loads(fichierIP.read()) return rebuilt[\u0026#34;ip\u0026#34;] except FileNotFoundError: return \u0026#34;-1\u0026#34; def saveIP(ip, date): dateString = date.strftime(\u0026#34;%Y-%m-%dT%H:%M:%S.%fZ\u0026#34;) values = {\u0026#34;ip\u0026#34;:ip, \u0026#34;date\u0026#34;:dateString} text = json.dumps(values) fichierIP = open(filePath,\u0026#34;w\u0026#34;) fichierIP.write(text) fichierIP.close() ip = json.loads(requests.get(\u0026#34;http://httpbin.org/ip\u0026#34;).text)[\u0026#34;origin\u0026#34;] if getPreviousIP() != ip: date = datetime.datetime.now() saveIP(ip, date) notifyByMail(ip, date) "},{"id":23,"href":"/script/mail_reboot_py/","title":"mail_reboot.py","parent":"Scripts","content":"#!/usr/bin/python3 # -*-coding:Utf-8 import datetime import smtplib from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText from time import sleep from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) mail_site = parser.get(\u0026#34;mails\u0026#34;, \u0026#34;mail_site\u0026#34;) mail_site_mdp = parser.get(\u0026#34;mails\u0026#34;, \u0026#34;mail_site_mdp\u0026#34;) mail_perso = parser.get(\u0026#34;mails\u0026#34;, \u0026#34;mail_perso\u0026#34;) smtp_port = int(parser.get(\u0026#34;mails\u0026#34;, \u0026#34;smtp_port\u0026#34;)) delay_send_mail_reboot=int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;delay_send_mail_reboot\u0026#34;)) fournisseur = mail_site.split(\u0026#34;@\u0026#34;)[1] login = mail_site.split(\u0026#34;@\u0026#34;)[0] sleep(delay_send_mail_reboot) date = datetime.datetime.now() dateString = date.strftime(\u0026#34;%Y-%m-%dT%H:%M:%S.%fZ\u0026#34;) server=smtplib.SMTP(f\u0026#39;smtp.{fournisseur}\u0026#39;,smtp_port) server.ehlo() server.starttls() server.login(login,mail_site_mdp) msg = MIMEMultipart() fromaddr = mail_site msg[\u0026#39;From\u0026#39;] = fromaddr msg[\u0026#39;Subject\u0026#39;] = f\u0026#39;Redémarrage de la raspberry - {dateString}\u0026#39; body = f\u0026#39;ATTENTION : la raspberry a redémarré le {dateString}.\\nVérifiez le bon fonctionnement des caméras.\u0026#39; msg.attach(MIMEText(body, \u0026#39;plain\u0026#39;)) print(\u0026#34;message is ready\u0026#34;) server.sendmail(fromaddr, mail_perso, msg.as_string()) print(\u0026#34;Message sent\u0026#34;) server.quit() print(\u0026#34;Server quit\u0026#34;) "},{"id":24,"href":"/tuto/part7/","title":"Tutoriel : Partie 7 - Fichiers de gestion","parent":"Tutos","content":"A faire Ecriture de scripts de gestion Lancement des scripts depuis le cron Pouvoir se connecter en ssh à la raspberry depuis son téléphone mobile Réglages si la Raspberry fonctionne en WiFi Mise à jour régulière du système Créer et ouvrir le fichier en écriture nano ~/script/updateAndUpgradeAuto.sh Ecrire le script en ajoutant les deux lignes #!bin/bash sudo apt update -y \u0026amp;\u0026amp; sudo apt upgrade -y \u0026amp;\u0026amp; sudo apt autoremove -y \u0026amp;\u0026amp; sudo reboot Il faut cependant être vigilant avec les mises à jour ; certaines d\u0026rsquo;entre elles pourraient empêcher que le serveur continue de bien fonctionner Il est préférable de les lancer manuellement de manière régulière Apporter un soin particulier aux mises à jour de apache2 qui peuvent corriger des failles de sécurité Etre informé par courriel des redémarrages de la raspberry A chaque démarrage de la raspberry, un courriel est envoyé pour prévenir l\u0026rsquo;utilisateur. Ceci permet notamment de vérifier que les caméras se sont bien lancées. Les adresses mail de l\u0026rsquo;envoyeur et du destinataire (elles peuvent être différentes) ainsi que le mot de passe sont paramétrables dans configuration.ini. Créer et ouvrir le script en écriture nano ~/script/mail_reboot.py Copier/coller le contenu du fichier mail_reboot.py disponible ici Contrôle de l\u0026rsquo;IP et envoi d\u0026rsquo;un mail en cas de changement Si une IP statique (fixe) n\u0026rsquo;est pas assujettie à la box, il faut être informé des changements d\u0026rsquo;IP. Créer et ouvrir en écriture le fichier ~/currentIP.txt nano ~/currentIP.txt Ecrire la ligne suivante {\u0026#34;ip\u0026#34;: \u0026#34; \u0026#34;, \u0026#34;date\u0026#34;: \u0026#34; \u0026#34;} Si vous n\u0026rsquo;écrivez rien dans le fichier, lorsque le script se lancera il soulèvera une erreur. Créer et ouvrir en écriture le fichier ~/script/ipcheck.py nano ~/script/ipcheck.py Copier/coller le contenu du fichier ipcheck.py disponible ici Lancement des différents scripts dans le cron Éditer le crontab crontab -e Lancer le script de mise à jour tous les lundis à 4H10 en ajoutant la ligne 10 04 * * 1 sh /home/pi/script/updateAndUpgradeAuto.sh Lancer l\u0026rsquo;envoi de courriel au redémarrage de la Raspberry en ajoutant la ligne @reboot python3 /home/pi/script/mail_reboot.py Lancer le script de contrôle de l\u0026rsquo;IP en ajoutant la ligne */10 * * * * python3 /home/pi/script/ipcheck.py L\u0026rsquo;IP sera contrôlée toutes les 10 minutes. Au final le cron doit ressembler à ceci @reboot python3 /home/pi/script/runCamera_1.py @reboot python3 /home/pi/script/runCamera_2.py @reboot python3 /home/pi/script/runCamera_py.py @reboot python3 /home/pi/script/getCamerasAndRegister.py 10 03 * * * python3 /home/pi/script/suppressFiles.py 10 02 3 */2 * sh /home/pi/script/certbotRenew.sh 10 04 * * 1 sh /home/pi/script/updateAndUpgradeAuto.sh # à commenter au besoin @reboot python3 /home/pi/script/mail_reboot.py */10 * * * * python3 /home/pi/script/ipcheck.py Accès à la raspberry depuis son téléphone mobile Il peut être nécessaire de se connecter à la raspberry pour modifier certains paramètres ou pour toute autre raison. Y compris depuis l’extérieur du réseau avec son téléphone mobile. Différentes applications permettant une connexion ssh depuis un mobile sont disponibles. Termius est particulièrement simple et a une offre gratuite amplement suffisante pour ce projet. Installer Termius depuis l\u0026rsquo;App Store ou Google Play Une fois Termius installée sur son mobile Dans le menu choisir Hosts Créer un nouvel hôte en appuyant sur + et choisir New host Vous pouvez créer deux hôtes : un accès en réseau local et un accès depuis l’extérieur Accès extérieur Alias : rentrer l’étiquette de votre choix, par exemple : Camera Ext Hostname or IP Address : entrer l’ adresse IP de votre box Chosir le mode SSH en cliquant sur la case (a priori sélectionné par défaut) Port : entrer le port externe que vous avez attribué pour le ssh dans le NAT/PAT Username : pi (à moins que vous n’ayez changé de nom d’utilisateur) Password : entrer le mot de passe de la raspberry (en faisant un copier/coller) Valider en cliquant sur le symbole ∨ en haut à droite de l’écran Accès local Alias : rentrer l’étiquette de votre choix, par exemple : Camera Local Hostname or IP Address : entrer l’ adresse IP locale de la raspberry (par exemple 192.168.1.49) Chosir le mode SSH en cliquant sur la case (a priori sélectionné par défaut) Port : 22, qui est le port par défaut Username : pi (à moins que vous n’ayez changé de nom d’utilisateur) Password : entrer le mot de passe de la raspberry (en faisant un copier/coller) Valider en cliquant sur le symbole ∨ en haut à droite de l’écran A la première connexion, le logiciel demande de valider la clé : appuyer sur Connect Lors des changements d’IP de la box, il faut changer l’adresse IP de l’hôte de l’accès extérieur Connexion au WiFi Position du problème Si la Raspberry est connectée en WiFi et non en filaire, lors d\u0026rsquo;une panne de courant, la Raspberry se mettra en route AVANT que la WiFi ne soit disponible La Raspberry sera alors incapable de se connecter au WiFi Le logiciel sera opérationnel, avec prises de photos, stockage dans la base de données\u0026hellip; Mais le site ne sera pas accessible La Raspberry ne sera même pas accessible en ssh et il ne sera donc pas possible de la rebooter à distance La seule solution est alors de débrancher la Raspberry et de la rebrancher pour qu\u0026rsquo;elle se connecte au WiFi au redémarrage Script de test de connexion Une solution est proposée par dweeber Il s\u0026rsquo;agit d\u0026rsquo;un script qui va tester régulièrement si la Raspberry est sur le réseau et va redémarrer le WiFi dans le cas contraire Ce script est repris dans la procédure ci-dessous ; les seuls changements concernent le chemin d\u0026rsquo;accès du fichier lockfile, notamment pour des questions de droits d\u0026rsquo;accès au répertoire /var/run/ préconisé par Kevin Reed ainsi que la commande ifconfig de fin de script Procédure Créer le répertoire /home/pi/WiFi qui est le répertoire du fichier lockfile mkdir ~/WiFi Vérifier que la valeur du wlan est bien wlan0 iwconfig wlan0 Si la réponse est wlan0 No such device chercher cette valeur (éventuellement aprés avoir installé iw : sudo apt install iw) iw dev Dans ce cas, dans le script, modifier la valeur de la variable wlan La valeur pingip est fixée à 192.168.1.1 : la modifier au besoin Créer le fichier WiFiCheck.sh en écriture nano ~/script/WiFiCheck.sh Copier dans ce fichier le script disponible ici Sauvegarder et quitter l\u0026rsquo;éditeur nano: Ctrl+0 Enter Ctrl+X Ouvrir le crontab en édition crontab -e Lancer le script toutes les 5 minutes, par exemple, en ajoutant à la fin du crontab /5 * * * * sh /home/pi/script/WiFiCheck.sh Sauvegarder et quitter le crontab Conclusion Un système de surveillance en flux direct et avec enregistrement et stockage de photos a été mis en place pour être consultable, après authentification, depuis le web en utilisant mjpg-streamer, django et apache.\nEn jouant sur différents paramètres, notamment la fréquence de capture des images, on dispose, si on le souhaite, d’une surveillance qui peut être adaptée à d\u0026rsquo;autres projets.\nCertaines faiblesses sont patentes ; par exemple le fait que si l\u0026rsquo;une des caméras ne se lance pas au départ, il n\u0026rsquo;y a ni procédure de relance ni message d\u0026rsquo;alerte.\nDe manière délibérée, il n\u0026rsquo;a pas été fait appel à un logiciel de détection de mouvements ni à un traitement des images permettant de ne sélectionner que les photos sur lesquelles un cheval apparaîtrait. Ceci pourrait faire l’objet d\u0026rsquo;autres projets.\nActuellement (septembre 2024) deux Raspberry travaillent de concert depuis un an et le système fonctionne bien. Des incidents mineurs (problème d\u0026rsquo;affichage des images, stockage dans la base de données..) ont pu nécessiter de rebooter le système.\n"},{"id":25,"href":"/script/project-camera_conf_V5/","title":"project-camera.conf V5","parent":"Scripts","content":"#mis en dehors du virtual host voir https://stackoverflow.com/questions/47803081/certbot-apache-error-name-duplicates-previous-wsgi-daemon-definition WSGIDaemonProcess project-camera.com python-home=/home/pi/folder/folder_venv python-path=/home/pi/folder/project \u0026lt;VirtualHost *:80\u0026gt; #!!!REMPLACER \u0026lt;site name\u0026gt; par le nom de votre site (par exemple, monprojet.sytes.net) ServerName \u0026lt;site name\u0026gt; ServerAlias www.\u0026lt;site name\u0026gt; Redirect permanent / https://\u0026lt;site name\u0026gt; \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:443\u0026gt; #!!!REMPLACER \u0026lt;site name\u0026gt; par le nom de votre site (par exemple, monprojet.sytes.net) ServerName \u0026lt;site name\u0026gt; ServerAlias \u0026lt;site name\u0026gt; #pour accroître la sécurité et être en HSTS Redirect permanent /secure https://\u0026lt;site name\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; #pour forcer authentification accès site \u0026lt;Location \u0026#34;/\u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; #Pour accéder aux flux depuis l\u0026#39;extérieur du réseau #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l\u0026#39;IP locale de votre Raspberry # Si vous avez d\u0026#39;autres ports pour les caméras, modifiez les en conséquence ProxyPass /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPassReverse /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPass /Rp2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPassReverse /Rp_2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPass /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ ProxyPassReverse /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ #Pour le certificat #!!!REMPLACER \u0026lt;site name\u0026gt; par le nom de votre site (par exemple, monprojet.sytes.net) SSLEngine on SSLCertificateFile /etc/letsencrypt/live/\u0026lt;site name\u0026gt;/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/\u0026lt;site name\u0026gt;/privkey.pem #Pour accroître la sécurité SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 SSLHonorCipherOrder on SSLCompression off SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384 SSLOptions +StrictRequire Header always set Strict-Transport-Security \u0026#34;max-age=63072000; includeSubDomains;\u0026#34; \u0026lt;/VirtualHost\u0026gt; #Pour accès sur le réseau local \u0026lt;VirtualHost *:54321\u0026gt; #Nécessaire si la box ne permet pas de rediriger en interne les données du site #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l’IP de la Raspberry ; par exemple : ServerName 192.168.1.49 ServerName \u0026lt;local IP Raspberry\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; #pour forcer authentification accès site \u0026lt;Location \u0026#34;/ \u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; #Pour accéder aux flux depuis l\u0026#39;extérieur du réseau #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l\u0026#39;IP locale de votre Raspberry # Si vous avez d\u0026#39;autres ports pour les caméras, modifiez les en conséquence ProxyPass /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPassReverse /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPass /Rp2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPassReverse /Rp_2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPass /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ ProxyPassReverse /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ \u0026lt;/VirtualHost\u0026gt; #ajouté pour éliminer erreur AH00558 ServerName 127.0.0.1 "},{"id":26,"href":"/tuto/part6/","title":"Tutoriel : Partie 6 - Sécuriser le site en https","parent":"Tutos","content":"A faire Installer Certbot et obtenir un certificat Modifier le fichier de configuration du site Modifier le NAT/PATau niveau de la box Tester la sécurité du site Renouveler automatiquement le certificat Comment sécuriser un site ? Il est possible de sécuriser un site en utilisant les services de Cloudflare. Mais dans la mesure où on utilise un Dyn DNS (No-IP), la procédure est plutôt complexe, nécessitant par exemple de passer par DNS-O-Matic. Il est finalement plus simple d’utiliser Certbot, d’autant que l’on peut automatiser le renouvellement des certificats. La manière la plus simple d’installer certbot est d’utiliser la commande snap. Sources certbot Wiki ubuntu-fr Activer les modules de Apache Activer le module ssl sudo a2enmod ssl Activer le module rewrite sudo a2enmod rewrite Prendre en compte les modifications sudo systemctl restart apache2 Installer Certbot et obtenir un certificat Installer Snapd La manière la plus simple d\u0026rsquo;installer Certbot est de passer par la commande snap Installer snapd sudo apt install snapd A l’invite de commande, taper O (oui) Rebouter le système sudo reboot Tester snap sudo snap install hello-world doit vous renvoyer : hello-world 6.4 from Canonical✓ installed Installer core sudo snap install core Installer Certbot Installer Certbot sudo snap install --classic certbot Créer un lien symbolique de /snap/bin/certbot vers /usr/bin/certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot Installer le certificat Certbot On peut laisser Certbot installer le certificat et modifier lui-même les fichiers Apache. Il est préférable d’installer le certificat mais de modifier soi-même les fichiers de configuration du site, notamment pour pouvoir maîtriser certains paramètres de sécurité. Lancer la commande sudo certbot certonly --apache --rsa-key-size 4096 On a fixé la taille de la clé RSA à 4096 bit contre 2048 par défaut. Répondre aux invites de commandes Entrer (ou non) son adresse mail. Read the terms of service : accepter en tapant Y à l’invite de commande Electronic Frontier Foundation : accepter ou non Quel nom activer pour le certificat : deux options Soit rien n’est proposé : rentrer le nom du site (monsite.freeddns.org par exemple)\nSoit deux options sont proposées :\n1 :\u0026lt;nom du site\u0026gt; (monsite.freeddns.org par exemple) 2 :www.\u0026lt;nom du site\u0026gt; (www.monsite.freeddns.org par exemple) Taper 1 car c’est le nom qui a été donné à No-IP.\nModifier le fichier /etc/apache2/sites-available/project-camera.conf Ouvrir le fichier sudo nano /etc/apache2/sites-available/project-camera.conf Faire un copier du contenu du VirtualHost 80 (voir plus loin) Modifier le contenu de \u0026lt;VirtualHost *:80\u0026gt; (en remplaçant \u0026lt;nom du site\u0026gt;par le nom de votre site) comme indiqué ci-dessous ServerName \u0026lt;nom du site\u0026gt; ServerAlias www.\u0026lt;nom du site\u0026gt; Redirect permanent / https://\u0026lt;nom du site\u0026gt; Créer le VirtualHost 443 \u0026lt;VirtualHost *:443\u0026gt; et sous cette ligne copier l’ancien contenu du VirtualHost80\nAjouter les lignes concernant le certificat en remplaçant \u0026lt;nom du site\u0026gt;par le nom de votre site SSLEngine on SSLCertificateFile /etc/letsencrypt/live/\u0026lt;nom du site\u0026gt;/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/\u0026lt;nom du site\u0026gt;/privkey.pem Ajouter les lignes concernant la sécurité SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 SSLHonorCipherOrder on SSLCompression off SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384 SSLOptions +StrictRequire Forcer le STS Header always set Strict-Transport-Security \u0026#34;max-age=63072000; includeSubDomains;\u0026#34; Balise de fermeture du VirtualHost \u0026lt;/VirtualHost\u0026gt; Le contenu du fichier doit être semblable à celui du fichier project-camera.conf V5 disponible ici Si vous copiez/collez le contenu de ce fichier, vous devrez modifier l’IP locale, le nom du site, les ports des caméras… en fonction de vos paramètres. Explications sur ces commandes SSLEngine on : Activation du module SSL SSLCertificateKeyFile : chemin vers le fichier privkey.pem SSLCertificateChainFile : chemin vers le fichier chain.pem SSLProtocol : Désactive les protocoles les moins sûrs : SSLv3, TLSv1 et TLSv1.1 SSLHonorCipherOrder : Quand activé, le serveur force ses préférences de protocoles et non le navigateur du client. SSLCompression : La compression SSL n’est pas activée SSLOptions +StrictRequire : Exige une connexion SSL stricte SSLCipherSuite : Liste des algorithmes de chiffrement disponibles Header always set Strict-Transport-Security : ou HSTS. Indique aux navigateurs que seul le https est supporté. Modifications au niveau de la box Entrer dans la box en tapant 192.168.1.1 dans la barre d\u0026rsquo;adresse du navigateur (à modifier selon l\u0026rsquo;opérateur et le réseau) Ajouter la règle dans le NAT/PAT Application Service : donner un nouveau nom, par exemple Web Server https Port interne : 443 Port externe : 443 Protocole : TCP Equipement : votre raspberry IP externe : toutes, sauf si vous voulez limiter l’accès Tester la sécurité En accédant au site depuis l\u0026rsquo;extérieur du réseau, vous constatez que le symbole cadenas précède l\u0026rsquo;adresse de votre site. Tester le niveau de sécurité Aller sur le site de SSL Labs Entrez le nom de votre site pour le tester Théoriquement vous devez obtenir la note A+ Renouveler automatiquement le certificat certbot Le certificat est valable 90 jours ; on écrit un script bash pour le renouveler automatiquement. Créer le script et l\u0026rsquo;ouvrir en écriture nano ~/script/certbotRenew.sh Écrire le script en ajoutant les deux lignes #!bin/bash echo \u0026#34;1\u0026#34; | sudo certbot certonly --force-renew -d \u0026lt;nom du site\u0026gt; Modifier \u0026lt;nom du site\u0026gt; par le nom du site, par exemple monsite.net Il est nécessaire d\u0026rsquo;utiliser le flag -d, car deux sites ont été créés : \u0026lt;nom du site\u0026gt; et www.\u0026lt;nom du site\u0026gt; echo \u0026quot;1\u0026quot; permet de forcer la réponse à la question posée par certbot : How would you like to authenticate with the ACME CA? et qui propose trois réponses. Vérifier en lançant la commande sudo certbot certonly --force-renew -d \u0026lt;monsite\u0026gt; que la réponse 1 1: Apache Web Server plugin (apache) est la plus appropriée Éditer le crontab crontab -e Lancer le script tous les deux mois en ajoutant la ligne 10 02 3 2,4,6,8,10,12 * sh /home/pi/script/certbotRenew.sh Le script sera lancé à 2 heures 10 le troisième jour des mois pairs. Dans la mesure où certains trimestres durent 92 jours, on doit renouveler le certificat tous les deux mois. Pour une raison obscure la commande suivante (équivalente à la précédente) n\u0026rsquo;a pas fonctionné : 10 02 3 */2 * sh /home/pi/script/certbotRenew.sh Pour vérifier la validité du certificat, lancer depuis le terminal de n\u0026rsquo;importe quel ordinateur la commande : echo | openssl s_client -connect \u0026lt;nom du site\u0026gt;:443 -servername \u0026lt;nom du site\u0026gt; 2\u0026gt;/dev/null | openssl x509 -noout -dates en adaptant \u0026lt;nom du site\u0026gt;, par exemple monsite.freeddns.org La commande doit renvoyer une réponse du style : notBefore=Oct 5 05:23:04 2023 GMT notAfter=Jan 3 05:23:03 2024 GMT Il est possible de vérifier la validité du certificat depuis la raspberry en lançant la commande : sudo certbot certificates A ce stade - Prochaine étape A ce stade Votre site est sécurisé https Il a un score global A+ Le certificat de Let’s Encrypt est renouvelé automatiquement tous les deux mois. Etape suivante Automatiser les mises à jour de la raspberry Être informé des redémarrages de la raspberry Etre informé des changements d’IP de la box Mettre en place un accès par ssh sur la raspberry depuis son téléphone portable "},{"id":27,"href":"/script/project-camera_conf_V4/","title":"project-camera.conf V4","parent":"Scripts","content":"#mis en dehors du virtual host voir https://stackoverflow.com/questions/47803081/certbot-apache-error-name-duplicates-previous-wsgi-daemon-definition WSGIDaemonProcess project-camera.com python-home=/home/pi/folder/folder_venv python-path=/home/pi/folder/project \u0026lt;VirtualHost *:80\u0026gt; #!!!REMPLACER \u0026lt;site name\u0026gt; par le nom de votre site (par exemple, monprojet.sytes.net) ServerName \u0026lt;site name\u0026gt; ServerAlias www.\u0026lt;site name\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; #pour forcer authentification accès site \u0026lt;Location \u0026#34;/ \u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; #Pour accéder aux flux depuis l\u0026#39;extérieur du réseau #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l\u0026#39;IP locale de votre Raspberry # Si vous avez d\u0026#39;autres ports pour les caméras, modifiez les en conséquence ProxyPass /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPassReverse /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPass /Rp2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPassReverse /Rp_2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPass /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ ProxyPassReverse /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ \u0026lt;/VirtualHost\u0026gt; #Pour accès sur le réseau local \u0026lt;VirtualHost *:54321\u0026gt; #Nécessaire si la box ne permet pas de rediriger en interne les données du site #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l’IP de la Raspberry ; par exemple : ServerName 192.168.1.49 ServerName \u0026lt;local IP Raspberry\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; #pour forcer authentification accès site \u0026lt;Location \u0026#34;/ \u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; #Pour accéder aux flux depuis l\u0026#39;extérieur du réseau #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l\u0026#39;IP locale de votre Raspberry # Si vous avez d\u0026#39;autres ports pour les caméras, modifiez les en conséquence ProxyPass /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPassReverse /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPass /Rp2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPassReverse /Rp_2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPass /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ ProxyPassReverse /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ \u0026lt;/VirtualHost\u0026gt; # Pour éliminer erreur AH00558 ServerName 127.0.0.1 "},{"id":28,"href":"/script/views_py_V2/","title":"views.py V2","parent":"Scripts","content":"from django.shortcuts import render, redirect from django.http import HttpResponse from django.core.paginator import Paginator from django.template.response import TemplateResponse from datetime import datetime, timedelta from django.utils import timezone import pytz #pour régler les problèmes d\u0026#39;heure naïve et consciente from pytz import timezone from suntimes import SunTimes from configparser import ConfigParser from .models import Photo, Appareil config_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(config_file) longitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;longitude\u0026#34;)) latitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;latitude\u0026#34;)) altitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;altitude\u0026#34;)) zone = parser.get(\u0026#34;locate\u0026#34;, \u0026#34;zone\u0026#34;) hz_historique = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;historique\u0026#34;)) hz_nuit = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;nuit\u0026#34;)) hz_capture = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;capture\u0026#34;)) raspIP = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;raspIP\u0026#34;) cam_1_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_port\u0026#34;) cam_2_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_2_port\u0026#34;) cam_py_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_port\u0026#34;) Rp1 = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_1\u0026#34;) Rp2 = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_2\u0026#34;) Rpi = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_py\u0026#34;) display_nombre = int(float(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;display_jour\u0026#34;)) * 3600 * 24 / hz_capture) appli = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;appli\u0026#34;) local_tz = timezone(zone) utc = pytz.utc def accueil(request): response = TemplateResponse(request, \u0026#34;{}/accueil.html\u0026#34;.format(appli)) return response def historique(request): \u0026#34;\u0026#34;\u0026#34;On visionne les trois caméras sur les 24 dernière heures ; on prend une photo toutes les n minutes.\u0026#34;\u0026#34;\u0026#34; maintenant = local_tz.localize(datetime.now()) #voir http://pytz.sourceforge.net/ latest_photo_list_1 = Photo.objects.filter(appareil=1).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_2 = Photo.objects.filter(appareil=2).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_py = Photo.objects.filter(appareil=3).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_1_oneoutofN = [] latest_photo_list_2_oneoutofN = [] latest_photo_list_py_oneoutofN = [] for photo in latest_photo_list_1: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_1_oneoutofN.append(photo) for photo in latest_photo_list_2: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_2_oneoutofN.append(photo) for photo in latest_photo_list_py: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_py_oneoutofN.append(photo) min_length = min(len(latest_photo_list_1_oneoutofN), len(latest_photo_list_2_oneoutofN), len(latest_photo_list_py_oneoutofN)) latest_photo_list_group = [] #groupe les photos par trois (une par caméra) for i in range(min_length): new_group = [latest_photo_list_1_oneoutofN[i], latest_photo_list_2_oneoutofN[i], latest_photo_list_py_oneoutofN[i]] latest_photo_list_group.extend(new_group) context = { \u0026#39;latest_photo_list_group\u0026#39;: latest_photo_list_group, } return render(request, \u0026#34;{}/historique.html\u0026#34;.format(appli), context) def nuit(request): #lieu = SunTimes(longitude, latitude, altitude, zone) lieu = SunTimes(longitude, latitude, altitude) maintenant = local_tz.localize(datetime.now()) #voir http://pytz.sourceforge.net/ lever = lieu.riselocal(maintenant) coucher = lieu.setlocal(maintenant) coucherHier = lieu.setlocal(maintenant - timedelta(1)) leverDemain = lieu.riselocal(maintenant + timedelta(1)) if lever \u0026lt;= maintenant \u0026lt;= coucher: #on est en journée ; on sélectionne les photos allant du coucher de la veille au lever de ce jour night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucherHier, date__lt=lever).order_by(\u0026#39;-date\u0026#39;) horaire = [lever.strftime(\u0026#39;%Hh %Mmn\u0026#39;), lever.day, lever.month, coucherHier.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucherHier.day, coucherHier.month] elif maintenant \u0026lt; lever: #On est après minuit, mais avant le lever. On sélectionne les photos de coucherHier à maintenant night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucherHier).order_by(\u0026#39;-date\u0026#39;) horaire = [lever.strftime(\u0026#39;%Hh %Mmn\u0026#39;), lever.day, lever.month, coucherHier.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucherHier.day, coucherHier.month] else: #on est avant minuit mais après le coucher. On sélectionne les photos de coucher à maintenant night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucher).order_by(\u0026#39;-date\u0026#39;) horaire = [leverDemain.strftime(\u0026#39;%Hh %Mmn\u0026#39;), leverDemain.day, leverDemain.month, coucher.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucher.day, coucher.month] night_photo_list_oneoutofN = [] for photo in night_photo_list: #pour ne sélectionner qu\u0026#39;une photo sur N if (maintenant - photo.date).seconds // hz_capture % hz_nuit == 0: night_photo_list_oneoutofN.append(photo) context = { \u0026#39;night_photo_list_oneoutofN\u0026#39;: night_photo_list_oneoutofN, \u0026#39;horaire\u0026#39;: horaire } return render(request, \u0026#34;{}/nuit.html\u0026#34;.format(appli), context) def parheure(request): \u0026#34;\u0026#34;\u0026#34;On visionne les trois caméras sur les 24 dernière heures ; la pagination se fera heure par heure.\u0026#34;\u0026#34;\u0026#34; latest_photo_list_1 = Photo.objects.filter(appareil=1).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_2 = Photo.objects.filter(appareil=2).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_py = Photo.objects.filter(appareil=3).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] min_length = min(len(latest_photo_list_1), len(latest_photo_list_2), len(latest_photo_list_py)) latest_photo_list_group = [] for i in range(min_length): new_group = [latest_photo_list_1[i], latest_photo_list_2[i], latest_photo_list_py[i]] latest_photo_list_group.extend(new_group) paginator = Paginator(latest_photo_list_group, 180) page = request.GET.get(\u0026#39;page\u0026#39;) photos = paginator.get_page(page) context = { \u0026#39;photos\u0026#39;: photos, } return render(request, \u0026#34;{}/parHeure.html\u0026#34;.format(appli), context) def stream_py(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rpi)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_py.html\u0026#34;.format(appli), context) def stream_1(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp1)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_1.html\u0026#34;.format(appli), context) def stream_2(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp2)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_2.html\u0026#34;.format(appli), context) def stream_AllCam(request): stream = [\u0026#34;/{}?action=stream\u0026#34;.format(Rp1),\u0026#34;/{}?action=stream\u0026#34;.format(Rp2), \u0026#34;/{}?action=stream\u0026#34;.format(Rpi) ] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_AllCam.html\u0026#34;.format(appli), context) "},{"id":29,"href":"/script/project-camera_conf_V3/","title":"project-camera.conf V3","parent":"Scripts","content":"#mis en dehors du virtual host voir https://stackoverflow.com/questions/47803081/certbot-apache-error-name-duplicates-previous-wsgi-daemon-definition WSGIDaemonProcess project-camera.com python-home=/home/pi/folder/folder_venv python-path=/home/pi/folder/project \u0026lt;VirtualHost *:80\u0026gt; #!!!REMPLACER \u0026lt;site name\u0026gt; par le nom de votre site (par exemple, monprojet.sytes.net) ServerName \u0026lt;site name\u0026gt; ServerAlias www.\u0026lt;site name\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; #pour forcer authentification accès site \u0026lt;Location \u0026#34;/\u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; #Pour accéder aux flux depuis l\u0026#39;extérieur du réseau #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l\u0026#39;IP locale de votre Raspberry # Si vous avez d\u0026#39;autres ports pour les caméras, modifiez les en conséquence ProxyPass /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPassReverse /Rp1 http://\u0026lt;local IP Raspberry\u0026gt;:8081/ ProxyPass /Rp2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPassReverse /Rp_2 http://\u0026lt;local IP Raspberry\u0026gt;:8082/ ProxyPass /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ ProxyPassReverse /Rpi http://\u0026lt;local IP Raspberry\u0026gt;:8084/ \u0026lt;/VirtualHost\u0026gt; # Pour éliminer erreur AH00558 ServerName 127.0.0.1 "},{"id":30,"href":"/tuto/part5/","title":"Tutoriel : Partie 5 - Accès depuis l\u0026rsquo;extérieur du réseau","parent":"Tutos","content":"A faire S\u0026rsquo;inscrire à un site DynDNS et obtenir un nom de domaine Déclarer le site sur la box Configurer le site Apache Modifier le fichier views.py de Django Disposer d\u0026rsquo;une adresse mail Vous pouvez utiliser une de vos adresses mail existantes Sinon, en créer une réservée uniquement à ce projet. Il est préférable de choisir un opérateur qui accepte les IP dynamiques pour le protocole SMTP. Les adresses gmail ne sont pas nécessairement les meilleures à ce point de vue. laposte.net (même si c’est moins glamour) ne pose pas de problèmes de cet ordre. protonmail.com n\u0026rsquo;accepte le protocole SMTP que dans les versions payantes. S’inscrire à un site DynDNS et obtenir un nom de domaine Pourquoi et chez qui ? Le serveur DNS permettra de traduire le nom de domaine en adresse IP (l’IP publique de votre box). Les IP publiques n’étant pas nécessairement fixes, le DNS dynamique transférera l’adresse IP évolutive vers un nom de domaine fixe. Quelques fournisseurs de DNS dynamiques proposent des offres gratuites. Mais tous ne sont pas compatibles avec les box dont nous disposons, notamment la livebox d’Orange. Malgré ses contraintes (nécessité de réactiver son abonnement gratuit tous les mois) No-IP a l’avantage d’être performant. La box d\u0026rsquo;Orange propose maintenant (octobre 2023) le protocole GnuDIP. dynu.com propose un service gratuit pour lequel il n\u0026rsquo;y a pas besoin de réactiver régulièrement le nom de domaine. On aurait pu prendre une autre option : acheter un nom de domaine chez un registraire pour quelques Euro par an et bénéficier du DynDNS de ce registraire. OVH est une option intéressante et un tutoriel très bien fait est disponible. Quelque soit l’option que vous choisissez, la marche à suivre sera globalement la même. Obtenir un nom de domaine chez No-Ip Aller sur le site de No-Ip Créer sur la page d’accueil le nom d’hôte gratuit de votre choix Remplir le formulaire en indiquant son adresse mail, un mot de passe Valider en prenant l’inscription gratuite Confirmer l’inscription en validant le lien reçu sur sa boîte mail Connectez-vous à votre compte Si vous consultez votre Tableau de bord vous avez les informations sur votre site : le nom, la date d’expiration (vous devrez réactiver votre abonnement à l’échéance), l’adresse IP cible (celle de votre box). Obtenir un nom de domaine chez dynu.com (GnuDIP) Aller sur la page d\u0026rsquo;inscription de dynu.com Remplir le formulaire en indiquant son adresse mail, un mot de passe (entre 4 et 20 caractères) Cliquer sur Soumettre Confirmer l\u0026rsquo;adresse mail via le mail de vérification. Attention : celui-ci a pu être placé dans les mails indésirables. Se connecter Dans le menu, choisir : DDNS -\u0026gt; S\u0026rsquo;INSCRIRE Renseigner le nom d\u0026rsquo;hôte désiré et cliquer sur +Ajouter Aller dans son compte pour modifier certains paramètres, notamment le fuseau horaire Note du 30 septembre 2024 : ce service est utilisé depuis septembre 2023, sans aucun problème. Il n\u0026rsquo;y a notamment aucune obligation de réactiver le compte chaque mois comme avec No-Ip Modifications sur la box Quelques modifications sont à apporter au niveau de la box. Disposant d’une livebox de chez Orange, la marche à suivre que je donne se réfère à ce type de box ; mais elle est grosso modo la même chez les autres opérateurs. Entrer dans le menu de sa box Dans un navigateur taper 192.168.1.1 (pour une livebox Orange) A l’invite de commande taper le mot de passe de sa box Ouvrir la fenêtre Réseau en sélectionnant la touche correspondante Modifier le NAT/PAT Aller à l’onglet NAT/PAT A noter que si vous avez modifié le port externe SSH de votre raspberry, vous devez voir apparaître la règle correspondante de redirection de port Remplissez la ligne saisissable La première colonne est libre, choisissez Secure Web Serveur ou nouveau Pour le port interne, saisissez 80 qui est le port par défaut de Apache Pour le port externe, saisissez 80 Laissez le protocole à TCP Équipement : choisissez le nom de la raspberry ou saisissez son adresse IP locale. Validez avec le bouton Créer Modifier le DynDNS Allez à l’onglet DynDNS Remplissez la ligne saisissable Service : choisir son fournisseur : No-IP ou GnuDIP selon votre choix (c\u0026rsquo;est cette liste qui est limitative et ne propose que quelques fournisseurs) Nom d’hôte/de domaine : mettre le nom de domaine attribué par le fournisseur Email utilisateur : l’adresse mail avec laquelle vous vous êtes inscrit chez le fournisseur Mot de Passe : votre mot de passe chez le fournisseur (et non pas celui du mail, bien sûr) Validez avec le bouton « Enregistrer » Modifier le fichier de configuration Apache Ouvrir le fichier\nsudo nano /etc/apache2/sites-available/project-camera.conf Commentez ou supprimez la ligne\nServerName \u0026lt;IP locale de la Raspberry\u0026gt; (par exemple 192.168.1.49)\nA la place copiez les deux lignes suivantes\nServerName\t\u0026lt;nom du site\u0026gt; ServerAlias\twww.\u0026lt;nom du site\u0026gt; Si votre site s\u0026rsquo;appelle monprojet.freeddns.org, par exemple, les deux lignes seront\nServerName\tmonprojet.freeddns.org ServerAlias\twww.monprojet.freeddns.org A la fin du fichier, avant la balise fermante \u0026lt;/VirtualHost\u0026gt; copier les lignes suivantes :\nProxyPass /Rp1 http://\u0026lt;local IP Raspbery\u0026gt;:8081/ ProxyPassReverse /Rp1 http://\u0026lt;local IP Raspbery\u0026gt;:8081/ ProxyPass /Rp2 http://\u0026lt;local IP Raspbery\u0026gt;:8082/ ProxyPassReverse /Rp2 http://\u0026lt;local IP Raspbery\u0026gt;:8082/ ProxyPass /Rpi http://\u0026lt;local IP Raspbery\u0026gt;:8084/ ProxyPassReverse /Rpi http://\u0026lt;local IP Raspbery\u0026gt;:8084/ En remplaçant \u0026lt;local IP Raspberry\u0026gt; par l\u0026rsquo;IP locale de votre Raspberry.\nSi vous avez choisi des valeurs autres que 8081, 8082 et 8084 pour les ports mjpg-streamer des caméras, vous devez les modifier en conséquence.\nDe même si vous avec pris d\u0026rsquo;autes valeurs pour les clés proxy de la section [hosts] du fichier de configuration, vous devez également les modifier.\nVos lignes doivent ressembler à ceci\nProxyPass /Rp1 http://192.168.1.49:8081/ ProxyPassReverse /Rp1 http://192.168.1.49:8081/ ProxyPass /Rp2 http://192.168.1.49:8082/ ProxyPassReverse /Rp2 http://192.168.1.49:8082/ ProxyPass /Rpi http://192.168.1.49:8084/ ProxyPassReverse /Rpi http://192.168.1.49:8084/ A modifier en fonction des ports mjpg-streamer que vous avez attribués aux différentes caméras et en fonction de l’adresse IP locale de votre raspberry.\nLe contenu du fichier doit être semblable à celui du fichier project-camera.conf V3 disponible ici\nModifier le fichier de configuration de Django Ouvrir le fichier nano ~/folder/project/project/settings.py Ajoute le site dans ALLOWED_HOSTS ALLOWED_HOSTS = [\u0026#39;\u0026lt;IP locale de la Raspberry\u0026gt;\u0026#39;, \u0026#39;\u0026lt;nom du site\u0026gt;’, ] Par exemple : ALLOWED_HOSTS = [\u0026#39;192.168.1.49\u0026#39;, \u0026#39;monprojet.freeddns.org\u0026#39;, ] Mode Proxy et fichier views.py Pour accéder au flux de mjpg-streamer depuis l’extérieur, il faut activer le module proxy de Apache et modifier le fichier views.py Ouvrir le fichier views.py nano ~/folder/project/camera/views.py Modifier les différentes fonctions stream en remplaçant \u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_1_port) \u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_2_port) \u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_py_port) par : \u0026#34;/{}?action=stream\u0026#34;.format(Rp1) \u0026#34;/{}?action=stream\u0026#34;.format(Rp2) \u0026#34;/{}?action=stream\u0026#34;.format(Rpi) Ajouter en haut du fichier, au niveau de la déclaration des variables du parser du fichier de configuration, les variables RP1, RP2 et RPi Rp1 = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_1\u0026#34;) Rp2 = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_2\u0026#34;) Rpi = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;proxy_py\u0026#34;) Le contenu du fichier doit être semblable à celui du fichier views.py V2 disponible ici. Activer le module proxy_http sudo a2enmod proxy_http Redémarrer Apache pour prendre en compte les changements sudo systemctl restart apache2 Accès au site Si tout se passe bien L\u0026rsquo;accès au site se fait depuis la barre d\u0026rsquo;adresse d\u0026rsquo;un navigateur en tapant \u0026lt;nom du site\u0026gt;/camera par exemple, si votre site s\u0026rsquo;appelle monprojet.freeddns.org : monprojet.freeddns.org/camera Vous pouvez vérifier que même en dehors du réseau local vous avez accès au site. Problème avec l\u0026rsquo;IPv6 Il est possible que l\u0026rsquo;accès au site ne soit pas possible pour des problèmes liés à l\u0026rsquo;IPv6 Dans la box, se rendre dans Réseau \u0026ndash;\u0026gt; Ipv6 Décocher la case Activer la connectivité IPv6 NoIP ne pointant pas sur l\u0026rsquo;adresse IPv6 (du moins en octobre 2023), il n\u0026rsquo;y a pas de problème Par contre dynu.com pointant sur l\u0026rsquo;IPv6, vous pouvez être confronté à cette difficulté Voir la discussion de serveurfault.com En décochant la connectivité IPv6, vous perdez de possibles connexions en IPv6 pour d\u0026rsquo;autres usages Si vous n\u0026rsquo;avez pas d\u0026rsquo;accès au site depuis le réseau local Il est possible que vous ayez accès au site depuis l\u0026rsquo;extérieur (par exemple depuis un téléphone portable dont la wifi a été coupée), mais pas depuis un appareil qui est sur le réseau local. Cela peut être dû, entre autre, à des problèmes d’autorisations et de paramétrages de la box. Solution risquée à proscrire : modifier la DMZ Sauf si vous savez exactement ce que vous faites, il est déconseillé de modifier la DMZ au niveau de la box. Entrer dans les paramètres Réseau de la box Cliquer sur l’onglet DMZ Intégrer la raspberry comme équipement de la DMZ La connexion au site se fera depuis le réseau local avec la même commande \u0026lt;nom du site\u0026gt;/camera Solution moins élégante mais efficace et plus sûre faire une copie du fichier /etc/apache2/ports.conf sudo cp /etc/apache2/ports.conf /etc/apache2/ports.confORIGINAL ouvrir le fichier en écriture sudo nano /etc/apache2/ports.conf ajouter un port (mettre un port peu utilisé, par exemple 54321) en ajoutant une ligne Listen 54321 ouvrir le fichier /etc/apache2/sites-available/project-camera.conf sudo nano /etc/apache2/sites-available/project-camera.conf ajouter un \u0026lt;VirtualHost *:54321\u0026gt; identique au \u0026lt;VirtualHost *:80\u0026gt;, à la différence près que le ServerName sera l\u0026rsquo;IP locale de la Raspberry. le fichier doit être semblable au fichier project-camera.conf V4 disponible ici. l’accès depuis un appareil local se fait en tapant dans un navigateur : \u0026lt;adresse IP locale Raspberry\u0026gt;:\u0026lt;port apache\u0026gt;/camera par exemple : 192.168.1.49:54321/camera A ce stade - Prochaine étape A ce stade Vous disposez d’un nom de site Votre site web est accessible depuis l’extérieur du réseau Il n’est pas https : vos données ne sont pas cryptées et peuvent donc être interceptées par des personnes mal intentionnées. Prochaine étape Sécuriser la connexion en https "},{"id":31,"href":"/script/wsgi_py/","title":"wsgi.py","parent":"Scripts","content":"\u0026#34;\u0026#34;\u0026#34; WSGI config for project project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/ \u0026#34;\u0026#34;\u0026#34; import os import sys from django.core.wsgi import get_wsgi_application os.environ.setdefault(\u0026#39;DJANGO_SETTINGS_MODULE\u0026#39;, \u0026#39;project.settings\u0026#39;) sys.path.append(\u0026#39;/home/pi/folder/project\u0026#39;) sys.path.append(\u0026#39;/home/pi/folder/project/project\u0026#39;) application = get_wsgi_application() "},{"id":32,"href":"/script/project-camera_conf_V2/","title":"project-camera.conf V2","parent":"Scripts","content":"#mis en dehors du virtual host voir https://stackoverflow.com/questions/47803081/certbot-apache-error-name-duplicates-previous-wsgi-daemon-definition WSGIDaemonProcess project-camera.com python-home=/home/pi/folder/folder_venv python-path=/home/pi/folder/project \u0026lt;VirtualHost *:80\u0026gt; #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l’IP de la Raspberry ; par exemple : ServerName 192.168.1.49 ServerName \u0026lt;local IP Raspberry\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; #pour forcer authentification accès site \u0026lt;Location \u0026#34;/\u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; \u0026lt;/VirtualHost\u0026gt; # Pour éliminer erreur AH00558 ServerName 127.0.0.1 "},{"id":33,"href":"/script/project-camera_conf_V1/","title":"project-camera.conf V1","parent":"Scripts","content":"#mis en dehors du virtual host voir https://stackoverflow.com/questions/47803081/certbot-apache-error-name-duplicates-previous-wsgi-daemon-definition WSGIDaemonProcess project-camera.com python-home=/home/pi/folder/folder_venv python-path=/home/pi/folder/project \u0026lt;VirtualHost *:80\u0026gt; #!!!REMPLACER \u0026lt;local IP Raspberry\u0026gt; par l’IP de la Raspberry ; par exemple : ServerName 192.168.1.49 ServerName \u0026lt;local IP Raspberry\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined Alias /static/ /var/www/stock/ \u0026lt;Directory /var/www/stock\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /home/pi/folder/project/camera/static\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; WSGIScriptAlias / /home/pi/folder/project/project/wsgi.py WSGIProcessGroup project-camera.com \u0026lt;Directory /home/pi/folder/project/project\u0026gt; \u0026lt;Files wsgi.py\u0026gt; Require all granted \u0026lt;/Files\u0026gt; \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; # Pour éliminer erreur AH00558 ServerName 127.0.0.1 "},{"id":34,"href":"/tuto/part4/","title":"Tutoriel : Partie 4 - Installation de Apache et mod-wsgi","parent":"Tutos","content":"A faire Installer le serveur Apache sur la raspberry Installer et activer le module mod-wsgi, qui va servir d\u0026rsquo;interface entre Django et Apache Créer un fichier de configuration de site et l\u0026rsquo;activer Restreindre l\u0026rsquo;accès au site en forçant l\u0026rsquo;authentification de l\u0026rsquo;utilisateur Installation de Apache Mise à jour de raspbian si l\u0026rsquo;installation n\u0026rsquo;est pas récente sudo apt update sudo apt upgrade Installation de apache (répondre Oui aux invites de commande) sudo apt install apache2 Vérifier l\u0026rsquo;installation et la version sudo apache2ctl -v Vérifier la page d\u0026rsquo;accueil de apache en tapant \u0026lt;local IP Raspberry\u0026gt;:80 dans la barre d\u0026rsquo;un navigateur, vous devez voir la page d\u0026rsquo;accueil de Apache (80 est le port par défaut du serveur apache). Copie de différents fichiers de configuration Avant de modifier différents fichiers de configuration de apache2, il est souhaitable de faire une copie du fichier original, par exemple en ajoutant ORIGINAL en fin de nom du fichier. Copie des fichiers apache2.conf, security.conf, localized-error-pages.conf sudo cp /etc/apache2/apache2.conf /etc/apache2/apache2.confORIGINAL sudo cp /etc/apache2/conf-available/security.conf /etc/apache2/conf-available/security.confORIGINAL sudo cp /etc/apache2/conf-available/localized-error-pages.conf /etc/apache2/conf-available/localized-error-pages.confORIGINAL Sécurisation minimale du serveur apache Suivre les instructions de la page wiki.debian Modifier security.conf Ouvrir en écriture le fichier security.conf sudo nano /etc/apache2/conf-available/security.conf Modifier le fichier comme suit modifier ServerTokens Prod (et non OS) modifier ServerSignature Off (et non On) laisser TraceEnable Off décommenter Header set X-Content-Type-Options: \u0026quot;nosniff\u0026quot; (enlever le #) décommenter Header set X-Frame-Options: \u0026quot;sameorigin\u0026quot; (enlever le #) Activer le module headers Les lignes Header set ... du fichier ayant été décommentées, il faut activer le module headers Activer le module sudo a2enmod headers Modifier la page d\u0026rsquo;accueil Apache Supprimer la page d\u0026rsquo;accueil et la remplacer par une nouvelle page sudo rm /var/www/html/index.html sudo nano /var/www/html/index.html Copier, par exemple, le script suivant dans cette nouvelle page \u0026lt;html\u0026gt; PAGE INACCESSIBLE \u0026lt;/html\u0026gt; Créer une page d\u0026rsquo;erreur 404 Créer la page sudo nano /var/www/html/missing.html Copier, par exemple, le script suivant dans cette nouvelle page \u0026lt;html\u0026gt; DOCUMENT INEXISTANT\u0026lt;br\u0026gt; MISSING DOCUMENT \u0026lt;/html\u0026gt; Modifier /etc/apache2/conf-available/localized-error-pages.conf Ouvrir le fichier en écriture sudo nano /etc/apache2/conf-available/localized-error-pages.conf Décommenter la ligne ErrorDocument 404 /missing.html Prendre en compte les modifications en redémarrant apache2 sudo systemctl restart apache2 Installer le module mod-wsgi Sources djangoprojcet modwsgi pypi.org Installer apxs sudo apt install apache2-dev Installer le module dans l’environnement virtuel (venv) pip install mod_wsgi Se mettre dans le répertoire des packages python de l’environnement virtuel (venv) cd /home/pi/folder/folder_venv/lib/python3.7/site-packages ce chemin peut être modifié en fonction de la version de python pour savoir où sont les packages de python lire le retour de la commande : (venv) python -c \u0026#34;from distutils.sysconfig import get_python_lib; print(get_python_lib())\u0026#34; Depuis ce répertoire lancer la commande (venv) mod_wsgi-express module-config On obtient une sortie du type : LoadModule wsgi_module \u0026#34;/home/pi/folder/folder_venv/lib/python3.7/site-packages/mod_wsgi/server/mod_wsgi-py37.cpython-37m-arm-linux-gnueabihf.so\u0026#34; WSGIPythonHome \u0026#34;/home/pi/folder/folder_venv\u0026#34; Copier ces deux lignes Vous pouvez quitter l\u0026rsquo;environnement virtuel (commande : deactivate) Créer un fichier wsgi.load dans /etc/apache2/mods-available sudo nano /etc/apache2/mods-available/wsgi.load Dans ce fichier coller les deux lignes récupérées précédemment : LoadModule wsgi_module \u0026#34;/home/pi/folder/folder_venv/lib/python3.7/site-packages/mod_wsgi/server/mod_wsgi-py37.cpython-37m-arm-linux-gnueabihf.so\u0026#34; WSGIPythonHome \u0026#34;/home/pi/folder/folder_venv\u0026#34; (A modifier en fonction de la sortie obtenue) Activer le module mod-wsgi sudo a2enmod wsgi Redémarrer le service apache sudo systemctl restart apache2 Le module wsgi est visible dans le dossier /etc/apache2/mods-enabled Donner les droits à www-data et à l\u0026rsquo;utilisateur pi L\u0026rsquo;attribution des droits sous linux est une plaie sans nom. Les droits attribués ici ne sont pas nécessairement les plus pertinents, mais ils permettent un bon fonctionnement du serveur. Une mauvaise attribution des droits peut empêcher d\u0026rsquo;accéder au site, de visualiser les images ou de bénéficier de la présentation du css. Créer un groupe varwwwusers composé de pi et de www-data sudo group add varwwwusers Ajouter pi et www-data au groupe varwwwusers sudo adduser pi varwwwusers sudo adduser www-data varwwwusers (www-data est l\u0026rsquo;utilisateur qui exécute Apache et qui appartient au groupe www-data) Changer le propriétaire du répertoire /var/www/stock et de ses sous-répertoires sudo chown -R pi:varwwwusers /var/www/stock Modifier les droits lecture/écriture/éxecution (rwx) de /var/www/stock et de ses sous-répertoires sudo chmod -R 750 /var/www/stock Modifier le propriétaire du fichier ~/folder/project/db.sqlite3 sudo chown pi:www-data ~/folder/project/db.sqlite3 Modifier les droits rwx du fichier ~/folder/project/db.sqlite3 sudo chmod 770 ~/folder/project/db.sqlite3 Créer un fichier de configuration de site et l’activer On va créer dans /etc/apache2/sites-available un fichier de configuration de site. On peut donner le nom que l\u0026rsquo;on veut à ce fichier. J\u0026rsquo;ai choisi project-camera.conf et il est fortement conseillé de ne pas changer ce nom, sinon il faudra le modifier au sein même du fichier lorsqu\u0026rsquo;il apparaît. Créer et ouvrir en écriture le fichier de configuration de site (appelé project-camera.conf) sudo nano /etc/apache2/sites-available/project-camera.conf Copier/coller dans ce fichier le contenu du fichier project-camera.conf_V1 disponible ici Modifications à apporter ServerName : mettre l\u0026rsquo;adresse IP locale de la Raspberry Modifier les différents chemins de fichiers si vous n\u0026rsquo;avez pas gardé les chemins par défaut Enregistrer et quitter : Ctrl+0 - Entrée - Ctrl+X (sous nano) Activer le site sudo a2ensite project-camera Activer la nouvelle configuration sudo systemctl reload apache2 On aura un accès au site sur le port 80, qui est le port par défaut de Apache. Copier les fichiers statiques Pour que Apache lise les fichiers statiques (css et logo) de l\u0026rsquo;application caméra, il faut les déplacer dans /var/www/stock Méthode collectstatic (déconseillée) cette méthode utilise la commande collectstatic du script manage.py (venv) python ~/folder/project manage.py collectstatic L\u0026rsquo;inconvénient est que les images déjà stockées sont considérées comme statiques par Django et qu\u0026rsquo;elles seront à nouveau copiées ! Méthode manuelle (conseillée) Le nombre de fichiers statiques étant limité, le plus simple est de les transférer manuellement Lancer la commande (inutile d\u0026rsquo;être en sudo, le dossier de destination apprtenant maintenant à l\u0026rsquo;utilisateur pi) cp -r ~/folder/project/camera/static/camera /var/www/stock L\u0026rsquo;arborescence du dossier /var/www/stock doit être la suivante\nModifier le fichier settings.py Ouvrir en écriture le fichier settings.py nano ~/folder/project/project/settings.py Mettre la valeur DEBUG à False DEBUG = False Masquer la clé de sécurité Copier la valeur de SECRET_KEY Créer et ouvrir en écriture /etc/camera/secret_key.txt sudo nano /etc/camera/secret_key.txt Coller la valeur de SECRET_KEY dans ce fichier Remplacer la ligne SECRET_KEY = '\u0026lt;votre SECRET_KEY\u0026gt;' par with open(‘/etc/camera/secret_key.txt’) as f: SECRET_KEY = f.read().strip() STATICFILES_DIRS : Modifier ainsi le contenu (en l\u0026rsquo;adaptant éventuellement en fonction des chemins des dossiers) STATICFILES_DIRS = [ BASE_DIR / \u0026#34;/home/pi/folder/project/camera/static\u0026#34;, \u0026#34;/var/www/stock\u0026#34; ] Nouvel accès au site Redémarrer apache pour prendre en compte les modifications sudo systemctl restart apache2 Accéder au site depuis un navigateur web en tapant \u0026lt;local IP Raspberry\u0026gt;/camera (par exemple : 192.168.1.49/camera) L\u0026rsquo;accès se fait par le port par défaut de Apache (80) qu\u0026rsquo;il est inutile de préciser Supprimer l\u0026rsquo;accès par le serveur de Django Le serveur de Django est maintenant inutile ; on peut supprimer ou commenter sa ligne de commande dans le crontab Ouvrir le crontab en écriture crontab -e Commenter (ou supprimer) la ligne #@reboot python3 /home/pi/script/runDjango.py Au prochain démarrage de la Raspberry, le serveur de Django ne se lancera plus. Restreindre l\u0026rsquo;accès au site Intérêt Tant que l\u0026rsquo;on est en réseau local, la restriction de l\u0026rsquo;accès au site n\u0026rsquo;est pas indispensable Elle le deviendra dès que le site sera accessible de l\u0026rsquo;extérieur du réseau, sinon n\u0026rsquo;importe qui pourra visionner le flux et les images des caméras depuis n\u0026rsquo;importe où ! On peut aussi avoir intérêt à restreindre cet accès même dans le réseau local. Déclarer les utilisateurs autorisés En passant par l\u0026rsquo;authentification de Django Django possède les outils pour forcer une authentification des usagers pour l\u0026rsquo;accès à un site. La procédure est expliquée dans djangoproject Cette méthode a échoué me concernant, soulevant une erreur AppRegistryNotReady: Apps aren't loaded yet que je n\u0026rsquo;ai pas réussi à réparer. Avec un fichier .htaccess de Apache Créer le fichier .htaccess dans /etc/apache2 sudo touch /etc/apache2/.htpasswd Créer un utilisateur, par exemple bar sudo htpasswd /etc/apache2/.htpasswd bar A l\u0026rsquo;invite de commande New password:, rentrer un mot de passe, éventuellement en le copiant/collant ; attention, rien ne s\u0026rsquo;affiche (c\u0026rsquo;est normal) ; puis valider avec la touche Entrée. A l\u0026rsquo;invite de commande Re-type new password:, rentrer à nouveau le mot de passe. Le message Adding password for user bar s\u0026rsquo;affiche. Créer autant d\u0026rsquo;utilisateurs que nécessaire en procédant de la même manière. Modifier le fichier project-camera.conf Il faut déclarer dans le fichier de configuration du site la restriction d\u0026rsquo;accès. Ouvrir le fichier en écriture sudo nano /etc/apache2/sites-available/project-camera.conf Le modifier en ajoutant avant la balise de fermeture \u0026lt;/VirtualHost\u0026gt; \u0026lt;Location \u0026#34;/\u0026#34;\u0026gt; AuthType Basic AuthName \u0026#34;Authentification obligatoire\u0026#34; AuthUserFile \u0026#34;/etc/apache2/.htpasswd\u0026#34; Require valid-user \u0026lt;/Location\u0026gt; Le fichier doit ressembler au contenu du fichier project-camera.conf_V2 disponible ici. Cette modification oblige le client à s\u0026rsquo;identifier lorsqu\u0026rsquo;il veut atteindre les pages sous l\u0026rsquo;url /, c\u0026rsquo;est à dire la totalité du site. Modifier le fichier wsgi.py Pour des raisons obscures, Apache soulève l’erreur suivante si on tente d’accéder au site sans modifier le fichier wsgi.py ModuleNotFoundError: No module named \u0026#39;project\u0026#39; Pour réparer cette erreur, ouvrir le fichier wsgi.py nano ~/folder/project/project/wsgi.py Et ajouter les trois lignes suivante import sys sys.path.append(\u0026#39;/home/pi/folder/project\u0026#39;) sys.path.append(\u0026#39;/home/pi/folder/project/project\u0026#39;) (A modifier en fonction du nom et du chemin de votre projet)\nVotre fichier doit ressembler au fichier wsgi.py disponible ici Accès au site Relancer Apache pour qu’il prenne en compte les modifications sudo systemctl restart apache2 Dans un navigateur en tapant \u0026lt;local IP Raspberry/camera (par exemple 192.168.1.49/camera), une demande d’identification apparaît Selon les navigateurs, vous pouvez enregistrer votre identifiant et son mot de passe. A ce stade - Prochaine étape A ce stade Vous disposez d’un site web qui fonctionne en local avec le serveur Apache Ce site est accessible depuis les différents appareils du réseau local en tapant dans la fenêtre d’un navigateur web \u0026lt;Local IP Raspberry\u0026gt;/camera Vous devez vous identifier pour accéder au site. Prochaine étape Accéder au site depuis l’extérieur du réseau Obtenir un nom de domaine Service Dyn-DNS "},{"id":35,"href":"/script/runDjango_py/","title":"runDjango.py","parent":"Scripts","content":"\u0026#34;\u0026#34;\u0026#34;Script python qui va lancer Django et rendre celui-ci accessible sur le réseau local A indiquer dans le crontab en @reboot\u0026#34;\u0026#34;\u0026#34; import subprocess from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) raspIp = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;raspIP\u0026#34;) home = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;home\u0026#34;) folder = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;folder\u0026#34;) venv = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;venv\u0026#34;) project = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;project\u0026#34;) django_port = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;django_port\u0026#34;) #command = \u0026#34;. {}/{}/{}/bin/activate \u0026amp;\u0026amp; python {}/{}/{}/manage.py runserver {}:{}\u0026#34;.format(home, folder, venv, home, folder, project, raspIp, django_port) command = \u0026#34;. {}/{}/{}/bin/activate \u0026amp;\u0026amp; python {}/{}/{}/manage.py runserver 0.0.0.0:{}\u0026#34;.format(home, folder, venv, home, folder, project, django_port) subprocess.run(command, shell=True) "},{"id":36,"href":"/script/suppressFiles_py/","title":"suppressFiles.py","parent":"Scripts","content":"#Script qui permet de supprimer les fichiers datant de plus de N jours. #On lance un cron pour supprimer régulièrement ces fichiers. #On élimine également les lignes correspondantes dans la base de données. from subprocess import run import sqlite3 from datetime import datetime, timedelta from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) home = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;home\u0026#34;) folder = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;folder\u0026#34;) project = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;project\u0026#34;) pathCamera_1 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_1\u0026#34;) pathCamera_2 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_2\u0026#34;) pathCamera_py = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_py\u0026#34;) stock = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;stock\u0026#34;) delay_delete = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;delay_delete\u0026#34;)) baseName = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;baseName\u0026#34;) baseBackUp = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;baseBackUp\u0026#34;) # path_db = \u0026#34;{}/{}/{}\u0026#34;.format(home, folder, project) path_db = f\u0026#39;{home}/{folder}/{project}\u0026#39; #commandes qui vont supprimer les fichiers de stock/ command_1 = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/{pathCamera_1}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] command_2 = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/{pathCamera_2}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] command_py = [\u0026#34;find\u0026#34;, f\u0026#39;{stock}/{pathCamera_py}\u0026#39;, \u0026#34;-mtime\u0026#34;, f\u0026#39;+{str(delay_delete)}\u0026#39;, \u0026#34;-delete\u0026#34;] run(command_1) run(command_2) run(command_py) #sauvegarder la base de données avant de la modifier (sécurité) command_cp = [\u0026#34;cp\u0026#34;, f\u0026#39;{path_db}/{baseName}\u0026#39;, f\u0026#39;{path_db}/{baseBackUp}\u0026#39;] run(command_cp) #suppression des lignes correspondantes de la base de données dateDel = datetime.now() - timedelta(delay_delete + 1) # conn = sqlite3.connect(\u0026#34;{}/{}/{}/{}\u0026#34;.format(home, folder, project, baseName)) conn = sqlite3.connect(f\u0026#39;{path_db}/{baseName}\u0026#39;) c = conn.cursor() c.execute(\u0026#34;DELETE FROM camera_photo WHERE date \u0026lt;= ?\u0026#34;, (dateDel,)) conn.commit() conn.close() "},{"id":37,"href":"/script/getCamerasAndRegister_py/","title":"getCamerasAndRegister.py","parent":"Scripts","content":"\u0026#34;\u0026#34;\u0026#34;Script python qui : prend une photo depuis chacune des caméras stocke cette photo dans le dossier ad hoc modifie la base de données pour indiquer la date, la camera, le nom de la photo et le chemin du fichier Dans la mesure où on est susceptible de prendre des photos rapprochées (moins de la minute), le cron est insuffisant On fait donc une boucle while infinie avec le delta temps pour prendre les photos en fonction du paramète [frequences][capture] du fichier /etc/camera/configuration.ini.\u0026#34;\u0026#34;\u0026#34; import subprocess from datetime import datetime from time import sleep, time import sqlite3 from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) host = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;local\u0026#34;) stock = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;stock\u0026#34;) pathCamera_1 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_1\u0026#34;) pathCamera_2 = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_2\u0026#34;) pathCamera_py = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;pathCamera_py\u0026#34;) home = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;home\u0026#34;) folder = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;folder\u0026#34;) project = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;project\u0026#34;) baseName = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;baseName\u0026#34;) cam_1_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_port\u0026#34;) cam_2_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_2_port\u0026#34;) cam_py_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_port\u0026#34;) capture = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;capture\u0026#34;)) appli = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;appli\u0026#34;) script = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;script\u0026#34;) path_1 = \u0026#34;{}/{}\u0026#34;.format(stock, pathCamera_1) path_2 = \u0026#34;{}/{}\u0026#34;.format(stock, pathCamera_2) path_py = \u0026#34;{}/{}\u0026#34;.format(stock, pathCamera_py) while True: sleep(capture -time() % capture) date, name = datetime.now(),datetime.now().strftime(\u0026#34;%d-%m_%H:%M:%S\u0026#34;) \u0026#34;\u0026#34;\u0026#34;On récupère les images snapshot et on les copie dans le dossier ad hoc\u0026#34;\u0026#34;\u0026#34; command_1 = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(host, cam_1_port, path_1, name) command_2 = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(host, cam_2_port, path_2, name) command_py = \u0026#39;wget http://{}:{}/?action=snapshot -O {}/{}.jpg\u0026#39;.format(host, cam_py_port, path_py, name) command = \u0026#39;{} \u0026amp; {} \u0026amp; {}\u0026#39;.format(command_1, command_2, command_py) subprocess.run(command, shell=True) \u0026#34;\u0026#34;\u0026#34;On copie dans la base de données les éléments relatifs aux images\u0026#34;\u0026#34;\u0026#34; conn = sqlite3.connect(\u0026#34;{}/{}/{}/{}\u0026#34;.format(home, folder, project, baseName)) c = conn.cursor() c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;1\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_1)) c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;2\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_2)) c.execute(\u0026#34;INSERT INTO {}_photo(date, appareil_id, name, path) VALUES (?, \u0026#39;3\u0026#39;, ?, ?)\u0026#34;.format(appli), (date, name, pathCamera_py)) conn.commit() conn.close() #si la boucle True s\u0026#39;interrompt, le script est relancé #command_replay = \u0026#34;python3 {}/getCamerasAndRegister.py\u0026#34;.format(script) #si la boucle True s\u0026#39;interrompt, la raspberry est reboutée command_replay = \u0026#34;sudo reboot\u0026#34; subprocess.run(command_replay, shell=True) "},{"id":38,"href":"/script/parHeure_html/","title":"parHeure.html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% load static %} {% block header %} \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;Photos par Heures\u0026lt;/h1\u0026gt;\u0026lt;br\u0026gt; {% endblock %} {% block content %} \u0026lt;p class=\u0026#34;monh2\u0026#34;\u0026gt;Page {{ photos.number }} / {{ photos.paginator.num_pages }}\u0026lt;/p\u0026gt; {% if photos.has_previous %} \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;?page={{ photos.previous_page_number }}\u0026#34;\u0026gt;Page Précédente\u0026lt;/a\u0026gt; {% endif %} {% if photos.has_next %} \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;?page={{ photos.next_page_number }}\u0026#34;\u0026gt;Page Suivante\u0026lt;/a\u0026gt; {% endif %} \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; {% for photo in photos %} \u0026lt;td\u0026gt;\u0026lt;img class=\u0026#34;centre-image imgSmall\u0026#34; src=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34; height=\u0026#34;150\u0026#34; width=\u0026#34;225\u0026#34; alt=\u0026#34;photo non disponible\u0026#34; loading=\u0026#34;lazy\u0026#34;/\u0026gt;\u0026lt;figcaption\u0026gt;{{photo.name}} - {{photo.appareil}}\u0026lt;/figcaption\u0026gt; \u0026lt;/td\u0026gt; {% if forloop.last %} \u0026lt;/tr\u0026gt; {% else %} {% if forloop.counter|divisibleby:\u0026#34;3\u0026#34; %} \u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt; {% endif %} {% endif %} {% endfor %} \u0026lt;/table\u0026gt; \u0026lt;br\u0026gt; {% if photos.has_other_pages %} \u0026lt;ul class=\u0026#34;pagination\u0026#34;\u0026gt; {% if photos.has_previous %} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;?page={{ photos.previous_page_number }}\u0026#34;\u0026gt;précédent\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% else %} \u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026amp;laquo;\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; {% endif %} {% for i in photos.paginator.page_range %} {% if photos.number == i %} \u0026lt;li class=\u0026#34;liActive\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; {% else %} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;?page={{ i }}\u0026#34;\u0026gt;{{ i }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% endif %} {% endfor %} {% if photos.has_next %} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;?page={{ photos.next_page_number }}\u0026#34;\u0026gt;suivant\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% else %} \u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026amp;raquo;\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; {% endif %} \u0026lt;/ul\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;span class=\u0026#34;spanPage\u0026#34;\u0026gt; Page {{ photos.number }} de {{ photos.paginator.num_pages }}. \u0026lt;/span\u0026gt; {% endif %} {% endblock %} "},{"id":39,"href":"/script/stream_AllCam_html/","title":"stream_AllCam.html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% block content %} \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;les 3 caméras en direct\u0026lt;/h2\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;stream_py\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.2}} alt=\u0026#34;Erreur sur la caméra nocturne\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA Nuit : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;stream_1\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.0}} alt=\u0026#34;Erreur sur la caméra 1\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 1: Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;stream_2\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.1}} alt=\u0026#34;Erreur sur la caméra 2\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 2 : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; {% endblock %} "},{"id":40,"href":"/script/stream_py_html/","title":"stream.py_html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% block content %} \u0026lt;h2 class=\u0026#34;monh2\u0026#34;\u0026gt;Caméra py en direct\u0026lt;/h2\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.0}} alt=\u0026#34;Erreur sur la caméra py\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA InfraRouge : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;/camera/stream_AllCam/\u0026#34;\u0026gt;Direct 3 Caméras\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;/camera/\u0026#34;\u0026gt;Accueil\u0026lt;/a\u0026gt; {% endblock %} "},{"id":41,"href":"/script/stream_2_html/","title":"stream.2_html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% block content %} \u0026lt;h2 class=\u0026#34;monh2\u0026#34;\u0026gt;Caméra 2 en direct\u0026lt;/h2\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.0}} alt=\u0026#34;Erreur sur la caméra 2\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 2 : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;/camera/stream_AllCam/\u0026#34;\u0026gt;Direct 3 Caméras\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;/camera/\u0026#34;\u0026gt;Accueil\u0026lt;/a\u0026gt; {% endblock %} "},{"id":42,"href":"/script/stream_1_html/","title":"stream_1.html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% block content %} \u0026lt;h2 class=\u0026#34;monh2\u0026#34;\u0026gt;Caméra 1 en direct\u0026lt;/h2\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src={{stream.0}} alt=\u0026#34;Erreur sur la caméra 1\u0026#34; width=\u0026#34;300\u0026#34; \u0026gt; \u0026lt;figcaption\u0026gt;CAMERA 1 : Streaming\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;/camera/stream_AllCam/\u0026#34;\u0026gt;Direct 3 Caméras\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;buttonLigne\u0026#34; href=\u0026#34;/camera/\u0026#34;\u0026gt;Accueil\u0026lt;/a\u0026gt; {% endblock %} "},{"id":43,"href":"/script/nuit_html/","title":"nuit.html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% load static %} {% block header %} \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;Photos de nuit\u0026lt;/h1\u0026gt; \u0026lt;pre\u0026gt; Coucher : {% if horaire %}{{ horaire.3 }} - le {{horaire.4}}/{{horaire.5}}{% endif %} Lever : {% if horaire %}{{ horaire.0 }} - le {{horaire.1}}/{{horaire.2}}{% endif %} \u0026lt;/pre\u0026gt; {% endblock %} {% block content %} \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; {% for photo in night_photo_list_oneoutofN %} \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34; height=\u0026#34;150\u0026#34; width=\u0026#34;225\u0026#34; alt=\u0026#34;photo nocturne indisponible\u0026#34; loading=\u0026#34;lazy\u0026#34;/\u0026gt;\u0026lt;figcaption\u0026gt;{{photo.name}} - {{photo.appareil}}\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; {% if forloop.last %} \u0026lt;/tr\u0026gt; {% else %} {% if forloop.counter|divisibleby:\u0026#34;3\u0026#34; %} \u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt; {% endif %} {% endif %} {% endfor %} \u0026lt;/table\u0026gt; {% endblock %} "},{"id":44,"href":"/script/historique_html/","title":"historique.html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% load static %} {% block header %} \u0026lt;h1 class=\u0026#34;monh1\u0026#34;\u0026gt;Historique Général\u0026lt;/h1\u0026gt; {% endblock %} {% block content %} \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; {% for photo in latest_photo_list_group %} \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;centre-image imgresponsive\u0026#34; src=\u0026#34;{% static photo.file_photo_jpg %}\u0026#34; height=\u0026#34;150\u0026#34; width=\u0026#34;225\u0026#34; alt=\u0026#34;photo non disponible\u0026#34; loading=\u0026#34;lazy\u0026#34;/\u0026gt;\u0026lt;figcaption\u0026gt;{{photo.name}} - {{photo.appareil}}\u0026lt;/figcaption\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; {% if forloop.last %} \u0026lt;/tr\u0026gt; {% else %} {% if forloop.counter|divisibleby:\u0026#34;3\u0026#34; %} \u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt; {% endif %} {% endif %} {% endfor %} \u0026lt;/table\u0026gt; {% endblock %} "},{"id":45,"href":"/script/accueil_html/","title":"accueil.html","parent":"Scripts","content":"{% extends \u0026#34;camera/base.html\u0026#34; %} {% block content %} \u0026lt;div class=\u0026#34;grid-One\u0026#34;\u0026gt; \u0026lt;div\u0026gt;Bienvenue sur le site de X\u0026amp;Y !!\u0026lt;br\u0026gt; Choisissez la page que vous souhaitez consulter. \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_AllCam/\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;En direct\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a href=\u0026#34;/camera/nuit/\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Nuit\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a href=\u0026#34;/camera/historique/\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Historique\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a href=\u0026#34;/camera/parHeure/\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Heure par Heure\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt; {% endblock %} "},{"id":46,"href":"/script/base_html/","title":"base.html","parent":"Scripts","content":"{% load static %} \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {% block title %}\u0026lt;title\u0026gt;X \u0026amp; Y\u0026lt;/title\u0026gt;{% endblock %} \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;{% static \u0026#39;camera/logo/logo.png\u0026#39; %}\u0026#34; type=\u0026#34;image/x-icon\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{% static \u0026#39;camera/css/global.css\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;script\u0026gt; function myFunction() { var x = document.getElementById(\u0026#34;myNavbar\u0026#34;); if (x.className === \u0026#34;navbar\u0026#34;) { x.className += \u0026#34; responsive\u0026#34;; } else { x.className = \u0026#34;navbar\u0026#34;; } } \u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; {% block navebar %} \u0026lt;div class=\u0026#39;navbar\u0026#39; id=\u0026#34;myNavbar\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/\u0026#34; \u0026gt;Accueil\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;dropbtn\u0026#34; href=\u0026#34;/camera/stream_AllCam/\u0026#34;\u0026gt;En Direct \u0026amp;ensp;\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;dropdown-content\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_AllCam/\u0026#34;\u0026gt;Les 3 Caméras\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_py/\u0026#34;\u0026gt;Caméra Py\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_1/\u0026#34;\u0026gt;Caméra 1\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/camera/stream_2/\u0026#34;\u0026gt;Caméra 2\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/nuit/\u0026#34;\u0026gt;La Nuit\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/historique/\u0026#34;\u0026gt;Historique\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/camera/parHeure/\u0026#34;\u0026gt;Par Heures\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;div class=\u0026#39;icon\u0026#39;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; onclick=\u0026#34;myFunction()\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-bars\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div \u0026gt; {% endblock %} \u0026lt;div class= \u0026#34;item_header\u0026#34;\u0026gt; {% block header %} {% endblock %} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item_main\u0026#34;\u0026gt; {% block content %} {% endblock %} \u0026lt;/div\u0026gt; \u0026lt;table class=\u0026#34;item_footer\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;img src=\u0026#34;{% static \u0026#39;camera/logo/logo.png\u0026#39; %}\u0026#34; alt=\u0026#34;?logo?\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;X \u0026amp; Y\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; "},{"id":47,"href":"/script/pagination_css/","title":"pagination.css","parent":"Scripts","content":"/* pagination */ .pagination a { color: white; float: left; /* padding: 8px 16px; */ padding: 5px; font-family: var(--main-ft-family); text-decoration: none; margin-bottom: 8px; } .liActive { background-color: #aaa; } .spanPage { display: block; /* padding: 8px 16px; */ margin-left: 40px; margin-top: 40px; color: #8A104D; } .pagination a:hover:not(.active) { background-color: gray; color:#8A104D; } .pagination li { display: inline; } .pagination a:not(active) { background-color: #8A104D; } .pagination a:active { background-color: #aaa; } "},{"id":48,"href":"/script/header_footer_css/","title":"header_footer.css","parent":"Scripts","content":".header { background-color: #8A104D; color: var(--main-color); padding: 15px; text-align: center; font-size: 25px; } .footer { text-align: left; background: var(--main-bg-color); color:#8A104D; font-size: 12px; /* position: fixed; */ margin-top: 54px; margin-left: 100px; /* left:80px; */ bottom:0px; height:54px; width: 100%; } "},{"id":49,"href":"/script/disposition_css/","title":"disposition.css","parent":"Scripts","content":":root { --main-bg-color: #f5efe0; --main-bg-color2: #4A4A4A; --main-bg-color3: #EAEAEA; --main-ft-family: \u0026#39;Pacifico\u0026#39;; --main-ft-size: 16px; --main-color: #cd2653; --main-color2: #a21e42; } * { box-sizing: border-box; } body { background-color: #ffdf9f9; } .row:after{ content: \u0026#34;\u0026#34;; display: table; clear: both; } /* pour avoir deux colonnes (notamment pour les photos doubles) */ .column2{ float: left; width: 50%; padding: 10px; } .grid-container { display: grid; grid-template-columns: 1fr; } .item_menu { grid-row: 1 ; grid-column: 1 / 2; background-color: #fdf9f9; } .item_header { grid-row: 2; grid-column: 1 / 2; background-color: #fdf9f9; padding: 15px; text-align: center; font-size: 20px; font-family: var(--main-ft-family); } .item_main { grid-row: 3; grid-column: 1 / 2; background-color: #fdf9f9); font-family: var(--main-ft-family); } .item_footer { /* grid-row: 4; grid-column: 1 / 2; */ text-align: left; /* background: var(--main-bg-color4); */ color: #8A104D; font-size: 14px; font-family: var(--main-ft-family); /* padding: 40px; */ vertical-align: middle; margin-top: 25px; margin-left: 100px; } "},{"id":50,"href":"/script/menu_css/","title":"menu.css","parent":"Scripts","content":".navbar ul { list-style-type: none; margin: 0; padding: 0; overflow: hidden; background-color: #8A104D; } .navbar li { float: left; } .navbar li a{ display: block; text-align: center; padding: 14px 16px; text-decoration: none; font-size:18px; font-weight: bold; color: #bebebe; background-color: #8A104D; } .icon { display:none; } .icon:hover{ color : pink; } .dropbtn { display: inline-block; color: green; text-align: left; padding: 14px 16px; text-decoration: none; } .navbar li a:hover, .dropdown:hover .dropbtn { background-color: #A6A6A6; color: white; } .dropdown-content { display: none; position: absolute; background-color: #505050; min-width: 100px; box-shadow: 0px 8px 8px 0px rgba(0,0,0,0.2); z-index: 10; } .dropdown .dropdown-content a{ /* color: green; */ padding: 8px 8px; text-decoration: none; /* display: block; */ text-align: left; } .dropdown-content a:hover {background-color: blue;} .dropdown:hover .dropdown-content { display: block; } .dropdown \u0026gt;a::after{ content: \u0026#34;▼\u0026#34;; font-size: 15px; } @media screen and (max-width: 600px) { /* For mobile phones: */ .navbar li:not(:first-child) { display: none; } .navbar .icon { float: right; display: block; } } @media screen and (max-width: 600px) { .navbar.responsive {position: relative;} .navbar.responsive .icon { position: absolute; right: 0; top: 0; } .navbar.responsive li { float: none; display: block; text-align: left; } } "},{"id":51,"href":"/script/bouton_css/","title":"bouton.css","parent":"Scripts","content":".button { display: table-cell; background-color: #8A104D; border: none; color: white; padding: 12px 12px; text-align: center; vertical-align: middle; text-decoration: none; display: inline-block; font-size: 15px; font-family: var(--main-ft-family); margin-bottom: 10px; margin-top: 10px; margin-left: 100px; cursor: pointer; width: 200px; height: 40px; } .buttonLigne { background-color: #8A104D; border: none; color: white; /* padding: 12px 12px; */ padding: 6px; text-align: center; vertical-align: middle; text-decoration: none; display: inline-block; font-size: 15px; font-family: var(--main-ft-family); margin-bottom: 10px; margin-top: 12px; margin-left: 8px; cursor: pointer; width: 200px; height: 35px; } "},{"id":52,"href":"/script/general_css/","title":"general.css","parent":"Scripts","content":"/* pour les fontes en fonction du type d\u0026#39;élément */ p { font-size: 18px; } pre { font-size: 18px; color: #8A104D; } h1 { font-size: 44px; color: #8A104D; } .monh1 { font-size: 25px; color: #8A104D; text-align: left; } .monh2 { font-size:16px; color: #8A104D; text-align: left; font-weight: bold; } /* traitement des images : centrer, ajuster... */ .centre-image { display: block; margin-left: auto; margin-right: auto; } .imgresponsive { width: 100%; max-width: 750px; height: auto; } .imgLogo { width: 150px; margin-right: 20px; } .imgSmall { width: 100%; max-width: 200px; height: auto; } /* Pour centrer tableau */ figcaption { font-size: 11px; text-align: left; vertical-align: bottom; } /* pour des containers selon le texte à disposer */ .grid-One { display: grid; grid-template-columns: 400px; grid-gap: 10px; /* background-color: #2196F3; */ padding: 10px; } .grid-One \u0026gt; div { text-align: center; font-size: 16px; color: #8A104D; font-weight: bold; } .grid-Three { display: grid; grid-template-columns: 100px 100px 100px; grid-gap: 10px; padding: 10px; } .grid-Three \u0026gt; div { text-align: center; font-size: 16px; color: #8A104D; font-weight: bold; } @media screen and (max-width: 600px) { /* For mobile phones: */ .monh1 { font-size : 32px; } .monp { font-size : 18px; } p { font-size: 11px; } .grid-container { display: grid; grid-template-columns: 1fr; width: 100%; } "},{"id":53,"href":"/script/views_py_V1/","title":"Views.py (V1)","parent":"Scripts","content":"from django.shortcuts import render, redirect from django.http import HttpResponse from django.core.paginator import Paginator from django.template.response import TemplateResponse from datetime import datetime, timedelta from django.utils import timezone import pytz #pour régler les problèmes d\u0026#39;heure naïve et consciente from pytz import timezone from suntimes import SunTimes from configparser import ConfigParser from .models import Photo, Appareil config_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(config_file) longitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;longitude\u0026#34;)) latitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;latitude\u0026#34;)) altitude = float(parser.get(\u0026#34;locate\u0026#34;, \u0026#34;altitude\u0026#34;)) zone = parser.get(\u0026#34;locate\u0026#34;, \u0026#34;zone\u0026#34;) hz_historique = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;historique\u0026#34;)) hz_nuit = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;nuit\u0026#34;)) hz_capture = int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;capture\u0026#34;)) raspIP = parser.get(\u0026#34;hosts\u0026#34;, \u0026#34;raspIP\u0026#34;) cam_1_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_port\u0026#34;) cam_2_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_2_port\u0026#34;) cam_py_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_port\u0026#34;) display_nombre = int(float(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;display_jour\u0026#34;)) * 3600 * 24 / hz_capture) appli = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;appli\u0026#34;) local_tz = timezone(zone) utc = pytz.utc def accueil(request): response = TemplateResponse(request, \u0026#34;{}/accueil.html\u0026#34;.format(appli)) return response def historique(request): maintenant = local_tz.localize(datetime.now()) #voir http://pytz.sourceforge.net/ latest_photo_list_1 = Photo.objects.filter(appareil=1).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_2 = Photo.objects.filter(appareil=2).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_py = Photo.objects.filter(appareil=3).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_1_oneoutofN = [] latest_photo_list_2_oneoutofN = [] latest_photo_list_py_oneoutofN = [] for photo in latest_photo_list_1: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_1_oneoutofN.append(photo) for photo in latest_photo_list_2: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_2_oneoutofN.append(photo) for photo in latest_photo_list_py: #pour ne sélectionner qu\u0026#39;une photo sur N if (photo.date - maintenant).seconds // hz_capture % hz_historique == 0: latest_photo_list_py_oneoutofN.append(photo) min_length = min(len(latest_photo_list_1_oneoutofN), len(latest_photo_list_2_oneoutofN), len(latest_photo_list_py_oneoutofN)) latest_photo_list_group = [] #groupe les photos par trois (une par caméra) for i in range(min_length): new_group = [latest_photo_list_1_oneoutofN[i], latest_photo_list_2_oneoutofN[i], latest_photo_list_py_oneoutofN[i]] latest_photo_list_group.extend(new_group) context = { \u0026#39;latest_photo_list_group\u0026#39;: latest_photo_list_group, } return render(request, \u0026#34;{}/historique.html\u0026#34;.format(appli), context) def nuit(request): #lieu = SunTimes(longitude, latitude, altitude, zone) lieu = SunTimes(longitude, latitude, altitude) maintenant = local_tz.localize(datetime.now()) #voir http://pytz.sourceforge.net/ lever = lieu.riselocal(maintenant) coucher = lieu.setlocal(maintenant) coucherHier = lieu.setlocal(maintenant - timedelta(1)) leverDemain = lieu.riselocal(maintenant + timedelta(1)) if lever \u0026lt;= maintenant \u0026lt;= coucher: #On est en journée ; on sélectionne les photos allant du coucher de la veille au lever de ce jour night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucherHier, date__lt=lever).order_by(\u0026#39;-date\u0026#39;) horaire = [lever.strftime(\u0026#39;%Hh %Mmn\u0026#39;), lever.day, lever.month, coucherHier.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucherHier.day, coucherHier.month] elif maintenant \u0026lt; lever: #On est après minuit, mais avant le lever. On sélectionne les photos de coucherHier à maintenant night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucherHier).order_by(\u0026#39;-date\u0026#39;) horaire = [lever.strftime(\u0026#39;%Hh %Mmn\u0026#39;), lever.day, lever.month, coucherHier.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucherHier.day, coucherHier.month] else: #On est avant minuit mais après le coucher. On sélectionne les photos de coucher à maintenant night_photo_list = Photo.objects.filter(appareil=3).filter(date__gt=coucher).order_by(\u0026#39;-date\u0026#39;) horaire = [leverDemain.strftime(\u0026#39;%Hh %Mmn\u0026#39;), leverDemain.day, leverDemain.month, coucher.strftime(\u0026#39;%Hh %Mmn\u0026#39;), coucher.day, coucher.month] night_photo_list_oneoutofN = [] for photo in night_photo_list: #pour ne sélectionner qu\u0026#39;une photo sur N if (maintenant - photo.date).seconds // hz_capture % hz_nuit == 0: night_photo_list_oneoutofN.append(photo) context = { \u0026#39;night_photo_list_oneoutofN\u0026#39;: night_photo_list_oneoutofN, \u0026#39;horaire\u0026#39;: horaire } return render(request, \u0026#34;{}/nuit.html\u0026#34;.format(appli), context) def parheure(request): latest_photo_list_1 = Photo.objects.filter(appareil=1).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_2 = Photo.objects.filter(appareil=2).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] latest_photo_list_py = Photo.objects.filter(appareil=3).order_by(\u0026#39;-date\u0026#39;)[:display_nombre] min_length = min(len(latest_photo_list_1), len(latest_photo_list_2), len(latest_photo_list_py)) latest_photo_list_group = [] for i in range(min_length): new_group = [latest_photo_list_1[i], latest_photo_list_2[i], latest_photo_list_py[i]] latest_photo_list_group.extend(new_group) paginator = Paginator(latest_photo_list_group, 180) page = request.GET.get(\u0026#39;page\u0026#39;) photos = paginator.get_page(page) context = { \u0026#39;photos\u0026#39;: photos, } return render(request, \u0026#34;{}/parHeure.html\u0026#34;.format(appli), context) def stream_py(request): stream = [\u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_py_port)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_py.html\u0026#34;.format(appli), context) def stream_1(request): stream = [\u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_1_port)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_1.html\u0026#34;.format(appli), context) def stream_2(request): stream = [\u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_2_port)] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_2.html\u0026#34;.format(appli), context) def stream_AllCam(request): stream = [\u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_1_port),\u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_2_port), \u0026#34;http://{}:{}/?action=stream\u0026#34;.format(raspIP, cam_py_port) ] context = { \u0026#39;stream\u0026#39;: stream, } return render(request, \u0026#34;{}/stream_AllCam.html\u0026#34;.format(appli), context) "},{"id":54,"href":"/script/urls_py_camera/","title":"urls.py (camera)","parent":"Scripts","content":"from django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;, views.accueil, name=\u0026#39;accueil\u0026#39;), path(\u0026#39;historique/\u0026#39;, views.historique, name=\u0026#39;historique\u0026#39;), path(\u0026#39;nuit/\u0026#39;, views.nuit, name=\u0026#39;nuit\u0026#39;), path(\u0026#39;parHeure/\u0026#39;, views.parheure, name=\u0026#39;parHeure\u0026#39;), path(\u0026#39;stream_py/\u0026#39;, views.stream_py, name=\u0026#34;stream_py\u0026#34;), path(\u0026#39;stream_1/\u0026#39;, views.stream_1, name=\u0026#34;stream_1\u0026#34;), path(\u0026#39;stream_2/\u0026#39;, views.stream_2, name=\u0026#34;stream_2\u0026#34;), path(\u0026#39;stream_AllCam/\u0026#39;, views.stream_AllCam, name=\u0026#34;stream_AllCam\u0026#34;) ] "},{"id":55,"href":"/script/urls_py_project/","title":"urls.py (project)","parent":"Scripts","content":"from django.contrib import admin from django.urls import path, include urlpatterns = [ path(\u0026#39;camera/\u0026#39;, include(\u0026#39;camera.urls\u0026#39;)), path(\u0026#39;admin/\u0026#39;, admin.site.urls), ] "},{"id":56,"href":"/script/models_py/","title":"models.py","parent":"Scripts","content":"from django.db import models from datetime import datetime class Appareil(models.Model): name = models.CharField(max_length=30) def __str__(self): return self.name class Photo(models.Model): appareil = models.ForeignKey(Appareil, on_delete=models.CASCADE) date = models.DateTimeField() #date de la photo : annee jour mois heure minute name = models.CharField(max_length=30) #nom de la photo tel que dans les dossiers de stockage /stock/camera_xxx path = models.CharField(max_length=100) #nom du dossier où est stockée la photo : camera_xxx ; chemin depuis stock/ (pour être reconnu par Django dans les fichiers static) def name_photo_jpg(self): return \u0026#34;{}.jpg\u0026#34;.format(self.name) def file_photo_jpg(self): return \u0026#34;{}/{}.jpg\u0026#34;.format(self.path, self.name) "},{"id":57,"href":"/tuto/part3/","title":"Tutoriel : Partie 3 - Installation de Django","parent":"Tutos","content":"A faire Créer un environnement virtuel pour y installer Django Installer Django Créer un projet Django et une application Procéder à certains réglages de Django Créer les modèles et les vues de l\u0026rsquo;application Créer des fichiers css et html (templates) Capturer et stocker des images fixes prises par les caméras Lancer le site Dossiers et environnement virtuel Pour éviter des problèmes de conflit entre python2 et python3, il est préférable d’installer Django dans un environnement virtuel. De manière à structurer les dossiers nous allons utiliser une arborescence de ce type :\nC’est dans folder que nous allons créer un environnement virtuel que nous appellerons folder_venv. Django sera installé dans cet environnement virtuel. Puis nous créerons un projet Django dans le dossier folder. Ce projet s’appellera project. Dans ce projet, nous créerons une application que nous appellerons camera. Vous pouvez choisir les noms folder et project que vous souhaitez (mais cela n\u0026rsquo;est pas souhaitable), à condition de les modifier dans le fichier configuration.ini (section [paths], clés folder et project). Il est très vivement conseillé de ne pas modifier le nom de l’application camera, sinon vous devrez changer le nom de l’application dans différents fichiers html ou python que nous créerons plus tard. Création d’un environnement virtuel Créer le dossier folder mkdir ~/folder Créer l’environnement virtuel cd ~/folder python3 -m venv folder_venv (Ne pas omettre le 3 de python) Activer l’environnement virtuel source ~/folder/folder_venv/bin/activate L’invite de commande ne sera plus du type : pi@Foo:~$ mais du type (folder_venv) pi@Foo:~$ N.B. : dorénavant, lorsque les commandes seront tapées dans l’environnement virtuel, elles seront précédées du symbole (venv)\nPour désactiver l’environnement virtuel taper la commande deactivate\n(venv) deactivate Installation de Django Se mettre en environnement virtuel : source ~/folder/folder_venv/bin/activate Installer Django (venv) python -m pip install Django Django va s’installer dans l’environnement virtuel. Ici le 3 de la commande python n’est plus utile car il n’y a plus d’ambiguïté de choix, seul python3 étant installé dans l’environnement virtuel. Vérifier l’installation et la version (venv) python -m django --version qui doit renvoyer une sortie du type : 4.0.2 (en fonction de la version)\nCréation du projet et de l’application Créer le projet project Se mettre dans le répertoire folder (en environnement virtuel) (venv) cd ~/folder Créer le projet (venv) django-admin startproject project L’arborescence du dossier folder est la suivante : Créer l’application camera Se mettre dans le même dossier que celui contenant manage.py, (venv) cd ~/folder/project Créer l’application (venv) python manage.py startapp camera Django a créé un nouveau répertoire. L’arborescence est :\nStructure de l’application camera L’application camera va comporter huit vues, c’est à dire huit pages web différentes.\naccueil : la page d’accueil du site. historique : page présentant des photos prises à intervalle régulier par les trois caméras, sur une durée déterminée (par exemple, toutes les 5 minutes sur les 24 dernières heures) parHeure : page présentant les photos prises sur une durée déterminée (par exemple, toutes les 5 minutes sur les douze dernières heures) nuit : page présentant les photos prises entre le coucher et le lever du soleil (par exemple, toutes les 3 minutes du coucher au lever le lendemain) stream_1 : flux vidéo en direct de la première caméra stream_2: flux vidéo en direct de la deuxième caméra stream_py : flux vidéo en direct de la caméra py stream_AllCam : flux vidéo en direct des trois caméras Réglage du fichier settings.py Ouvrir le fichier settings.py (vous n’avez pas besoin d’être en environnement virtuel)\nnano ~/folder/project/project/settings.py Apporter les modifications suivantes\nALLOWED_HOSTS : ajouter l\u0026rsquo;IP locale de la Raspberry\nALLOWED_HOSTS = [\u0026#39;\u0026lt;local IP raspberry\u0026gt;\u0026#39;] par exemple `['192.168.1.49']` INSTALLED_APPS : ajouter \u0026lsquo;camera.apps.CameraConfig\u0026rsquo; dans la liste existante\nINSTALLED_APPS = [ \u0026#39;camera.apps.CameraConfig\u0026#39;, \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, ] DATABASES : ajouter votre time-zone\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: BASE_DIR / \u0026#39;db.sqlite3\u0026#39;, \u0026#39;TIME_ZONE\u0026#39;: \u0026#39;Europe/Paris\u0026#39; } } Ceci permet de régler des problèmes de prise en compte des dates par la base de données. Si vous optez pour une base de données autre que sqlite3, vous devrez réécrire les parties des scripts qui font appel au module sqlite3.\nLANGUAGE_CODE et TIME_ZONE : adapter la langue et la time-zone LANGUAGE_CODE =\u0026#39;fr\u0026#39; TIME_ZONE = \u0026#39;Europe/Paris\u0026#39; STATICFILES_DIRS : ajouter en fin de fichier (en dessous de la ligne STATIC_URL par exemple) STATICFILES_DIRS = [ BASE_DIR / \u0026#34;static\u0026#34;, \u0026#34;/var/www/stock\u0026#34;, ] si vous avez gardé cette valeur de la clé stockde la section [paths] du fichier de configuration.\nC\u0026rsquo;est dans ce dossier /var/www/stock que seront stockées les photos prises par les caméras.\nCréer les modèles de l’application Les modèles vont permettre de définir les tables de la base de données. Nous allons créer deux modèles : un modèle Appareil qui caractérise chaque caméra un modèle Photo qui caractérise les photos qui vont être stockées Ouvrir le fichier ~/folder/project/camera/models.py nano ~/folder/project/camera/models.py Supprimer son contenu Remplacer son contenu par celui du fichier models.py disponible ici. Prendre en compte les modifications ; on crée la base de données et on effectue les migrations (en environnement virtuel) (venv) python ~/folder/project/manage.py makemigrations (venv) python ~/folder/project/manage.py migrate Créer les trois caméras Ouvrir le shell (venv) python ~/folder/project/manage.py shell Créer les caméras \u0026gt;\u0026gt;\u0026gt; from camera.models import Appareil \u0026gt;\u0026gt;\u0026gt; c = Appareil(name=\u0026#34;Cam_1\u0026#34;) \u0026gt;\u0026gt;\u0026gt; c.save() \u0026gt;\u0026gt;\u0026gt; c = Appareil(name=\u0026#34;Cam_2\u0026#34;) \u0026gt;\u0026gt;\u0026gt; c.save() \u0026gt;\u0026gt;\u0026gt; c = Appareil(name=\u0026#34;Cam_py\u0026#34;) \u0026gt;\u0026gt;\u0026gt; c.save() Vérifier que les trois caméras sont bien crées \u0026gt;\u0026gt;\u0026gt; Appareil.objects.all() \u0026lt;QuerySet [\u0026lt;Appareil: Cam_1\u0026gt;, \u0026lt;Appareil: Cam_2\u0026gt;, \u0026lt;Appareil: Cam_py\u0026gt;]\u0026gt; Quitter le shell : Ctrl+D Nous n’avons pas utilisé l’interface Admin de Django. Celle-ci nous est inutile, toutes les actions sur la base de données se feront directement par des scripts python. Modifier le fichier urls.py de ~/folder/project/project Ouvrir le fichier nano ~/folder/project/project/urls.py Modifier la ligne d\u0026rsquo;import et la ligne urlpatterns de la manière suivante from django.contrib import admin from django.urls import path, include urlpatterns = [ path(\u0026#39;camera/\u0026#39;, include(\u0026#39;camera.urls\u0026#39;)), path(\u0026#39;admin/\u0026#39;, admin.site.urls), ] Un exemplaire du fichier est disponible ici. Créer un fichier urls.py dans ~/folder/project/camera Créer et ouvrir le fichier en écriture nano ~/folder/project/camera/urls.py Coller/copier dans ce fichier le contenu du fichier urls.py (camera) disponible ici. Modifier le fichier views.py dans ~/folder/project/camera Modifier le fichier Ouvrir le fichier nano ~/folder/project/camera/views.py Effacer son contenu et copier/coller le contenu du fichier views.py (V1) disponible ici. Commentaires sur ce fichier La vue historique (def historique(request)) permet de visualiser les captures de photos des trois caméras sur les N dernières heures en ne sélectionnant qu’une photo sur n, les photos étant prises à une fréquence f. Les paramètres N, n et f sont modifiables dans le fichier de configuration. Il s’agit des clés historique, display_jour et capture de la section [fréquences]. Si la clé historique est à 5, la clé display_jour à 2 et la clé capture à 60 cela signifie que les caméras prennent une photo toutes les 60 secondes et qu’on visualisera sur les 2 derniers jours une photo sur cinq (c’est à dire une photo toutes les 300 secondes). La vue parHeure (def parHeure(request)) permettra de visualiser toutes les photos des trois caméras sur les N dernières heures prises à la fréquence f, sans sélection. N et f ont la même valeur que dans la vue historique. La présentation se fera en pagination. La vue nuit permet de visualiser les captures de photos entre le coucher du soleil et le lever du lendemain. Les photos sont prises à la fréquence f (la même que dans la vue historique) et on peut ne sélectionner qu’une photo sur p, p étant la clé nuit de la section [fréquences] du fichier de configuration. Les fonctions de streaming n’appellent aucun réglage, sauf l’adresse IP locale de la raspberry (clé raspIP de la section [hosts] et les ports de sortie des flux (clés cam_1_port, cam_2_port et cam_py_port de la section [camera]) Par défaut : N = 24 heures (clé display_jour=1, soit 24 heures), n = 4, p = 3, f = 60 (en secondes) ; les ports des flux sont par défaut 8081, 8082 et 8084. Lever et coucher du soleil Les heures de lever et de coucher du soleil sont calculées à l\u0026rsquo;aide du module suntimes Installer le module suntimes (en environnement virtuel) (venv) pip install suntimes Si besoin installer jdcal et tzlocal (a priori les dépendances s\u0026rsquo;installent automatiquement) (venv) pip install jdcal (venv) pip install tzlocal Le constructeur SunTimes du module suntimes prend trois paramètres de localisation : longitude, latitude et altitude qu\u0026rsquo;il faut modifier dans le fichier de configuration. Ouvrir le fichier de configuration sudo nano /etc/camera/configuration.ini Dans la section [locate] modifier les valeurs par défaut par celles de votre lieu. Ces valeurs sont disponibles sur geoportail ou sur google earth. A renseigner impérativement dans le fichier de configuration Dans la section [hosts] chercher la clé raspIP Remplacer la valeur par l\u0026rsquo;IP locale de votre Raspberry Créer le fichier css et un fichier logo Création des dossiers css et logo Les fichiers css sont situés dans ~/folder/project/camera/static/camera/css/ Ce chemin paraît compliqué à première vue, mais il est le chemin recommandé dans les différentes tutoriels relatifs à Django. On suit cette procédure, même si la simplicité du site (une seule application) ne la justifie pas. Création des dossiers cd ~/folder/project/camera mkdir static static/camera static/camera/css static/camera/logo Remarques sur le fichier css : ce fichier a été récupéré à partir d\u0026rsquo;un site personnel construit antérieurement il y a des redondances et des classes superflues le design du site n\u0026rsquo;est pas optimal, loin s\u0026rsquo;en faut pour simplifier, tout le css a été regroupé dans un seul fichier il est possible de le fractionner en plusieurs fichiers, mais dans ce cas il faudra appeler chaque fichier dans le base.html Vous pouvez, bien sûr, modifier à votre convenance le css. Il faudra alors modifier l\u0026rsquo;appel des fichiers css dans le fichier base.html (chapître suivant). Création de global.css Créer et ouvrir en écriture le fichier global.css nano ~/folder/project/camera/static/camera/css/global.css Copier/coller dans l\u0026rsquo;éditeur de texte le contenu du fichier global.cssdisponible ici Logo favicon La favicon est une image qui s\u0026rsquo;affiche dans la barre d\u0026rsquo;adresse web en regard de l\u0026rsquo;URL. Charger sur la Raspberry une image au format png d\u0026rsquo;environ 40x40 pixels Nommer l\u0026rsquo;image logo.png Déplacer l\u0026rsquo;image dans le dossier ~/folder/project/camera/static/camera/logo Pour charger l\u0026rsquo;image logo.png située dans votre dossier /home/user/Bureau de votre ordinateur (par exemple) vers le dossier de la Raspberry taper dans un terminal la commande suivante : scp /home/user/Bureau/logo.png pi@\u0026lt;local IP Raspberry\u0026gt;:/home/pi/folder/project/camera/static/camera/logo En modifiant les chemins et l\u0026rsquo;IP de la Raspberry en fonction de vos paramètres ; à l\u0026rsquo;invite de commande, entrer le mot de passe de la Raspberry. Créer les fichiers html (templates) Création du dossier templates Les fichiers html sont situés dans ~/folder/project/camera/templates/camera/ Création des répertoires : cd ~/folder/project/camera mkdir templates templates/camera A propos de base.html base.html est le template (gabarit) de base dont vont hériter les autres templates. C’est dans ce gabarit que sont appelés les fichiers css et la favicon. Si vous avez modifié le chemin des fichiers css, c’est dans base.html que vous devez reporter ces modifications. De même, c’est dans ce gabarit que vous pouvez modifier l’aspect du menu, du header ou du footer (notamment, le nom qui apparaît en bas de page et le logo). Si vous modifiez le nom de ce gabarit ou si votre application ne s’appelle pas camera, vous devrez modifier en conséquence la première ligne {% extends \u0026quot;camera/base.html\u0026quot; %} des autres gabarits. Création de base.html Créer et ouvrir en écriture le fichier base.html nano ~/folder/project/camera/templates/camera/base.html Copier/coller dans ce fichier le contenu du fichier base.html disponible ici Procéder de même pour les autres fichiers html accueil.html dont le contenu est disponible ici historique.html dont le contenu est disponible ici nuit.html dont le contenu est disponible ici parHeure.html dont le contenu est disponible ici stream_1.html dont le contenu est disponible ici stream_2.html dont le contenu est disponible ici stream_py.html dont le contenu est disponible ici stream_AllCam.html dont le contenu est disponible ici Capturer les images et les stocker Créer les répertoires de stockage Créer le répertoire /var/www/stock sudo mkdir /var/www/stock Créer les sous-répertoires pour les différentes caméras cd /var/www/stock sudo mkdir Camera_1 Camera_2 Camera_py Changer le propriétaire de /var/www/stock sudo chown -R pi /var/www/stock Ecrire le script de capture des photos Ce script sera lancé au démarrage et tournera en boucle en effectuant : la capture des images pour chaque caméra à la fréquence choisie l\u0026rsquo;inscription dans la base de données des caractéristiques relatives à chaque photo (caméra, date de prise, nom de la photo, répertoire de stockage) Créer le script Créer et ouvrir en écriture le fichier getCamerasAndRegister.py nano ~/script/getCamerasAndRegister.py Copier/coller dans ce fichier le contenu du fichier getCamerasAndRegister.py disponible ici Lancer le script au démarrage de la Raspberry Ouvrir le cron en édition crontab -e Ajouter la ligne suivante @reboot python3 /home/pi/script/getCamerasAndRegister.py Ecrire le script de destruction périodique des photos Tous les jours on efface les images datant de plus de N jours, N étant la clé delay-delete de la section [frequences] du fichier de configuration.\nPar défaut, la valeur de N est 2, c’est à dire qu’on ne conserve les images que deux jours.\nIl est indispensable d’effectuer cette tâche régulièrement afin que la carte micro-SD ne soit pas saturée.\nCréer et ouvrir en écriture le fichier suppressFiles.py\nnano ~/script/suppressFiles.py Copier/coller dans ce fichier le contenu du fichier suppressFiles disponible ici\nLancer le script tous les jours à 03H10 du matin (par exemple) dans le crontab\nOuvrir le cron en édition crontab -e - Ajouter la ligne suivante\n10 03 * * * python3 /home/pi/script/suppressFiles.py Lancer Django au démarrage Le script lance le serveur de Django au démarrage de la raspberry sur le port 8000 par défaut (paramétrable dans /etc/configuration.ini) Pour accéder au site depuis un appareil du réseau, vous devez avoir indiqué l’adresse IP locale de la raspberry dans ALLOWED_HOSTS du fichier ~/folder/project/project/settings.py (par exemple ALLOWED_HOSTS = [\u0026lsquo;192.168.1.49\u0026rsquo;]) Créer et ouvrir en écriture le fichier runDjango.py nano ~/script/runDjango.py Copier/coller le contenu du fichier runDjango.py disponible ici Lancer le script au démarrage dans le crontab Ouvrir le crontab en édition crontab -e Ajouter la ligne suivante @reboot python3 /home/pi/script/runDjango.py Il peut être nécessaire, notamment en fonction du modèle de Raspberry de donner un temps de latence au démarrage (ici 120 secondes) @reboot sleep 120 \u0026amp;\u0026amp; python3 /home/pi/script/runDjango.py Tester le site Rebouter le système sudo reboot Attendre que les scripts des différentes caméras soient lancés. Dans la barre d\u0026rsquo;adresse d\u0026rsquo;un navigateur taper \u0026lt;local IP Raspberry\u0026gt;:8000/camera/ (par exemple : 192.168.1.49:8000/camera/) Vous devez obtenir ce résultat : Si les caméras sont bien lancées, vous devez voir les flux en cliquant sur le bouton En direct. Bien sûr, pour les autres pages html, au début vous ne verrez que peu ou pas d\u0026rsquo;images. Au fil du temps, les différents historiques (Histoire, Heure par Heure et Nuit) pourront être longs à s\u0026rsquo;afficher, le nombre d\u0026rsquo;images à charger étant élevé. C\u0026rsquo;est, à l\u0026rsquo;évidence, une faiblesse des scripts. Horaire d\u0026rsquo;été / horaire d\u0026rsquo;hiver Position du problème Lors du passage de l\u0026rsquo;horaire d\u0026rsquo;été à l\u0026rsquo;horaire d\u0026rsquo;hiver la même heure va être doublée Ceci ne pose pas de problème au niveau du stockage des photos : la photo qui portera le même nom écrasera la photo homonyme Par contre au niveau de la base de données, deux lignes vont exister pour une photo prise à la même heure Lorsqu\u0026rsquo;on voudra afficher les historiques, une erreur 500 sera renvoyée, Django ne sachant pas quelle image afficher Solution 1 Éteindre la raspberry avant le changement d\u0026rsquo;heure Rallumer la raspberry après le changement d\u0026rsquo;heure Solution 2 Après le changement d\u0026rsquo;heure, alors que l\u0026rsquo;erreur 500 va s\u0026rsquo;afficher, vider la table de la base de données contenant les informations des photos Se connecter en ssh à la raspberry Une fois connecté, se mettre dans le shell squlite en tapant dans le terminal pi@raspberry:~ $ sqlite3 Ouvrir la base de données (à adapter si les différents noms ont été changés) sqlite \u0026gt; .open \u0026#34;/home/pi/folder/project/db.sqlite3\u0026#34; Éventuellement vérifier le nom des tables de la base sqlite \u0026gt; .tables Supprimer les donées de la table camera_photo (si ce nom a été conservé) sqlite \u0026gt; DELETE FROM camera_photo; Quitter le shell sqlite sqlite \u0026gt; Crtl+D Vérifier que l\u0026rsquo;historique ne renvoie pas d\u0026rsquo;erreur 500 Au bout d\u0026rsquo;une minute de nouveaux enregistements sont inscrits dans la base et on peut les apercevoir dans la vue parHeure A ce stade - Prochaine étape A ce stade On dispose d\u0026rsquo;un site web qui fonctionne en local avec le serveur embarqué de Django. Ce site est accessible depuis les différents appareils du réseau local en tapant dans la fenêtre d\u0026rsquo;un navigateur web \u0026lt;local IP Raspberry\u0026gt;:\u0026lt;port serveur Django\u0026gt;/camera Si vous ne souhaitez pas accéder au site depuis l\u0026rsquo;extérieur, vous pouvez, de manière peu orthodoxe, en rester là. Mais il est souhaitable de passer à l\u0026rsquo;étape suivante. Prochaine étape Installation d\u0026rsquo;un serveur Apache qui va prendre la main sur le serveur embarqué de Django. Installation du module mod-wsgi, interface entre Apache et Django Paramétrages de Apache et Django pour que le site soit accessible en production (et non plus en développement). "},{"id":58,"href":"/script/runCamera_py_py/","title":"RunCamera_py.py","parent":"Scripts","content":"\u0026#34;\u0026#34;\u0026#34;Script python qui va lancer la caméra py et permettre à mjpg-streamer de générer les flux et les images statiques A indiquer dans le crontab en @reboot\u0026#34;\u0026#34;\u0026#34; import subprocess from time import sleep from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) cam_py_W = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_W\u0026#34;) cam_py_H = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_H\u0026#34;) cam_py_quality = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_quality\u0026#34;) cam_py_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_port\u0026#34;) cam_py_fps = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_py_fps\u0026#34;) mjpg_path = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;mjpg\u0026#34;) delay_run=int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;delay_run_Cam_py\u0026#34;)) sleep(delay_run) #attente avant de lancer les commandes command_py = \u0026#34;cd {} \u0026amp;\u0026amp; export LD_LIBRARY_PATH=. \u0026amp;\u0026amp; ./mjpg_streamer -o \u0026#39;output_http.so -p {} -w ./www\u0026#39; -i \u0026#39;input_raspicam.so -x {} -y {} - quality {} -fps {} \u0026#39;\u0026#34;.format(mjpg_path, cam_py_port, cam_py_W, cam_py_H, cam_py_quality, cam_py_fps) subprocess.run(command_py, shell=True) "},{"id":59,"href":"/script/runCamera_2_py/","title":"RunCamera_2.py","parent":"Scripts","content":"\u0026#34;\u0026#34;\u0026#34;Script python qui va lancer la caméra 2 et permettre à mjpg-streamer de générer les flux et les images statiques A indiquer dans le crontab en @reboot\u0026#34;\u0026#34;\u0026#34; import subprocess from time import sleep from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) cam_2_name = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_2_name\u0026#34;) cam_2_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_2_port\u0026#34;) cam_2_resol = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_2_resol\u0026#34;) mjpg_path = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;mjpg\u0026#34;) delay_run=int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;delay_run_Cam_2\u0026#34;)) sleep(delay_run) #attente avant de lancer les commandes command_2 = \u0026#34;cd {} \u0026amp;\u0026amp; export LD_LIBRARY_PATH=. \u0026amp;\u0026amp; ./mjpg_streamer -i \u0026#39;input_uvc.so -r {} -d /dev/v4l/by-id/{}\u0026#39; -o \u0026#39;output_http.so -p {} -w {}/www\u0026#39;\u0026#34;.format(mjpg_path,cam_2_resol, cam_2_name, cam_2_port, mjpg_path) subprocess.run(command_2, shell=True) # command_2 = [\u0026#34;cd\u0026#34;, {mjpg_path}, \u0026#34;\u0026amp;\u0026amp;\u0026#34;, \u0026#34;export\u0026#34;, \u0026#34;LD_LIBRARY_PATH=\u0026#34;, \u0026#34;\u0026amp;\u0026amp;\u0026#34;, \u0026#34;./mjpg_streamer\u0026#34;, \u0026#34;-i\u0026#34;, f\u0026#39;input_uvc.so -r {cam_2_resol} -d /dev/v4l/by-id/{cam_2_name}\u0026#39;, \u0026#34;-o\u0026#34;, f\u0026#39;output_http.so -p {am_2_port} -w {mjpg_path}/www\u0026#39;] # suprocess.run(command_2) "},{"id":60,"href":"/script/runCamera_1_py/","title":"RunCamera_1.py","parent":"Scripts","content":"\u0026#34;\u0026#34;\u0026#34;Script python qui va lancer la caméra 1 et permettre à mjpg-streamer de générer les flux et les images statiques A indiquer dans le crontab en @reboot\u0026#34;\u0026#34;\u0026#34; import subprocess from time import sleep from configparser import ConfigParser parser_file = \u0026#34;/etc/camera/configuration.ini\u0026#34; parser = ConfigParser() parser.read(parser_file) cam_1_name = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_name\u0026#34;) cam_1_port = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_port\u0026#34;) cam_1_resol = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_resol\u0026#34;) cam_1_fps = parser.get(\u0026#34;camera\u0026#34;, \u0026#34;cam_1_fps\u0026#34;) mjpg_path = parser.get(\u0026#34;paths\u0026#34;, \u0026#34;mjpg\u0026#34;) delay_run=int(parser.get(\u0026#34;frequences\u0026#34;, \u0026#34;delay_run_Cam_1\u0026#34;)) sleep(delay_run) #attente avant de lancer les commandes #command_cp = [\u0026#34;cp\u0026#34;, f\u0026#39;{path_db}{baseName}\u0026#39;, f\u0026#39;{path_db}/{baseBackUp}\u0026#39;] #command_1 = [\u0026#34;cd\u0026#34;, f\u0026#39;{mjpg_path}\u0026#39;, \u0026#34;\u0026amp;\u0026amp;\u0026#34;, \u0026#34;export\u0026#34;, f\u0026#39;LD_LIBRARY_PATH=.\u0026#39;, \u0026#34;\u0026amp;\u0026amp;\u0026#34;, f\u0026#39;./mjpg_streamer\u0026#39;, \u0026#34;-i\u0026#34;, \u0026#39;input_uvc.so -r {} -fps {} -d /dev/v4l/by-id/{}\u0026#39; -o \u0026#39;output_http.so -p {} -w {}/www\u0026#39;]\u0026#34;.format(mjpg_path,cam_1_resol, cam_1_fps, cam_1_name, cam_1_port, mjpg_path) command_1 = \u0026#34;cd {} \u0026amp;\u0026amp; export LD_LIBRARY_PATH=. \u0026amp;\u0026amp; ./mjpg_streamer -i \u0026#39;input_uvc.so -r {} -fps {} -d /dev/v4l/by-id/{}\u0026#39; -o \u0026#39;output_http.so -p {} -w {}/www\u0026#39;\u0026#34;.format(mjpg_path,cam_1_resol, cam_1_fps, cam_1_name, cam_1_port, mjpg_path) subprocess.run(command_1, shell=True) "},{"id":61,"href":"/tuto/part2/","title":"Tutoriel : Partie 2 - Installation de mjpg-streamer","parent":"Tutos","content":"A faire Installer mjpg-streamer Désigner les caméras USB de manière unique Scripts de lancement des caméras Installation de mjpg-streamer Il existe deux façons d’installer mjpg-streamer : en utilisant la commande snap en passant par la page github de Jackson Liam La méthode snap est la plus simple, mais on ne peut pas l\u0026rsquo;utiliser ici car elle n\u0026rsquo;installe pas le module input_raspicam qui gère la pi-caméra. Installer avec github Cloner le dépôt git git clone https://github.com/jacksonliam/mjpg-streamer.git Déplacer le dossier de ~/mjpg-streamer vers ~/ le dossier mjpg-streamer-experimental s\u0026rsquo;est copié dans un dossier parent mjpg-streamer le déplacer vers /home/pi mv ~/mjpg-streamer/mjpg-streamer-experimental ~/ Suppression du dossier mjpg-streamer (en sudo car contient un fichier protégé) sudo rm -R mjpg-streamer Installation des dépendances : sudo apt install cmake libjpeg62-turbo-dev -y Si la question souhaitez-vous continuer est posée, taper O\nA priori les dépendances gcc et g++ sont déjà installées. Sinon les installer sudo apt install gcc g++ Compilation cd ~/mjpg-streamer-experimental make sudo make install Installation et dénomination des caméras Remarque : la pi caméra a été malencontreusement dénommée au départ camera_py, avec un y et non un i. Modifier a posteriori cette coquille serait source d’erreur, aussi le y a été laissé dans les dénominations des dossiers, fichiers et variables.\nBrancher la pi-camera si cela n\u0026rsquo;est pas déjà fait Attention : la raspberry doit être éteinte pour brancher la pi-camera Consulter un tutoriel dédié. Par exemple celui de projects.raspberry Brancher les deux caméras USB si cela n’est pas déjà fait. Dans le répertoire /dev/v4l/by-id répertorier l’identifiant des caméras USB ls /dev/v4l/by-id La commande renvoie des lignes du style : \u0026lt;valeur1\u0026gt;-video-index0 \u0026lt;valeur1\u0026gt;-video-index1 \u0026lt;valeur2\u0026gt;-video-index0 \u0026lt;valeur2\u0026gt;-video-index1 Dans un deuxième terminal connecté en ssh ouvrir le fichier de configuration sudo nano /etc/camera/configuration.ini Dans la section [camera] chercher les clés cam_1_name et cam_2_name Remplacer, par un copier/coller, les valeurs mises par défaut par les valeurs \u0026lt;valeur1\u0026gt;-video-index0 et \u0026lt;valeur2\u0026gt;-video-index0 lues dans l’autre terminal. Ceci permet d’identifier de manière unique les flux vidéos dans les scripts de lancement de mjpg-streamer. Modification des paramètres des caméras Si vous le souhaitez vous pouvez modifier les paramètres des caméras dans le fichier configuration.ini : ports de sortie pour mjpg-streamer, résolution etc.\nSinon, laissez les valeurs par défaut.\nEn fonction de l’ancienneté et de la qualité de vos caméras, certains paramètres seront à ajuster : la résolution, le nombre d’images par seconde (fps) notamment.\nScripts de lancement des caméras Créer un dossier script placé dans /home/pi/ mkdir ~/script Vous pouvez nommer ce dossier autrement, mais dans ce cas vous devrez modifier la valeur par défaut du dossier dans le fichier configuration.ini (section [paths] clé script).\nC\u0026rsquo;est dans ce dossier que seront placés différents scripts.\nCréer runCamera_1.py Créer en écriture le fichier nano ~/script/runCamera_1.py Copier le contenu du fichier runCamera_1.py disponible en cliquant ici Coller ce contenu dans la fenêtre de l\u0026rsquo;éditeur nano Enregsitrer et fermer Créer runCamera_2.py de la même manière (pour copier le fichier : cliquer ici) Créer runCamera_py.py de la même manière (pour copier le fichier : cliquer ici) Une variable delay_run permet de différer le lancement du script pour éviter que le script ne tourne avant que les caméras n\u0026rsquo;aient été installées par la Raspberry. Il est possible de modifier ces variables dans le fichier de configuration (section [frequences], clés delay_run_Cam_1, delay_run_Cam_2, delay_run_Cam_py) Tester les caméras On peut tester les caméras, par exemple la caméra 1\nLancer le script runCamera_1.py python3 ~/script/runCamera_1.py La commande est python3 et non python ! Effectivement la version par défaut de raspbian est python2.\nAttendre le délai de lancement du script (!) et une fois le script lancé : Dans la barre d\u0026rsquo;adresse d\u0026rsquo;un navigateur taper : \u0026lt;local IP Raspberry\u0026gt;:8081/ (par exemple 192.168.1.49:8081/). Vous devez obtenir une page web semblable à celle-ci\nVisionner le flux en cliquant sur l\u0026rsquo;onglet Stream Les deux autres caméras sont visualisées en adaptant le port : 8082 et 8084 (modifier les ports si ils ont été changés dans le fichier de configuration). Erreurs possibles avec la Camera-py Suite à des modifications de librairies, il est possible que la Camera-py ne fonctionne pas Absence du fichier input_raspicam.so Si un message de ce type s\u0026rsquo;affiche : MJPG Streamer Version.: 2.0 ERROR: could not find input plugin Perhaps you want to adjust the search path with: # export LD_LIBRARY_PATH=/path/to/plugin/folder dlopen: input_raspicam.so: cannot open shared object file: No such file or directory Cela signifie que le fichier input_raspicam.so est manquant La Camera-py peut fonctionner avec le fichier input_uvc.so (cf la discussion sur le site de Jackson Liam, réponse du 26 décembre 2020) Dans le fichier RunCamera_py.py, dans la commande command_py,remplacer input_raspicam.so par input_uvc.so Erreur 501 Si en tapant dans le navigateur \u0026lt;local Ip\u0026gt;:\u0026lt;port mjpg\u0026gt; (par exemple : 192.168.1.45:8080) le message suivant s\u0026rsquo;affiche : 501: Not Implemented! no www-folder configured Cela signifie qu\u0026rsquo;il faut ajouter le folder manquant (voir la discussionsur zoneminder, réponse de mattneighbour du 6 août 2008) Il convient alors de taper dans la barre d\u0026rsquo;adresse du navigateur : \u0026lt;local Ip\u0026gt;:\u0026lt;port mjpg\u0026gt;/?action=snapshot ou \u0026lt;local Ip\u0026gt;:\u0026lt;port mjpg\u0026gt;/?action=stream Lancer les caméras et les flux au démarrage Pour lancer automatiquement les caméras et les flux au démarrage de la raspberry, il faut écrire les commandes dans le crontab.\nOuvrir le crontab crontab -e A la première utilisation du crontab, on vous demande de choisir l’éditeur. Taper 1 si vous souhaitez utiliser nano. A la fin du fichier crontab ajouter les trois lignes suivantes : @reboot python3 /home/pi/script/runCamera_1.py @reboot python3 /home/pi/script/runCamera_2.py @reboot python3 /home/pi/script/runCamera_py.py Ici aussi, la commande doit être python3 et non pas python. Bien sûr sauvegarder et quitter. @reboot signifie que la commande sera lancée à chaque démarrage de la raspberry. En cas d’absence de flux de l’une des caméras, rebouter le système en lançant la commande : sudo reboot A ce stade - Prochaine étape A ce stade 3 caméras ont été installées Les flux des caméras peuvent être consultés sur un appareil du réseau local en tapant dans la fenêtre d\u0026rsquo;un navigateur web \u0026lt;local IP Raspberry\u0026gt;:\u0026lt;port camera\u0026gt;/ (par exemple : 192.168.1.49:8082/) Prochaine étape Installer le cadre de développement (framework) Django Utiliser Django pour créer un site web avec des requêtes répondant au cahier des charges du projet "},{"id":62,"href":"/script/configuration_ini/","title":"Configuration.ini","parent":"Scripts","content":";Fichier ini. A placer dans /etc/camera ;ini file, to set in /etc/camera [locate] ;par défaut : le centre de la France selon l\u0026#39;IGN, Corse non comprise ;remplacer les valeurs par celles de votre localisation ;default : centre of France according IGN, Corse not included ;replace the values with those of your location longitude=2.430278 latitude=46.539722 altitude=326 zone=Europe/Paris [hosts] local=127.0.0.1 ;ip locale Raspberry - port du serveur Django ;MODIFIER L\u0026#39;IP LOCALE DE LA RASPBERRY (raspIP) EN FONCTION DE VOTRE VALEUR ;local ip Raspberry - Django server port ;CHANGE THE LOCAL IP OF THE RASPBERRY (raspIP) ACCORDING TO YOUR VALUE raspIP=\u0026lt;local IP Raspberry\u0026gt; ;port du serveur Django ;Django server port django_port=8000 ;proxy pour accès extérieur ;proxy for outdoor internet access proxy_1=Rp1 proxy_2=Rp2 proxy_py=Rpi [mails] ;mail du site (celui avec lequel on crée un compte chez le fournisseur DynDNS) ;ce mail peut être le même que le mail personnel ; mais il vaut mieux en créer un ;VOUS DEVEZ RENSEIGNER LES DONNNEES DES DEUX MAILS AVEC VOS VALEURS ;site email (the one with which we create an account with the DynDNS provider) ;this email can be the same as the personal email; but it is better to create one ;YOU MUST FILL IN THE DATA OF BOTH EMAILS WITH YOUR VALUES mail_site=\u0026lt;user1\u0026gt;@\u0026lt;provider1\u0026gt; ;mot de passe du mail_site ;password mail_site mail_site_mdp=\u0026lt;password\u0026gt; ;mail personnel (celui auquel vont être envoyées diverses alertes et informations) ;personal email (the one to which various alerts and information will be sent) mail_perso=\u0026lt;user2\u0026gt;@\u0026lt;provider2\u0026gt; ;port du smtp. Le port le plus usité est le 587, c\u0026#39;est donc celui par défaut ;si votre fournisseur d\u0026#39;adresse mail de mail_site a un autre port, le modifier ;en cas d\u0026#39;échec essayer dans l\u0026#39;ordre (après le 587) : 2525, puis 465 ;smtp port. The most used port is 587, so it is the default one ;if your mail_site email address provider has another port, change it ;in case of failure try in order (after 587): 2525, then 465 smtp_port=587 [camera] ;ports sur lesquels les trois caméras vont être lues par mjpg-streamer ;ports on which the three cameras will be read by mjpg-streamer cam_1_port=8081 cam_2_port=8082 cam_py_port=8084 ;localisation des deux caméras USB (cam_1 et cam_2). Prendre les valeurs trouvées dans le fichier /dev/v4l/by-id en choisissant celles se terminant par -index0 ;VOUS DEVEZ RENSEIGNER LES DONNNEES AVEC VOS VALEURS ;location of the two USB cameras (cam_1 and cam_2). Take the values found in the file / dev / v4l / by-id by choosing those ending in -index0 ;YOU MUST FILL IN THE DATA WITH YOUR VALUES cam_1_name=\u0026lt;value1\u0026gt;-video-index0 cam_2_name=\u0026lt;value2\u0026gt;-video-index0 ;résolution des caméras USB ;USB cameras resolution cam_1_resol=640x480 cam_2_resol=640x480 ;résolutionde la pi-camera : WxH et qualité de l\u0026#39;image ;resolution of the pi-camera: WxH and picture quality cam_py_W=640 cam_py_H=480 cam_py_quality=85 ;nombre d\u0026#39;images/seconde ;frames per second cam_1_fps=5 cam_2_fps=5 cam_py_fps=5 [paths] ;il est déconseillé de modifier les valeurs des chemins ;it is not recommended to modify the values of the paths ;dossier de mjpg-streamer ;mjpg-streamer folder mjpg=/home/pi/mjpg-streamer-experimental ;chemin de home/utilisateur ;home/user path home=/home/pi ;dossier principal ;main folder folder=folder ;dossier de l\u0026#39;environnement virtuel ;virtual environment folder venv=folder_venv ;nom du projet Django ;Django project name project=project ;nom de l\u0026#39;application du projet ;name of the project application appli=camera ;dossier où sont stockées les photos ;folder where photos are stored stock=/var/www/stock ;dossier des divers scripts ;various scripts folder script=/home/pi/script ;sous-dossier où vont être stockées les différentes images ;sub-folder where the different images will be stored pathCamera_1=Camera_1 pathCamera_2=Camera_2 pathCamera_py=Camera_py ;nom de la base de données - nom de la sauvegarde de la base de données ;database name - name of the database backup baseName=db.sqlite3 baseBackUp=back_up.sqlite3 [frequences] ;les fréquences historiques et nuit correspondent au nombre d\u0026#39;images qui seront présentées : si la valeur est N, il sera affiché une image sur N ;the historical (historique) and night (nuit) frequencies correspond to the number of images that will be presented: if the value is N, a frame out of N will be displayed historique=4 nuit=3 ;la capture est la fréquence de prise de vues en secondes ; la valeur est un entier compris entre 1 et 60 ; si N est égale à 1 il y a une prise de vue par seconde ; si N est égale à 60 il y a une prise de vue par minute ;capture is the shooting frequency in seconds; the value is an integer between 1 and 60; if N is equal to 1 there is one shot per second; if N is equal to 60 there is one shot per minute capture=60 ;display_jour correspond au nombre de jours que l\u0026#39;on va visionner dans les vues historiques ; c\u0026#39;est un nombre flottant ; si égal à un on affiche les vues d\u0026#39;une journée ; si 2, celles de 2 jours... ;display_jour corresponds to the number of days that we will view in the historical views; it is a floating number; if equal to one, the views of a day are displayed; if 2, those of 2 days ... display_jour=1 ;temps d\u0026#39;attente pour lancer les scripts runCamera - si on les lance trop tôt, les caméras risquent de ne pas être montées avant le lancement du script - exprimé en secondes ;wait time to launch runCamera scripts - if started too early, cameras may not be mounted before the script starts - expressed in seconds delay_run_Cam_1=75 delay_run_Cam_2=120 delay_run_Cam_py=50 ;temps (en jours) pendant lequel on garde les fichiers photos ;tous les jours, on détruit les fichiers plus anciens que N jours ;doit être entier ;time (in days) during which the photo files are kept ;every day, we destroy files older than N days ;must be integer delay_delete=2 ;temps d\u0026#39;attente pour que la raspberry envoie un courriel après redémarrage (en secondes) ;wait time for the raspberry to send an email after restart (in seconds) delay_send_mail_reboot=180 "},{"id":63,"href":"/rapid/rapid/","title":"Guide Rapide","parent":"Rapids","content":"Préalable Raspbian est installé sur la Raspberry. Celle-ci est accessible par SSH depuis un ordinateur à partir duquel sont lancées toutes les commandes.\nLa Raspberry a une IP locale fixe.\nLa pi-caméra et les deux caméras USB sont branchées.\nInstallation de logiciels et de dépendances mise à jour (si raspbian est d\u0026rsquo;installation ancienne)\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y dépendances pour mjpg-streamer\nsudo apt install cmake libjpeg8-dev -y apache2 et ses dépendances\nsudo apt install apache2 apache2-dev snapd (pour une installation simplifiée de certbot)\nsudo apt install snapd rebouter le système pour installer snap\nsudo reboot installer core une fois le système rebouté\nsudo apt install core installer certbot\nsudo snap install --classic certbot Installation d\u0026rsquo;un fichier de configuration sudo mkdir /etc/camera sudo nano /etc/camera/configuration.ini Copier/coller dans la fenêtre le contenu du fichier configuration.ini disponible ici. Modifier ou renseigner les valeurs suivantes : [locate] : renseigner longitude, latitude, altitude et zone en fonction de vos valeurs [hosts] : renseigner raspIP en fonction de l\u0026rsquo;IP locale de votre Raspberry [mails] : renseigner les différentes adresses mail et le mot de passe [camera] : cam_1_name et cam_2_name seront renseignés plus loin ; les autres valeurs peuvent être inchangées ou modifiées à votre convenance. [paths] et [frequences] : ne rien modifier a priori Installation de mjpg-streamer et des caméras Installer mjpg-streamer Cloner le dépôt git\ngit clone https://github.com/jacksonliam/mjpg-streamer.git Déplacer mjpg-streamer-experimental dans /home/pi\nmv ~/mjpg-streamer/mjpg-streamer-experimental ~/ Compilation\ncd ~/mjpg-streamer-experimental make sudo make install Dénomination des caméras Dans le répertoire /dev/v4l/by-id répertorier l’identifiant des caméras\nls /dev/v4l/by-id La commande retourne 4 lignes du style :\n\u0026lt;valeur1\u0026gt;-video-index0 \u0026lt;valeur1\u0026gt;-video-index1 \u0026lt;valeur2\u0026gt;-video-index0 \u0026lt;valeur2\u0026gt;-video-index1 Dans le fichier de configuration remplacer les valeurs des clés cam_1_name et cam_2_name par les valeurs \u0026lt;valeur1\u0026gt;-video-index0 et \u0026lt;valeur2\u0026gt;-video-index0\nInstallation de Django Création d\u0026rsquo;un environnement virtuel Création du dossier folder et de l\u0026rsquo;environnement virtuel\nmkdir ~/folder cd ~/folder python3 -m venv folder_venv Pour activer l\u0026rsquo;environnement virtuel\nsource ~/folder/folder_venv/bin/activate L\u0026rsquo;invite de commande ne sera plus du style pi@Foo:~ $ mais (folder_venv) pi@Foo:~ $\nPour désactiver l\u0026rsquo;environnement virtuel\ndeactivate Dorénavant, lorsque les commandes seront tapées dans l\u0026rsquo;environnement virtuel, elles seront précédées du symbole : (venv)\nInstallation de Django et de modules complémentaires Installer Django en environnement virtuel\n(venv) python -m pip install Django Vérifier l\u0026rsquo;installation et la version\n(venv) python -m django --version qui doit renvoyer une sortie du type : 3.1.4 (en fonction de la version)\nInstaller le module suntimes\n(venv) pip install suntimes Au besoin installer les dépendances de suntimes\n(venv) pip install jdcal (venv) pip install tzlocal Création du projet et de l\u0026rsquo;application Création du projet project et de l\u0026rsquo;application camera (venv) cd ~/folder (venv) django-admin startproject project (venv) cd ~/folder/project (venv) python manage.py startapp camera Structure de l\u0026rsquo;application camera L\u0026rsquo;application camera va comporter huit vues :\naccueil : la page d’accueil du site historique : page présentant des photos prises à intervalle régulier par les trois caméras, sur une durée déterminée (par exemple, toutes les 5 minutes sur les 24 dernières heures) parHeure : pages avec pagination présentant toutes les photos prises sur une durée déterminée (par exemple, toutes les minutes sur les 24 dernières heures) nuit : page présentant des photos prises à intervalle régulier par la caméra nocturne du coucher du soleil au lever du soleil le lendemain stream_1 : flux vidéo en direct de la première caméra stream_2: flux vidéo en direct de la deuxième caméra stream_py : flux vidéo en direct de la pi-caméra stream_AllCam : flux vidéo en direct des trois caméras Réglages du fichier settings.py Ouvrir le fichier settings.py\nnano ~/folder/project/project/settings.py ALLOWED_HOSTS : ajouter l\u0026rsquo;IP locale de la Raspberry\nALLOWED_HOSTS = ['\u0026lt;local IP raspberry\u0026gt;'] INSTALLED_APPS : ajouter camera.apps.CameraConfig dans la liste existante\nINSTALLED_APPS = [ \u0026#39;camera.apps.CameraConfig\u0026#39;, \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, ] DATABASES : ajouter votre time-zone\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: BASE_DIR / \u0026#39;db.sqlite3\u0026#39;, \u0026#39;TIME_ZONE\u0026#39;: \u0026#39;Europe/Paris\u0026#39; } } LANGUAGE_CODE et TIME_ZONE : adapter la langue et la time-zone\nLANGUAGE_CODE =\u0026#39;fr\u0026#39; TIME_ZONE = \u0026#39;Europe/Paris\u0026#39; Créer les modèles de l\u0026rsquo;application Ouvrir le fichier models.py\nnano ~/folder/project/camera/models.py Remplacer son contenu par celui du fichier models.py disponible ici.\nPrendre en compte les modifications\n(venv) python ~/folder/project/manage.py makemigrations (venv) python ~/folder/project/manage.py migrate Créer les trois caméras\n(venv) python ~/folder/project/manage.py shell \u0026gt;\u0026gt;\u0026gt; from camera.models import Appareil \u0026gt;\u0026gt;\u0026gt; c = Appareil(name=\u0026#34;Cam_1\u0026#34;) \u0026gt;\u0026gt;\u0026gt; c.save() \u0026gt;\u0026gt;\u0026gt; c = Appareil(name=\u0026#34;Cam_2\u0026#34;) \u0026gt;\u0026gt;\u0026gt; c.save() \u0026gt;\u0026gt;\u0026gt; c = Appareil(name=\u0026#34;Cam_py\u0026#34;) \u0026gt;\u0026gt;\u0026gt; c.save() Vérifier les enregistrements\n\u0026gt;\u0026gt;\u0026gt; Appareil.objects.all() \u0026lt;QuerySet [\u0026lt;Appareil: Cam_1\u0026gt;, \u0026lt;Appareil: Cam_2\u0026gt;, \u0026lt;Appareil: Cam_py\u0026gt;]\u0026gt; Quitter le shell : Ctrl+D\nModifier le fichier urls.py de ~/folder/project/project Ouvrir le fichier nano ~/folder/project/project/urls.py modifier la ligne d\u0026rsquo;import et la ligne urlpatterns de la manière suivante from django.contrib import admin from django.urls import path, include urlpatterns = [ path(\u0026#39;camera/\u0026#39;, include(\u0026#39;camera.urls\u0026#39;)), path(\u0026#39;admin/\u0026#39;, admin.site.urls), ] Créer un fichier urls.py dans ~/folder/project/camera Créer et ouvrir le fichier en écriture\nnano ~/folder/project/camera/urls.py Coller/copier dans ce fichier le contenu du fichier urls_camera.py disponible ici.\nModifier le fichier ~folder/project/camera/views.py Ouvrir le fichier\nnano ~/folder/project/camera/views.py Effacer son contenu et copier/coller le contenu du fichier views.py disponible ici.\nCréer les fichier css et un fichier logo Création des dossiers css et logo\ncd ~/folder/project/camera mkdir static static/camera static/camera/css static/camera/logo Créer et écrire le fichier general.css\nnano ~/folder/project/camera/static/camera/css/general.css Copier/coller dans ce fichier le contenu du fichier general.css disponible ici.\nProcéder de même pour les autres fichiers css : bouton.css dont le contenu est disponible ici menu.css dont le contenu est disponible ici disposition.css dont le contenu est disponible ici header_footer.css dont le contenu est disponible ici pagination.css dont le contenu est disponible ici Logo favicon Charger sur la Raspberry une image au format png d\u0026rsquo;environ 40x40 pixels Nommer l\u0026rsquo;image logo.png Déplacer l\u0026rsquo;image dans le dossier ~/folder/project/camera/static/camera/logo Créer les fichiers html (templates) Création du dossier templates\ncd ~/folder/project/camera mkdir templates templates/camera Créer et écrire le fichier base.html\nnano ~/folder/project/camera/templates/camera/base.html Copier/coller dans ce fichier le contenu du fichier base.html disponible ici.\nProcéder de même pour les autres fichiers html : accueil.html dont le contenu est disponible ici historique.html dont le contenu est disponible ici nuit.html dont le contenu est disponible ici parHeure.html dont le contenu est disponible ici stream_1.html dont le contenu est disponible ici stream_2.html dont le contenu est disponible ici stream_py.html dont le contenu est disponible ici stream_AllCam.html dont le contenu est disponible ici Nom de domaine - DynDNS - Modifications sur la box Obtenir un nom de domain chez No-IP Aller sur le site de No-Ip Créer son site avec obtention du nom de domaine en suivant les instructions Modifications sur la box Quelques modifications sont à apporter au niveau de la box. La marche à suivre décrit ci-dessous concerne une livebox Orange ; les proccédures sont similaires chez les autres opérateurs.\nCréer une règle NAT/PAT pour la raspberry sur les ports internes et externes 80 Créer une règle NAT/PAT pour la raspberry sur les ports internes et externes 443 Dans le service DynDNS attribuer le nom de domaine obtenu chez NoIP, renseigner l\u0026rsquo;adresse email et le mot de passe NoIP Paramétrages de Apache et de l\u0026rsquo;interface wsgi Sécurisation minimale du serveur apache Suivre les instructions de la page wiki.debian\nOuvrir en écriture le fichier security.conf\nsudo nano /etc/apache2/conf-available/security.conf Modifier le fichier comme suit\nmodifier ServerTokens Prod (et non OS) modifier ServerSignature Off (et non On) laisser TraceEnable Off décommenter Header set X-Content-Type-Options: \u0026quot;nosniff\u0026quot; décommenter Header set X-Frame-Options: \u0026quot;sameorigin\u0026quot; Modifier la page d\u0026rsquo;accueil Apache en la supprimant et en la remplaçant par une nouvelle\nsudo rm /var/www/html/index.html sudo nano /var/www/html/index.html Copier, par exemple, le script suivant dans cette nouvelle page\n\u0026lt;html\u0026gt; PAGE INACCESSIBLE \u0026lt;/html\u0026gt; Créer une page erreur 404\nsudo nano /var/www/html/missing.html Copier, par exemple, le script suivant dans cette nouvelle page\n\u0026lt;html\u0026gt; DOCUMENT INEXISTANT\u0026lt;br\u0026gt; MISSING DOCUMENT \u0026lt;/html\u0026gt; Modifier /etc/apache2/conf-available/localized-error-pages.conf\nsudo nano /etc/apache2/conf-available/localized-error-pages.conf Et décommenter la ligne ErrorDocument 404 /missing.html\nInstallation du module mod_wsgi Installer le module dans l\u0026rsquo;environnement virtuel\n(venv) pip install mod_wsgi Se placer dans le répertoire des packages python de l\u0026rsquo;environnement virtuel\n(venv) cd /home/pi/folder/folder_venv/lib/python3.7/site-packages (Modifier la commande en fonction de la version python de l\u0026rsquo;environnement virtuel)\nLancer la commande suivante depuis ce répertoire\n(venv) mod_wsgi-express module-config On obtient une sortie de ce type\nLoadModule wsgi_module \u0026#34;/home/pi/folder/folder_venv/lib/python3.7/site-packages/mod_wsgi/server/mod_wsgi-py37.cpython-37m-arm-linux-gnueabihf.so\u0026#34; WSGIPythonHome \u0026#34;/home/pi/folder/folder_venv\u0026#34; Créer un fichier wsgi.load dans /etc/apache2/mods-available\nsudo nano /etc/apache2/mods-available/wsgi.load Dans ce fichier coller les deux lignes récupérées précédemment\nCréation des répertoires de stockage des photos sudo mkdir /var/www/stock cd /var/www/stock sudo mkdir Camera_1 Camera_2 Camera_py Donner les droits à www-data et à l\u0026rsquo;utilisateur pi Créer un groupe composé de pi et www-data, appelé varwwwusers\nsudo addgroup varwwwusers sudo adduser pi varwwwusers sudo adduser www-data varwwwusers Changer le propriétaire et les droits du dossier /var/www/stock\nsudo chown -R pi:varwwwusers /var/www/stock chmod -R 750 /var/www/stock Modifier le propriétaire et les droits de db.sqlite3\nsudo chown pi:www-data ~/folder/project/db.sqlite3 sudo chmod 770 ~/folder/project/db.sqlite3 Copier les fichiers statiques de Django vers /var/www/stock cp -r ~/folder/project/camera/static/camera /var/www/stock Modifier le fichier settings.py Ouvrir le fichier settings.py\nnano ~/folder/project/project/settings.py Mettre la valeur DEBUG à False\nDEBUG = False Masquer la clé de sécurité\nCopier la valeur de SECRET_KEY\nCréer et ouvrir en écriture /etc/camera/secret_key.txt\nsudo nano /etc/camera/secret_key.txt Coller la valeur de SECRET_KEY dans ce fichier\nRemplacer la ligne SECRET_KEY = '\u0026lt;votre SECRET_KEY\u0026gt;' par\nwith open(‘/etc/camera/secret_key.txt’) as f: SECRET_KEY = f.read().strip() STATICFILES_DIRS : ajouter en fin du fichier settings.py\nSTATICFILES_DIRS = [ BASE_DIR / \u0026#34;/home/pi/folder/project/camera/static\u0026#34;, \u0026#34;/var/www/stock\u0026#34; ] Restreindre l\u0026rsquo;accès au site Créer le fichier .htaccess dans /etc/apache2\nsudo touch /etc/apache2/.htpasswd -Créer un utilisateur, par exemple foo :\nsudo htpasswd /etc/apache2/.htpasswd foo A l’invite de commande \u0026lsquo;New password\u0026rsquo; rentrer un mot de passe A l’invite de commande \u0026lsquo;Re-type new password\u0026rsquo; rentrer à nouveau le mot de passe Le message \u0026quot; Adding password for user foo \u0026quot; s’affiche. Créer autant d’utilisateurs que nécessaire en procédant de la même manière. Obtenir un certificat Certbot de Let\u0026rsquo;s Encrypt Lancer la commande\nsudo certbot certonly --apache --rsa-key-size 4096 Répondre aux invites de commandes\nCréer le fichier de configuration project-camera.conf Créer et ouvrir le fichie en écriture\nsudo nano /etc/apache2/sites-available/project-camera.conf Coller/copier le contenu du fichier project-camera.conf disponible ici.\nRenseigner le nom de son site partout où nécessaire\nRenseigner l\u0026rsquo;adresse IP locale de la raspberry partout où nécessaire\nActiver les différents modules de apache Activation des modules\nsudo a2enmod headers sudo a2enmod wsgi sudo a2enmod proxy_http sudo a2enmod ssl sudo a2enmod rewrite Activation du site\nsudo a2ensite project-camera Redémarrer apache2\nsudo systemctl restart apache2 Accès au site Depuis l\u0026rsquo;extérieur du réseau, le site est accessible à l\u0026rsquo;adresse : \u0026lt;nom du site\u0026gt;/camera Depuis le réseau local, le site est accessible à l\u0026rsquo;adresse : \u0026lt;adresse Ip locale\u0026gt;:54321/camera Scripts de gestion Créer le dossier ~/script mkdir ~/script Scripts de lancement des caméras Créer et écrire le fichier runCamera_1.py\nnano ~/script/runCamera_1.py Et coller dans la fenêtre le contenu du fichier runCamera_1.py disponible ici\nFaire de même pour les deux autres caméras en créant les fichiers et en copiant/collant le contenu des fichiers runCamera_2.py disponible ici et runCamera_py.py disponible ici Les scripts sont lancés après un délai d\u0026rsquo;attente paramétrable dans le fichier de configuration. Ecrire le script de capture et de stockage des photos Créer et ouvrir en écriture le fichier\nnano ~/script/getCamerasAndRegister.py Copier/coller dans la fenêtre le contenu du fichier getCamerasAndRegister.py disponible ici.\nEcrire le script de destruction périodique des fichiers Créer et ouvrir en écriture le fichier\nnano ~/script/suppressFiles.py Copier/coller dans la fenêtre le contenu du fichier suppressFiles.py disponible ici.\nMise à jour régulière du système Créer et ouvrir le fichier en écriture\nnano ~/script/updateAndUpgradeAuto.sh Ecrire le script en ajoutant les deux lignes #!bin/bash sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y \u0026amp;\u0026amp; sudo apt autoremove -y Etre informé par courriel des redémarrages de la raspberry Créer et ouvrir le script en écriture nano ~/script/mail_reboot.py Copier/coller le contenu du fichier mail_reboot.py disponible ici ``` Contrôle de l\u0026rsquo;IP et envoi d\u0026rsquo;un mail en cas de changement Si une IP statique (fixe) n\u0026rsquo;est pas assujettie à la box, il faut être informé des changements d\u0026rsquo;IP. Créer et ouvrir en écriture le fichier ~/currentIP.txt nano ~/currentIP.txt Ecrire la ligne suivante {\u0026#34;ip\u0026#34;: \u0026#34; \u0026#34;, \u0026#34;date\u0026#34;: \u0026#34; \u0026#34;} Si vous n\u0026rsquo;écrivez rien dans le fichier, lorsque le script se lancera il soulèvera une erreur. Créer et ouvrir en écriture le fichier ~/script/ipcheck.py nano ~/script/ipcheck.py Copier/coller le contenu du fichier ipcheck.py disponible ici Lancement des différents scripts dans le cron Éditer le crontab crontab -e Copier dans le crontab les lignes suivantes @reboot python3 /home/pi/script/runCamera_1.py @reboot python3 /home/pi/script/runCamera_2.py @reboot python3 /home/pi/script/runCamera_py.py @reboot python3 /home/pi/script/getCamerasAndRegister.py 10 03 * * * python3 /home/pi/script/suppressFiles.py 10 02 3 */2 * sh /home/pi/script/certbotRenew.sh 10 04 * * 1 sh /home/pi/script/updateAndUpgradeAuto.sh @reboot python3 /home/pi/script/mail_reboot.py */10 * * * * python3 /home/pi/script/ipcheck.py Accès à la Raspberry depuis son téléphone mobile Différentes applications permettent d\u0026rsquo;accéder en ssh à un ordinateur distant depuis son téléphone mobile. Termius est une application simple dont la version gratuite est amplement suffisante pour ce projet. Accès au site Depuis l\u0026rsquo;extérieur du réseau, le site est accessible à l\u0026rsquo;adresse : \u0026lt;nom du site\u0026gt;/camera Depuis le réseau local, le site est accessible à l\u0026rsquo;adresse : \u0026lt;adresse Ip locale\u0026gt;:54321/camera "},{"id":64,"href":"/rapid/","title":"Rapids","parent":"Présentation","content":""},{"id":65,"href":"/tuto/part1/","title":"Tutoriel : Partie 1 - Mise en route de la Raspberry","parent":"Tutos","content":"A faire Mettre en route la Raspberry Modifications au niveau de la box Assurer une connexion ssh avec la Raspberry Mettre en place un fichier de configuration Matériels et logiciels Les matériels Ils ont été décrits dans la page d\u0026rsquo;accueil.\nLes logiciels Raspberry Pi Imager pour installer raspbian sur la raspberry. Rasbpian comme OS de la raspberry. mjpg-streamer pour assurer les flux vidéos et les captures d’image. Django, cadre de développement en langage python pour développer un site web. Un serveur Apache Un service DYN-DNS pour contourner le problème des IP dynamiques et obtenir un nom de site (No-IP). Un service pour sécuriser les échanges de données (Certbot / Let’s Encrypt) Une application pour se connecter en ssh depuis un téléphone mobile (Termius) Coût du projet Le coût total du projet est relativement modeste :\nraspberry kit complet avec boîtier, alimentation et carte SD : 80 € 2 caméras HD à port USB : 2x40 = 80€ pi-camera avec câble connecteur = 10 € spot émetteur à infrarouge = 20 € La gamme de prix ci-dessus est plutôt dans le haut de la fourchette. On peut trouver moins cher en fonction de la qualité et, surtout, du fournisseur.\nMise en route de la raspberry Création de la carte micro-SD Source : raspberry-pi Installer Raspberry Pi Imager sur son ordinateur sous linux sous macOX sous Windows Insérer la carte micro-SD dans son ordinateur Lancer Raspberry Pi Imager et suivre les instructions : sélectionner l’OS ; choisir raspbian sélectionner la carte cible micro-SD lancer l’écriture sur la carte Insérer la carte micro-SD dans la raspberry éteinte. Mise en route de la raspberry et premiers réglage Relier la Raspberry à un écran, une souris et un clavier Brancher la Raspberry Suivre les instructions : choix de la langue, du pays\u0026hellip; WiFi : accepter ou non selon que vous êtes connecté par câble ou non SetUp : accepter la mise à jour Lorsque la mise à jour est terminée, ne pas rebouter de suite : cliquer sur Later Aller dans Framboise \u0026ndash;\u0026gt; Preferences \u0026ndash;\u0026gt; Configuration Raspberry Onglet Système : laisser le nom de la Raspberry ou le changer (Foo par exemple) Onglet Système Bouton Modifier le mot de passe : mettre un mot de passe fort. Effectivement, le ssh va être activé et pour des raisons de sécurité il convient que le mot de passe soit consistant Onglet Interfaces : activer la caméra et le ssh Cliquer sur OK Rebouter le système\nLa Raspberry va maintenant être accessible en ssh depuis l\u0026rsquo;ordinateur. L\u0026rsquo;écran, la souris et le clavier peuvent être débranchés. Modifications au niveau de la box On donne une IP locale fixe à la Raspberry et on modifie son port ssh externe.\nLes indications données ici sont valables pour une livebox Orange. La procédure est similaire chez les autres opérateurs.\nPénéter dans les paramètres de la box taper 192.168.1.1 dans la barre d\u0026rsquo;un navigateur (pour Orange) s\u0026rsquo;identifier Assigner une IP locale fixe à la Raspberry aller dans les paramètres Réseau cliquer sur l\u0026rsquo;onglet DHCP la Raspberry apparaît dans la section Baux DHCP dynamiques au dessus des baux statiques, sélectionner la Raspberry dans la liste déroulante les autres lignes vont se remplir automatiquement cliquer sur Ajouter la raspberry est maintenant positionnée dans la section Baux DHCP statiques Dans ce tutoriel, l’IP locale fixe est 192.168.1.49 Modifier le port ssh externe de la Raspberry cliquer sur l\u0026rsquo;onglet NAT/PAT dans la liste déroulante sélectionner SSH ou créer SSH en cliquant sur nouveau port interne : mettre 22 port externe : mettre un port dont on sait a priori qu’il n’est pas utilisé, entre 40000 et 60000 par exemple protocole : laisser TCP Équipement : choisir la Raspberry dans la liste déroulante IP externe : laisser Toutes Ceci évitera les attaques multiples de personnes malveillantes qui viseront en premier lieu le port 22 par défaut. Une raspberry et deux adresses Mac ! Attention, la Raspberry a deux adresses Mac selon qu\u0026rsquo;elle est en WiFi ou en Filaire La box donnera donc deux adresses IP différentes : l\u0026rsquo;une pour chacune des adresses Mac Il convient donc de paramétrer son adresse IP locale en fonction du mode de transmission choisi : WiFi ou filaire Si le mode WiFi est choisi, il faut prendre garde au fait que la Raspberry pourra être lancée AVANT que le réseau WiFi ne soit disponible (voir les pages de dweeber et de Martin Harizanov) Un autre problème de la connexion WiFi est la possiblité d\u0026rsquo;une fluctuation de l\u0026rsquo;adresse Mac : voir le forum Raspberry Consulter la page WiFi consacrée à la connexion WiFi Connexion ssh à la raspberry Ouvrir un terminal dans l’ordinateur Linux : raccourci clavier Ctrl + Alt + T OS X : Applications \u0026gt; Utilitaires : choisir Terminal Windows : Touche Windows + R pour ouvrir l’invite de commande ; puis cmd dans l’invite de commande. Taper dans le terminal : ssh pi@\u0026lt;local IP Raspberry\u0026gt; Par exemple : ssh pi@192.168.1.49 Inutile de préciser le port : on est en local et le port par défaut est 22 A l’invite de commande entrer le mot de passe (par copier-coller).\nOn ne travaillera plus sur la Raspberry que par le biais d\u0026rsquo;un terminal connecté à celle-ci, c\u0026rsquo;est à dire avec une ligne de commande qui commence par pi@Foo si votre Raspberry a été nommée Foo. Nettoyage des dossiers De manière non indispensable, mais pour plus de clarté, vous pouvez détruire différents dossiers de la raspberry :\nrm -R Desktop Bookshelf Documents Downloads Music Pictures Public Templates Videos Utilisation d\u0026rsquo;un fichier de configuration Intérêt et présentation Ne pas coder en \u0026ldquo;dur\u0026rdquo; : dans les différents scripts utilisés, de manière à ne pas coder en dur de multiples variables, ce qui obligerait à les chercher une à une afin de les modifier, on passe par un fichier de configuration. Le fichier est de type ini et il est lu dans les scripts python par configparser. Ce fichier comprend six sections : [locate] : coordonnées du lieu pour le calcul des heures de lever et coucher du soleil [hosts] : ip de la raspberry [mails] : différentes adresses courriel, mot de passe et port smtp [camera] : différents paramètres des caméras [paths] : chemins des dossiers et des applications utilisés [frequences] : par exemple règle la fréquence des captures des images des caméras Installation Où placer le fichier ? Comment le nommer ? le placer dans un dossier /etc/camera le nommer configuration.ini si vous décidez de le placer ailleurs ou de le nommer autrement, vous devrez modifier, dans tous les scripts où il est appelé, son chemin et son nom Création du dossier /etc/camera\nDans le terminal connecté en ssh à la Raspberry, taper sudo mkdir /etc/camera (comme /etc est un dossier appartenant à root, créer le dossier camera en sudo) Création et ouverture en écriture du fichier configuration.ini sudo nano /etc/camera/configuration.ini Vous pouvez utiliser un autre éditeur que nano ; celui-ci a l’avantage de la simplicité. Copier le contenu du fichier configuration.ini disponible en cliquant ici Coller ce contenu dans la fenêtre vide du terminal Sauvegarder et quitter en faisant Ctrl+O Entrée Ctrl+X A ce stade - Prochaine étape A ce stade Raspbian est installé sur la Raspberry La Raspberry a une IP locale fixe Une connexion ssh est possible avec la Raspberry Un fichier de configuration a été mis en place Prochaine étape Installer mjpg-streamer Installer les caméras Ecrire les scripts permettant le lancement des caméras au démarrage de la Raspberry "},{"id":66,"href":"/","title":"Présentation","parent":"","content":"Introduction Création d\u0026rsquo;un site internet hébergé sur une raspberry fonctionnant sous un serveur Apache. Le site est construit avec le cadre de développement (framework) Django. Les images et les flux vidéos de trois caméras sont capturés par mjpg-streamer.\nCe tutoriel a été mis à jour en octobre 2023.\nCe site a été créé avec Hugo en utilisant le thème Geekdoc\nObjectif Créer une surveillance à distance de chevaux en stabulation libre. Les chevaux peuvent aller et venir hors d\u0026rsquo;un abri pour se rendre dans les prés avoisinants. La surveillance a pour but de savoir si les chevaux sont dans l’abri ou dans les prés et de vérifier que leur comportement y est normal. Mais également, lorsqu’ils sont hors de vue des caméras de savoir si dans un passé récent ils étaient bien présents.\nLe cahier des charges est le suivant :\nDisposer de trois caméras, dont une à vision nocturne. Chaque caméra doit assurer une vision en flux direct. Chaque caméra doit prendre des photos à intervalles réguliers. Il faut pouvoir consulter ces photos afin de savoir si dans un passé récent les chevaux étaient bien présents. Les informations doivent être disponibles depuis un navigateur web accessible localement et depuis l’extérieur du réseau. Les matériels Une Raspberry Pi, ici un modèle Pi3-B+ avec une carte micro-SD de 16 Giga relié au réseau local. Deux webcam en connexion USB. Une pi-caméra à vision nocturne. Un projecteur infra-rouge pour éclairer la zone de surveillance de la caméra nocturne. Un ordinateur (pour initialiser puis programmer la Raspberry à distance) Résultat final Le résultat sera de ce type :\nLa page d\u0026rsquo;accueil Les trois caméras Une caméra La page Historique La page Nuit La page par 24 heures Guides d\u0026rsquo;installation Deux guides d\u0026rsquo;installation sont disponibles :\nGuide rapide : pour une mise en place rapide des scripts. Ce guide est peu détaillé. Guide pas à pas : mise en place didactique des services permettant un bonne compréhension de la démarche. installation de la raspberry installation de mjpg-streamer installation de Django et utilisation du serveur embarqué de Django installation de Apache et de mod-wsgi : utilisation du serveur apache sur le réseau local obtention d\u0026rsquo;un nom de domaine et utilisation du serveur apache sur le réseau extérieur sécurisation https du site avec Certbot mise en place de divers scripts facilitant la maintenance mise en place d\u0026rsquo;une nouvelle caméra écriture d\u0026rsquo;une nouvelle fonction nuit "},{"id":67,"href":"/tags/","title":"Tags","parent":"Présentation","content":""}]